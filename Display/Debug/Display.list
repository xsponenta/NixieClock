
Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8c8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800ba60  0800ba60  0001ba60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba90  0800ba90  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba90  0800ba90  0001ba90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba98  0800ba98  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba98  0800ba98  0001ba98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba9c  0800ba9c  0001ba9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800baa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c34  200000a0  0800bb40  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cd4  0800bb40  00020cd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018ad6  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d5c  00000000  00000000  00038be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a8  00000000  00000000  0003c948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010bd  00000000  00000000  0003def0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001945b  00000000  00000000  0003efad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b4ed  00000000  00000000  00058408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000958c1  00000000  00000000  000738f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006008  00000000  00000000  001091b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010f1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000a0 	.word	0x200000a0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ba48 	.word	0x0800ba48

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000a4 	.word	0x200000a4
 80001d4:	0800ba48 	.word	0x0800ba48

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a28:	f000 b970 	b.w	8000d0c <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9e08      	ldr	r6, [sp, #32]
 8000a4a:	460d      	mov	r5, r1
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	460f      	mov	r7, r1
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d14a      	bne.n	8000aea <__udivmoddi4+0xa6>
 8000a54:	428a      	cmp	r2, r1
 8000a56:	4694      	mov	ip, r2
 8000a58:	d965      	bls.n	8000b26 <__udivmoddi4+0xe2>
 8000a5a:	fab2 f382 	clz	r3, r2
 8000a5e:	b143      	cbz	r3, 8000a72 <__udivmoddi4+0x2e>
 8000a60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a64:	f1c3 0220 	rsb	r2, r3, #32
 8000a68:	409f      	lsls	r7, r3
 8000a6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a6e:	4317      	orrs	r7, r2
 8000a70:	409c      	lsls	r4, r3
 8000a72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a76:	fa1f f58c 	uxth.w	r5, ip
 8000a7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a7e:	0c22      	lsrs	r2, r4, #16
 8000a80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a88:	fb01 f005 	mul.w	r0, r1, r5
 8000a8c:	4290      	cmp	r0, r2
 8000a8e:	d90a      	bls.n	8000aa6 <__udivmoddi4+0x62>
 8000a90:	eb1c 0202 	adds.w	r2, ip, r2
 8000a94:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000a98:	f080 811c 	bcs.w	8000cd4 <__udivmoddi4+0x290>
 8000a9c:	4290      	cmp	r0, r2
 8000a9e:	f240 8119 	bls.w	8000cd4 <__udivmoddi4+0x290>
 8000aa2:	3902      	subs	r1, #2
 8000aa4:	4462      	add	r2, ip
 8000aa6:	1a12      	subs	r2, r2, r0
 8000aa8:	b2a4      	uxth	r4, r4
 8000aaa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ab2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ab6:	fb00 f505 	mul.w	r5, r0, r5
 8000aba:	42a5      	cmp	r5, r4
 8000abc:	d90a      	bls.n	8000ad4 <__udivmoddi4+0x90>
 8000abe:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ac6:	f080 8107 	bcs.w	8000cd8 <__udivmoddi4+0x294>
 8000aca:	42a5      	cmp	r5, r4
 8000acc:	f240 8104 	bls.w	8000cd8 <__udivmoddi4+0x294>
 8000ad0:	4464      	add	r4, ip
 8000ad2:	3802      	subs	r0, #2
 8000ad4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ad8:	1b64      	subs	r4, r4, r5
 8000ada:	2100      	movs	r1, #0
 8000adc:	b11e      	cbz	r6, 8000ae6 <__udivmoddi4+0xa2>
 8000ade:	40dc      	lsrs	r4, r3
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0xbc>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	f000 80ed 	beq.w	8000cce <__udivmoddi4+0x28a>
 8000af4:	2100      	movs	r1, #0
 8000af6:	e9c6 0500 	strd	r0, r5, [r6]
 8000afa:	4608      	mov	r0, r1
 8000afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b00:	fab3 f183 	clz	r1, r3
 8000b04:	2900      	cmp	r1, #0
 8000b06:	d149      	bne.n	8000b9c <__udivmoddi4+0x158>
 8000b08:	42ab      	cmp	r3, r5
 8000b0a:	d302      	bcc.n	8000b12 <__udivmoddi4+0xce>
 8000b0c:	4282      	cmp	r2, r0
 8000b0e:	f200 80f8 	bhi.w	8000d02 <__udivmoddi4+0x2be>
 8000b12:	1a84      	subs	r4, r0, r2
 8000b14:	eb65 0203 	sbc.w	r2, r5, r3
 8000b18:	2001      	movs	r0, #1
 8000b1a:	4617      	mov	r7, r2
 8000b1c:	2e00      	cmp	r6, #0
 8000b1e:	d0e2      	beq.n	8000ae6 <__udivmoddi4+0xa2>
 8000b20:	e9c6 4700 	strd	r4, r7, [r6]
 8000b24:	e7df      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000b26:	b902      	cbnz	r2, 8000b2a <__udivmoddi4+0xe6>
 8000b28:	deff      	udf	#255	; 0xff
 8000b2a:	fab2 f382 	clz	r3, r2
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f040 8090 	bne.w	8000c54 <__udivmoddi4+0x210>
 8000b34:	1a8a      	subs	r2, r1, r2
 8000b36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3a:	fa1f fe8c 	uxth.w	lr, ip
 8000b3e:	2101      	movs	r1, #1
 8000b40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b44:	fb07 2015 	mls	r0, r7, r5, r2
 8000b48:	0c22      	lsrs	r2, r4, #16
 8000b4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b4e:	fb0e f005 	mul.w	r0, lr, r5
 8000b52:	4290      	cmp	r0, r2
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x124>
 8000b56:	eb1c 0202 	adds.w	r2, ip, r2
 8000b5a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x122>
 8000b60:	4290      	cmp	r0, r2
 8000b62:	f200 80cb 	bhi.w	8000cfc <__udivmoddi4+0x2b8>
 8000b66:	4645      	mov	r5, r8
 8000b68:	1a12      	subs	r2, r2, r0
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b70:	fb07 2210 	mls	r2, r7, r0, r2
 8000b74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b78:	fb0e fe00 	mul.w	lr, lr, r0
 8000b7c:	45a6      	cmp	lr, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x14e>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x14c>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f200 80bb 	bhi.w	8000d06 <__udivmoddi4+0x2c2>
 8000b90:	4610      	mov	r0, r2
 8000b92:	eba4 040e 	sub.w	r4, r4, lr
 8000b96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b9a:	e79f      	b.n	8000adc <__udivmoddi4+0x98>
 8000b9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ba0:	408b      	lsls	r3, r1
 8000ba2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ba6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000baa:	fa05 f401 	lsl.w	r4, r5, r1
 8000bae:	fa20 f307 	lsr.w	r3, r0, r7
 8000bb2:	40fd      	lsrs	r5, r7
 8000bb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb8:	4323      	orrs	r3, r4
 8000bba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bbe:	fa1f fe8c 	uxth.w	lr, ip
 8000bc2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bc6:	0c1c      	lsrs	r4, r3, #16
 8000bc8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bcc:	fb08 f50e 	mul.w	r5, r8, lr
 8000bd0:	42a5      	cmp	r5, r4
 8000bd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bd6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b0>
 8000bdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000be0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000be4:	f080 8088 	bcs.w	8000cf8 <__udivmoddi4+0x2b4>
 8000be8:	42a5      	cmp	r5, r4
 8000bea:	f240 8085 	bls.w	8000cf8 <__udivmoddi4+0x2b4>
 8000bee:	f1a8 0802 	sub.w	r8, r8, #2
 8000bf2:	4464      	add	r4, ip
 8000bf4:	1b64      	subs	r4, r4, r5
 8000bf6:	b29d      	uxth	r5, r3
 8000bf8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bfc:	fb09 4413 	mls	r4, r9, r3, r4
 8000c00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1da>
 8000c0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c10:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c14:	d26c      	bcs.n	8000cf0 <__udivmoddi4+0x2ac>
 8000c16:	45a6      	cmp	lr, r4
 8000c18:	d96a      	bls.n	8000cf0 <__udivmoddi4+0x2ac>
 8000c1a:	3b02      	subs	r3, #2
 8000c1c:	4464      	add	r4, ip
 8000c1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c22:	fba3 9502 	umull	r9, r5, r3, r2
 8000c26:	eba4 040e 	sub.w	r4, r4, lr
 8000c2a:	42ac      	cmp	r4, r5
 8000c2c:	46c8      	mov	r8, r9
 8000c2e:	46ae      	mov	lr, r5
 8000c30:	d356      	bcc.n	8000ce0 <__udivmoddi4+0x29c>
 8000c32:	d053      	beq.n	8000cdc <__udivmoddi4+0x298>
 8000c34:	b156      	cbz	r6, 8000c4c <__udivmoddi4+0x208>
 8000c36:	ebb0 0208 	subs.w	r2, r0, r8
 8000c3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c42:	40ca      	lsrs	r2, r1
 8000c44:	40cc      	lsrs	r4, r1
 8000c46:	4317      	orrs	r7, r2
 8000c48:	e9c6 7400 	strd	r7, r4, [r6]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c54:	f1c3 0120 	rsb	r1, r3, #32
 8000c58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c60:	fa25 f101 	lsr.w	r1, r5, r1
 8000c64:	409d      	lsls	r5, r3
 8000c66:	432a      	orrs	r2, r5
 8000c68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c74:	fb07 1510 	mls	r5, r7, r0, r1
 8000c78:	0c11      	lsrs	r1, r2, #16
 8000c7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c82:	428d      	cmp	r5, r1
 8000c84:	fa04 f403 	lsl.w	r4, r4, r3
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x258>
 8000c8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c92:	d22f      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000c94:	428d      	cmp	r5, r1
 8000c96:	d92d      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	4461      	add	r1, ip
 8000c9c:	1b49      	subs	r1, r1, r5
 8000c9e:	b292      	uxth	r2, r2
 8000ca0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ca4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ca8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cac:	fb05 f10e 	mul.w	r1, r5, lr
 8000cb0:	4291      	cmp	r1, r2
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x282>
 8000cb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cbc:	d216      	bcs.n	8000cec <__udivmoddi4+0x2a8>
 8000cbe:	4291      	cmp	r1, r2
 8000cc0:	d914      	bls.n	8000cec <__udivmoddi4+0x2a8>
 8000cc2:	3d02      	subs	r5, #2
 8000cc4:	4462      	add	r2, ip
 8000cc6:	1a52      	subs	r2, r2, r1
 8000cc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ccc:	e738      	b.n	8000b40 <__udivmoddi4+0xfc>
 8000cce:	4631      	mov	r1, r6
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	e708      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000cd4:	4639      	mov	r1, r7
 8000cd6:	e6e6      	b.n	8000aa6 <__udivmoddi4+0x62>
 8000cd8:	4610      	mov	r0, r2
 8000cda:	e6fb      	b.n	8000ad4 <__udivmoddi4+0x90>
 8000cdc:	4548      	cmp	r0, r9
 8000cde:	d2a9      	bcs.n	8000c34 <__udivmoddi4+0x1f0>
 8000ce0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ce4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	e7a3      	b.n	8000c34 <__udivmoddi4+0x1f0>
 8000cec:	4645      	mov	r5, r8
 8000cee:	e7ea      	b.n	8000cc6 <__udivmoddi4+0x282>
 8000cf0:	462b      	mov	r3, r5
 8000cf2:	e794      	b.n	8000c1e <__udivmoddi4+0x1da>
 8000cf4:	4640      	mov	r0, r8
 8000cf6:	e7d1      	b.n	8000c9c <__udivmoddi4+0x258>
 8000cf8:	46d0      	mov	r8, sl
 8000cfa:	e77b      	b.n	8000bf4 <__udivmoddi4+0x1b0>
 8000cfc:	3d02      	subs	r5, #2
 8000cfe:	4462      	add	r2, ip
 8000d00:	e732      	b.n	8000b68 <__udivmoddi4+0x124>
 8000d02:	4608      	mov	r0, r1
 8000d04:	e70a      	b.n	8000b1c <__udivmoddi4+0xd8>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	e742      	b.n	8000b92 <__udivmoddi4+0x14e>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <decimal_to_binary>:
/* USER CODE BEGIN 0 */
//LCD5110_display lcd1; //Define LCD_DISPLAY

//convert decimal to bin to control lamp
void decimal_to_binary(int number, int *binary_value)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	int temp = number;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 4; i++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	e012      	b.n	8000d4a <decimal_to_binary+0x3a>
	{
		binary_value[i] = temp % 2;
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	441a      	add	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	bfb8      	it	lt
 8000d36:	425b      	neglt	r3, r3
 8000d38:	6013      	str	r3, [r2, #0]
		temp = temp / 2;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	0fda      	lsrs	r2, r3, #31
 8000d3e:	4413      	add	r3, r2
 8000d40:	105b      	asrs	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 4; i++)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	3301      	adds	r3, #1
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	dde9      	ble.n	8000d24 <decimal_to_binary+0x14>
	}
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <decToBcd>:
//***********************DS3231-RTC MODULE***********************
#define DS3231_ADDRESS 0xD0 //define DS3231

// Convert normal decimal numbers to binary coded decimal
uint8_t decToBcd(int val)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <decToBcd+0x48>)
 8000d6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d70:	1092      	asrs	r2, r2, #2
 8000d72:	17db      	asrs	r3, r3, #31
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	011b      	lsls	r3, r3, #4
 8000d7a:	b2d8      	uxtb	r0, r3
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <decToBcd+0x48>)
 8000d80:	fb83 1302 	smull	r1, r3, r3, r2
 8000d84:	1099      	asrs	r1, r3, #2
 8000d86:	17d3      	asrs	r3, r2, #31
 8000d88:	1ac9      	subs	r1, r1, r3
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	440b      	add	r3, r1
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	1ad1      	subs	r1, r2, r3
 8000d94:	b2cb      	uxtb	r3, r1
 8000d96:	4403      	add	r3, r0
 8000d98:	b2db      	uxtb	r3, r3
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	66666667 	.word	0x66666667

08000dac <bcdToDec>:


// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	091b      	lsrs	r3, r3, #4
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	4413      	add	r3, r2
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <Set_Time>:
}	TIME;
TIME time;


void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af04      	add	r7, sp, #16
 8000de2:	4604      	mov	r4, r0
 8000de4:	4608      	mov	r0, r1
 8000de6:	4611      	mov	r1, r2
 8000de8:	461a      	mov	r2, r3
 8000dea:	4623      	mov	r3, r4
 8000dec:	71fb      	strb	r3, [r7, #7]
 8000dee:	4603      	mov	r3, r0
 8000df0:	71bb      	strb	r3, [r7, #6]
 8000df2:	460b      	mov	r3, r1
 8000df4:	717b      	strb	r3, [r7, #5]
 8000df6:	4613      	mov	r3, r2
 8000df8:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ffaf 	bl	8000d60 <decToBcd>
 8000e02:	4603      	mov	r3, r0
 8000e04:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 8000e06:	79bb      	ldrb	r3, [r7, #6]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ffa9 	bl	8000d60 <decToBcd>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 8000e12:	797b      	ldrb	r3, [r7, #5]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ffa3 	bl	8000d60 <decToBcd>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(dow);
 8000e1e:	793b      	ldrb	r3, [r7, #4]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff9d 	bl	8000d60 <decToBcd>
 8000e26:	4603      	mov	r3, r0
 8000e28:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(dom);
 8000e2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff96 	bl	8000d60 <decToBcd>
 8000e34:	4603      	mov	r3, r0
 8000e36:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 8000e38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff8f 	bl	8000d60 <decToBcd>
 8000e42:	4603      	mov	r3, r0
 8000e44:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 8000e46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff88 	bl	8000d60 <decToBcd>
 8000e50:	4603      	mov	r3, r0
 8000e52:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c3, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 8000e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e58:	9302      	str	r3, [sp, #8]
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	2200      	movs	r2, #0
 8000e68:	21d0      	movs	r1, #208	; 0xd0
 8000e6a:	4803      	ldr	r0, [pc, #12]	; (8000e78 <Set_Time+0x9c>)
 8000e6c:	f004 fa1e 	bl	80052ac <HAL_I2C_Mem_Write>
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd90      	pop	{r4, r7, pc}
 8000e78:	20000110 	.word	0x20000110

08000e7c <Get_Time>:

void Get_Time (void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c3, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	9302      	str	r3, [sp, #8]
 8000e88:	2307      	movs	r3, #7
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2301      	movs	r3, #1
 8000e92:	2200      	movs	r2, #0
 8000e94:	21d0      	movs	r1, #208	; 0xd0
 8000e96:	481f      	ldr	r0, [pc, #124]	; (8000f14 <Get_Time+0x98>)
 8000e98:	f004 fb02 	bl	80054a0 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8000e9c:	783b      	ldrb	r3, [r7, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff84 	bl	8000dac <bcdToDec>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <Get_Time+0x9c>)
 8000eaa:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000eac:	787b      	ldrb	r3, [r7, #1]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ff7c 	bl	8000dac <bcdToDec>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <Get_Time+0x9c>)
 8000eba:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000ebc:	78bb      	ldrb	r3, [r7, #2]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff74 	bl	8000dac <bcdToDec>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <Get_Time+0x9c>)
 8000eca:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff6c 	bl	8000dac <bcdToDec>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <Get_Time+0x9c>)
 8000eda:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8000edc:	793b      	ldrb	r3, [r7, #4]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff64 	bl	8000dac <bcdToDec>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <Get_Time+0x9c>)
 8000eea:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8000eec:	797b      	ldrb	r3, [r7, #5]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff5c 	bl	8000dac <bcdToDec>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <Get_Time+0x9c>)
 8000efa:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff54 	bl	8000dac <bcdToDec>
 8000f04:	4603      	mov	r3, r0
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <Get_Time+0x9c>)
 8000f0a:	719a      	strb	r2, [r3, #6]
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000110 	.word	0x20000110
 8000f18:	200003a4 	.word	0x200003a4

08000f1c <shift_out>:
  0x38,// L - 10
  0x76 // H - 11
};

void shift_out(GPIO_TypeDef* port, int CLK_PIN,
    int DIO_PIN, bool dir, uint8_t command){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 8; i++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	e039      	b.n	8000fa4 <shift_out+0x88>
    {
        bool output = false;
 8000f30:	2300      	movs	r3, #0
 8000f32:	74fb      	strb	r3, [r7, #19]
        if (dir)
 8000f34:	78fb      	ldrb	r3, [r7, #3]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d00e      	beq.n	8000f58 <shift_out+0x3c>
        {
            output = command & 0b10000000;
 8000f3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bf14      	ite	ne
 8000f46:	2301      	movne	r3, #1
 8000f48:	2300      	moveq	r3, #0
 8000f4a:	74fb      	strb	r3, [r7, #19]
            command = command << 1;
 8000f4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	f887 3020 	strb.w	r3, [r7, #32]
 8000f56:	e00d      	b.n	8000f74 <shift_out+0x58>
        }
        else
        {
            output = command & 0b00000001;
 8000f58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	bf14      	ite	ne
 8000f64:	2301      	movne	r3, #1
 8000f66:	2300      	moveq	r3, #0
 8000f68:	74fb      	strb	r3, [r7, #19]
            command = command >> 1;
 8000f6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f6e:	085b      	lsrs	r3, r3, #1
 8000f70:	f887 3020 	strb.w	r3, [r7, #32]
        }
        HAL_GPIO_WritePin(port, DIO_PIN, output);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	7cfa      	ldrb	r2, [r7, #19]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f001 feeb 	bl	8002d58 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(port, CLK_PIN, 1);
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	2201      	movs	r2, #1
 8000f88:	4619      	mov	r1, r3
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f001 fee4 	bl	8002d58 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(port, CLK_PIN, 0);
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	2200      	movs	r2, #0
 8000f96:	4619      	mov	r1, r3
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f001 fedd 	bl	8002d58 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	2b07      	cmp	r3, #7
 8000fa8:	ddc2      	ble.n	8000f30 <shift_out+0x14>
    }
  }
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <send_command>:


  void send_command(uint8_t bt){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(port, STB_PIN, 0);
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <send_command+0x4c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a10      	ldr	r2, [pc, #64]	; (8001004 <send_command+0x50>)
 8000fc4:	6812      	ldr	r2, [r2, #0]
 8000fc6:	b291      	uxth	r1, r2
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 fec4 	bl	8002d58 <HAL_GPIO_WritePin>
    shift_out(port, CLK_PIN,  DIO_PIN, false, bt);
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <send_command+0x4c>)
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <send_command+0x54>)
 8000fd6:	6819      	ldr	r1, [r3, #0]
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <send_command+0x58>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f7ff ff9b 	bl	8000f1c <shift_out>
    HAL_GPIO_WritePin(port, STB_PIN, 1);
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <send_command+0x4c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a06      	ldr	r2, [pc, #24]	; (8001004 <send_command+0x50>)
 8000fec:	6812      	ldr	r2, [r2, #0]
 8000fee:	b291      	uxth	r1, r2
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 feb0 	bl	8002d58 <HAL_GPIO_WritePin>
  }
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000014 	.word	0x20000014
 8001004:	20000020 	.word	0x20000020
 8001008:	20000018 	.word	0x20000018
 800100c:	2000001c 	.word	0x2000001c

08001010 <send_args>:

  void send_args(uint8_t bt){
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af02      	add	r7, sp, #8
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
    shift_out(port, CLK_PIN,  DIO_PIN, false, bt);
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <send_args+0x28>)
 800101c:	6818      	ldr	r0, [r3, #0]
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <send_args+0x2c>)
 8001020:	6819      	ldr	r1, [r3, #0]
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <send_args+0x30>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2300      	movs	r3, #0
 800102c:	f7ff ff76 	bl	8000f1c <shift_out>
  }
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000014 	.word	0x20000014
 800103c:	20000018 	.word	0x20000018
 8001040:	2000001c 	.word	0x2000001c

08001044 <reset_TM>:

  void reset_TM(){
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
    send_command(0x40);
 800104a:	2040      	movs	r0, #64	; 0x40
 800104c:	f7ff ffb2 	bl	8000fb4 <send_command>
    HAL_GPIO_WritePin(port, STB_PIN, 0);
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <reset_TM+0x58>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <reset_TM+0x5c>)
 8001056:	6812      	ldr	r2, [r2, #0]
 8001058:	b291      	uxth	r1, r2
 800105a:	2200      	movs	r2, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fe7b 	bl	8002d58 <HAL_GPIO_WritePin>
    send_args(0xc0);
 8001062:	20c0      	movs	r0, #192	; 0xc0
 8001064:	f7ff ffd4 	bl	8001010 <send_args>
    for (uint8_t i = 0; i < 16; i++){
 8001068:	2300      	movs	r3, #0
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	e005      	b.n	800107a <reset_TM+0x36>
         send_args(0x00);
 800106e:	2000      	movs	r0, #0
 8001070:	f7ff ffce 	bl	8001010 <send_args>
    for (uint8_t i = 0; i < 16; i++){
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	3301      	adds	r3, #1
 8001078:	71fb      	strb	r3, [r7, #7]
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d9f6      	bls.n	800106e <reset_TM+0x2a>
       }
    HAL_GPIO_WritePin(port, STB_PIN, 1);
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <reset_TM+0x58>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <reset_TM+0x5c>)
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	b291      	uxth	r1, r2
 800108a:	2201      	movs	r2, #1
 800108c:	4618      	mov	r0, r3
 800108e:	f001 fe63 	bl	8002d58 <HAL_GPIO_WritePin>
  }
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000014 	.word	0x20000014
 80010a0:	20000020 	.word	0x20000020

080010a4 <print_temp>:
		  send_args(SegmCodes[1]);
	  }
	  HAL_GPIO_WritePin(port, STB_PIN, 1);
  }

  void print_temp(int temp){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
      send_command(0x40);
 80010ac:	2040      	movs	r0, #64	; 0x40
 80010ae:	f7ff ff81 	bl	8000fb4 <send_command>
      HAL_GPIO_WritePin(port, STB_Pin, 0);
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <print_temp+0x94>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2200      	movs	r2, #0
 80010b8:	2101      	movs	r1, #1
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 fe4c 	bl	8002d58 <HAL_GPIO_WritePin>
      send_args(0xc0);
 80010c0:	20c0      	movs	r0, #192	; 0xc0
 80010c2:	f7ff ffa5 	bl	8001010 <send_args>
      send_args(SegmCodes[temp/10]);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a1c      	ldr	r2, [pc, #112]	; (800113c <print_temp+0x98>)
 80010ca:	fb82 1203 	smull	r1, r2, r2, r3
 80010ce:	1092      	asrs	r2, r2, #2
 80010d0:	17db      	asrs	r3, r3, #31
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	4a1a      	ldr	r2, [pc, #104]	; (8001140 <print_temp+0x9c>)
 80010d6:	5cd3      	ldrb	r3, [r2, r3]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff99 	bl	8001010 <send_args>
      send_args(0x00);
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff ff96 	bl	8001010 <send_args>
      send_args(SegmCodes[temp%10]);
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <print_temp+0x98>)
 80010e8:	fb83 2301 	smull	r2, r3, r3, r1
 80010ec:	109a      	asrs	r2, r3, #2
 80010ee:	17cb      	asrs	r3, r1, #31
 80010f0:	1ad2      	subs	r2, r2, r3
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	1aca      	subs	r2, r1, r3
 80010fc:	4b10      	ldr	r3, [pc, #64]	; (8001140 <print_temp+0x9c>)
 80010fe:	5c9b      	ldrb	r3, [r3, r2]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff85 	bl	8001010 <send_args>
      send_args(0x00);
 8001106:	2000      	movs	r0, #0
 8001108:	f7ff ff82 	bl	8001010 <send_args>
      send_args(99);
 800110c:	2063      	movs	r0, #99	; 0x63
 800110e:	f7ff ff7f 	bl	8001010 <send_args>
      send_args(0x00);
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff ff7c 	bl	8001010 <send_args>
      send_args(SegmCodes[0x0C]);
 8001118:	2339      	movs	r3, #57	; 0x39
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff78 	bl	8001010 <send_args>
      HAL_GPIO_WritePin(port, STB_Pin, 1);
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <print_temp+0x94>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2201      	movs	r2, #1
 8001126:	2101      	movs	r1, #1
 8001128:	4618      	mov	r0, r3
 800112a:	f001 fe15 	bl	8002d58 <HAL_GPIO_WritePin>
    }
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000014 	.word	0x20000014
 800113c:	66666667 	.word	0x66666667
 8001140:	0800ba64 	.word	0x0800ba64

08001144 <print_hum>:

  void print_hum(int hum){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	  	send_command(0x40);
 800114c:	2040      	movs	r0, #64	; 0x40
 800114e:	f7ff ff31 	bl	8000fb4 <send_command>
		HAL_GPIO_WritePin(port, STB_Pin, 0);
 8001152:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <print_hum+0x88>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2200      	movs	r2, #0
 8001158:	2101      	movs	r1, #1
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fdfc 	bl	8002d58 <HAL_GPIO_WritePin>
		send_args(0xca);
 8001160:	20ca      	movs	r0, #202	; 0xca
 8001162:	f7ff ff55 	bl	8001010 <send_args>
		send_args(SegmCodes[hum/10]);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <print_hum+0x8c>)
 800116a:	fb82 1203 	smull	r1, r2, r2, r3
 800116e:	1092      	asrs	r2, r2, #2
 8001170:	17db      	asrs	r3, r3, #31
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <print_hum+0x90>)
 8001176:	5cd3      	ldrb	r3, [r2, r3]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff49 	bl	8001010 <send_args>
		send_args(0x00);
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff ff46 	bl	8001010 <send_args>
		send_args(SegmCodes[hum%10]);
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <print_hum+0x8c>)
 8001188:	fb83 2301 	smull	r2, r3, r3, r1
 800118c:	109a      	asrs	r2, r3, #2
 800118e:	17cb      	asrs	r3, r1, #31
 8001190:	1ad2      	subs	r2, r2, r3
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	1aca      	subs	r2, r1, r3
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <print_hum+0x90>)
 800119e:	5c9b      	ldrb	r3, [r3, r2]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff35 	bl	8001010 <send_args>
		send_args(0x00);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f7ff ff32 	bl	8001010 <send_args>
		send_args(SegmCodes[0x11]);
 80011ac:	2376      	movs	r3, #118	; 0x76
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff2e 	bl	8001010 <send_args>
		HAL_GPIO_WritePin(port, STB_Pin, 1);
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <print_hum+0x88>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2201      	movs	r2, #1
 80011ba:	2101      	movs	r1, #1
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 fdcb 	bl	8002d58 <HAL_GPIO_WritePin>
      }
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000014 	.word	0x20000014
 80011d0:	66666667 	.word	0x66666667
 80011d4:	0800ba64 	.word	0x0800ba64

080011d8 <delay>:
  float Humidity = 0;
  uint8_t Presence = 0;
  int check_temp = 0;

  void delay (uint16_t time)
  {
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	80fb      	strh	r3, [r7, #6]
  	/* change your code here for the delay in microseconds */
  	__HAL_TIM_SET_COUNTER(&htim11, 0);
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <delay+0x30>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2200      	movs	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24
  	while ((__HAL_TIM_GET_COUNTER(&htim11))<time);
 80011ea:	bf00      	nop
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <delay+0x30>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d3f9      	bcc.n	80011ec <delay+0x14>
  }
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000314 	.word	0x20000314

0800120c <Set_Pin_Output>:

  void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
  {
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
  	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  	GPIO_InitStruct.Pin = GPIO_Pin;
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]
  	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	4619      	mov	r1, r3
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f001 fbf0 	bl	8002a20 <HAL_GPIO_Init>
  }
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <Set_Pin_Input>:

  void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
  {
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]
  	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  	GPIO_InitStruct.Pin = GPIO_Pin;
 8001264:	887b      	ldrh	r3, [r7, #2]
 8001266:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126c:	2301      	movs	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
  	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4619      	mov	r1, r3
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f001 fbd2 	bl	8002a20 <HAL_GPIO_Init>
  }
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <DHT22_Start>:

  void DHT22_Start (void)
  {
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  	Set_Pin_Output(DHT22_PORT, DHT22_PIN); // set the pin as output
 8001288:	2102      	movs	r1, #2
 800128a:	480d      	ldr	r0, [pc, #52]	; (80012c0 <DHT22_Start+0x3c>)
 800128c:	f7ff ffbe 	bl	800120c <Set_Pin_Output>
  	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8001290:	2200      	movs	r2, #0
 8001292:	2102      	movs	r1, #2
 8001294:	480a      	ldr	r0, [pc, #40]	; (80012c0 <DHT22_Start+0x3c>)
 8001296:	f001 fd5f 	bl	8002d58 <HAL_GPIO_WritePin>
  	delay(1200);   // wait for > 1ms
 800129a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800129e:	f7ff ff9b 	bl	80011d8 <delay>

  	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 80012a2:	2201      	movs	r2, #1
 80012a4:	2102      	movs	r1, #2
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <DHT22_Start+0x3c>)
 80012a8:	f001 fd56 	bl	8002d58 <HAL_GPIO_WritePin>
  	delay (20);   // wait for 30us
 80012ac:	2014      	movs	r0, #20
 80012ae:	f7ff ff93 	bl	80011d8 <delay>

  	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 80012b2:	2102      	movs	r1, #2
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <DHT22_Start+0x3c>)
 80012b6:	f7ff ffc7 	bl	8001248 <Set_Pin_Input>
  }
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40020000 	.word	0x40020000

080012c4 <DHT22_Check_Response>:

  uint8_t DHT22_Check_Response (void)
  {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
  	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 80012ca:	2102      	movs	r1, #2
 80012cc:	4817      	ldr	r0, [pc, #92]	; (800132c <DHT22_Check_Response+0x68>)
 80012ce:	f7ff ffbb 	bl	8001248 <Set_Pin_Input>
  	uint8_t Response = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	71fb      	strb	r3, [r7, #7]
  	delay (40);  // wait for 40us
 80012d6:	2028      	movs	r0, #40	; 0x28
 80012d8:	f7ff ff7e 	bl	80011d8 <delay>
  	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) // if the pin is low
 80012dc:	2102      	movs	r1, #2
 80012de:	4813      	ldr	r0, [pc, #76]	; (800132c <DHT22_Check_Response+0x68>)
 80012e0:	f001 fd22 	bl	8002d28 <HAL_GPIO_ReadPin>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d114      	bne.n	8001314 <DHT22_Check_Response+0x50>
  	{
  		delay (80);   // wait for 80us
 80012ea:	2050      	movs	r0, #80	; 0x50
 80012ec:	f7ff ff74 	bl	80011d8 <delay>

  		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;  // if the pin is high, response is ok
 80012f0:	2102      	movs	r1, #2
 80012f2:	480e      	ldr	r0, [pc, #56]	; (800132c <DHT22_Check_Response+0x68>)
 80012f4:	f001 fd18 	bl	8002d28 <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d002      	beq.n	8001304 <DHT22_Check_Response+0x40>
 80012fe:	2301      	movs	r3, #1
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	e007      	b.n	8001314 <DHT22_Check_Response+0x50>
  		else Response = -1;
 8001304:	23ff      	movs	r3, #255	; 0xff
 8001306:	71fb      	strb	r3, [r7, #7]
  	}

  	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))){
 8001308:	e004      	b.n	8001314 <DHT22_Check_Response+0x50>
  	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800130a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130e:	4808      	ldr	r0, [pc, #32]	; (8001330 <DHT22_Check_Response+0x6c>)
 8001310:	f001 fd3b 	bl	8002d8a <HAL_GPIO_TogglePin>
  	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))){
 8001314:	2102      	movs	r1, #2
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <DHT22_Check_Response+0x68>)
 8001318:	f001 fd06 	bl	8002d28 <HAL_GPIO_ReadPin>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f3      	bne.n	800130a <DHT22_Check_Response+0x46>
  	}// wait for the pin to go low
  	return Response;
 8001322:	79fb      	ldrb	r3, [r7, #7]
  }
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40020000 	.word	0x40020000
 8001330:	40020c00 	.word	0x40020c00

08001334 <DHT22_Read>:

  uint8_t DHT22_Read (void)
  {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
  	uint8_t i,j;
  	for (j=0;j<8;j++)
 800133a:	2300      	movs	r3, #0
 800133c:	71bb      	strb	r3, [r7, #6]
 800133e:	e032      	b.n	80013a6 <DHT22_Read+0x72>
  	{
  		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));
 8001340:	bf00      	nop
 8001342:	2102      	movs	r1, #2
 8001344:	481c      	ldr	r0, [pc, #112]	; (80013b8 <DHT22_Read+0x84>)
 8001346:	f001 fcef 	bl	8002d28 <HAL_GPIO_ReadPin>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f8      	beq.n	8001342 <DHT22_Read+0xe>
  		// wait for the pin to go high
  		delay (40);   // wait for 40 us
 8001350:	2028      	movs	r0, #40	; 0x28
 8001352:	f7ff ff41 	bl	80011d8 <delay>

  		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8001356:	2102      	movs	r1, #2
 8001358:	4817      	ldr	r0, [pc, #92]	; (80013b8 <DHT22_Read+0x84>)
 800135a:	f001 fce5 	bl	8002d28 <HAL_GPIO_ReadPin>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10e      	bne.n	8001382 <DHT22_Read+0x4e>
  		{
  			i&= ~(1<<(7-j));   // write 0
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2201      	movs	r2, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	b25b      	sxtb	r3, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	b25a      	sxtb	r2, r3
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	4013      	ands	r3, r2
 800137c:	b25b      	sxtb	r3, r3
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	e00b      	b.n	800139a <DHT22_Read+0x66>
  		}
  		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	f1c3 0307 	rsb	r3, r3, #7
 8001388:	2201      	movs	r2, #1
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	b25a      	sxtb	r2, r3
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	4313      	orrs	r3, r2
 8001396:	b25b      	sxtb	r3, r3
 8001398:	71fb      	strb	r3, [r7, #7]
  		delay (40);
 800139a:	2028      	movs	r0, #40	; 0x28
 800139c:	f7ff ff1c 	bl	80011d8 <delay>
  	for (j=0;j<8;j++)
 80013a0:	79bb      	ldrb	r3, [r7, #6]
 80013a2:	3301      	adds	r3, #1
 80013a4:	71bb      	strb	r3, [r7, #6]
 80013a6:	79bb      	ldrb	r3, [r7, #6]
 80013a8:	2b07      	cmp	r3, #7
 80013aa:	d9c9      	bls.n	8001340 <DHT22_Read+0xc>
//  		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))){
//  			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);// wait for the pin to go low
//  		}
  	}

  	return i;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
  }
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40020000 	.word	0x40020000

080013bc <TH_read_write>:

  void TH_read_write(){
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  	  DHT22_Start();
 80013c0:	f7ff ff60 	bl	8001284 <DHT22_Start>
  	  Presence = DHT22_Check_Response();
 80013c4:	f7ff ff7e 	bl	80012c4 <DHT22_Check_Response>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b2f      	ldr	r3, [pc, #188]	; (800148c <TH_read_write+0xd0>)
 80013ce:	701a      	strb	r2, [r3, #0]
  	  Rh_byte1 = DHT22_Read ();
 80013d0:	f7ff ffb0 	bl	8001334 <DHT22_Read>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <TH_read_write+0xd4>)
 80013da:	701a      	strb	r2, [r3, #0]
      Rh_byte2 = DHT22_Read ();
 80013dc:	f7ff ffaa 	bl	8001334 <DHT22_Read>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <TH_read_write+0xd8>)
 80013e6:	701a      	strb	r2, [r3, #0]
  	  Temp_byte1 = DHT22_Read ();
 80013e8:	f7ff ffa4 	bl	8001334 <DHT22_Read>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <TH_read_write+0xdc>)
 80013f2:	701a      	strb	r2, [r3, #0]
  	  Temp_byte2 = DHT22_Read ();
 80013f4:	f7ff ff9e 	bl	8001334 <DHT22_Read>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <TH_read_write+0xe0>)
 80013fe:	701a      	strb	r2, [r3, #0]
  	  SUM = DHT22_Read();
 8001400:	f7ff ff98 	bl	8001334 <DHT22_Read>
 8001404:	4603      	mov	r3, r0
 8001406:	b29a      	uxth	r2, r3
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <TH_read_write+0xe4>)
 800140a:	801a      	strh	r2, [r3, #0]

  	  TEMP = ((Temp_byte1<<8)|Temp_byte2);
 800140c:	4b22      	ldr	r3, [pc, #136]	; (8001498 <TH_read_write+0xdc>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	b21a      	sxth	r2, r3
 8001414:	4b21      	ldr	r3, [pc, #132]	; (800149c <TH_read_write+0xe0>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b21b      	sxth	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b21b      	sxth	r3, r3
 800141e:	b29a      	uxth	r2, r3
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <TH_read_write+0xe8>)
 8001422:	801a      	strh	r2, [r3, #0]
  	  RH = ((Rh_byte1<<8)|Rh_byte2);
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <TH_read_write+0xd4>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	b21a      	sxth	r2, r3
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <TH_read_write+0xd8>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b21b      	sxth	r3, r3
 8001432:	4313      	orrs	r3, r2
 8001434:	b21b      	sxth	r3, r3
 8001436:	b29a      	uxth	r2, r3
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <TH_read_write+0xec>)
 800143a:	801a      	strh	r2, [r3, #0]

  	  Temperature = (float) (TEMP/10.0);
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <TH_read_write+0xe8>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f81b 	bl	800047c <__aeabi_i2d>
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <TH_read_write+0xf0>)
 800144c:	f7ff f9aa 	bl	80007a4 <__aeabi_ddiv>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fa8c 	bl	8000974 <__aeabi_d2f>
 800145c:	4603      	mov	r3, r0
 800145e:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <TH_read_write+0xf4>)
 8001460:	6013      	str	r3, [r2, #0]
  	  Humidity = (float) (RH/10.0);
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <TH_read_write+0xec>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f808 	bl	800047c <__aeabi_i2d>
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <TH_read_write+0xf0>)
 8001472:	f7ff f997 	bl	80007a4 <__aeabi_ddiv>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	f7ff fa79 	bl	8000974 <__aeabi_d2f>
 8001482:	4603      	mov	r3, r0
 8001484:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <TH_read_write+0xf8>)
 8001486:	6013      	str	r3, [r2, #0]
  }
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200003c0 	.word	0x200003c0
 8001490:	200003ab 	.word	0x200003ab
 8001494:	200003ac 	.word	0x200003ac
 8001498:	200003ad 	.word	0x200003ad
 800149c:	200003ae 	.word	0x200003ae
 80014a0:	200003b0 	.word	0x200003b0
 80014a4:	200003b4 	.word	0x200003b4
 80014a8:	200003b2 	.word	0x200003b2
 80014ac:	40240000 	.word	0x40240000
 80014b0:	200003b8 	.word	0x200003b8
 80014b4:	200003bc 	.word	0x200003bc

080014b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	; 0x30
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014be:	f001 f907 	bl	80026d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c2:	f000 f961 	bl	8001788 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014c6:	f000 f9c7 	bl	8001858 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ca:	f000 fbd1 	bl	8001c70 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014ce:	f000 f9e3 	bl	8001898 <MX_I2C1_Init>
  MX_I2S2_Init();
 80014d2:	f000 fa3d 	bl	8001950 <MX_I2S2_Init>
  MX_I2S3_Init();
 80014d6:	f000 fa69 	bl	80019ac <MX_I2S3_Init>
  MX_USB_HOST_Init();
 80014da:	f009 fe5f 	bl	800b19c <MX_USB_HOST_Init>
  MX_I2C3_Init();
 80014de:	f000 fa09 	bl	80018f4 <MX_I2C3_Init>
  MX_TIM10_Init();
 80014e2:	f000 fb7d 	bl	8001be0 <MX_TIM10_Init>
  MX_TIM1_Init();
 80014e6:	f000 fa91 	bl	8001a0c <MX_TIM1_Init>
  MX_TIM2_Init();
 80014ea:	f000 fadf 	bl	8001aac <MX_TIM2_Init>
  MX_TIM11_Init();
 80014ee:	f000 fb9b 	bl	8001c28 <MX_TIM11_Init>
  MX_TIM4_Init();
 80014f2:	f000 fb27 	bl	8001b44 <MX_TIM4_Init>


  //START DISPLAY TM1638


  HAL_TIM_Base_Start(&htim11);
 80014f6:	4895      	ldr	r0, [pc, #596]	; (800174c <main+0x294>)
 80014f8:	f006 f87e 	bl	80075f8 <HAL_TIM_Base_Start>

  reset_TM();
 80014fc:	f7ff fda2 	bl	8001044 <reset_TM>
//  Set_Time(10, 11, 17, 4, 21, 12, 23);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 8001500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001504:	f001 f956 	bl	80027b4 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim2);
 8001508:	4891      	ldr	r0, [pc, #580]	; (8001750 <main+0x298>)
 800150a:	f006 f8cf 	bl	80076ac <HAL_TIM_Base_Start_IT>
  while (1)
  {

	if (check_temp % 500 == 0){
 800150e:	4b91      	ldr	r3, [pc, #580]	; (8001754 <main+0x29c>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b91      	ldr	r3, [pc, #580]	; (8001758 <main+0x2a0>)
 8001514:	fb83 1302 	smull	r1, r3, r3, r2
 8001518:	1159      	asrs	r1, r3, #5
 800151a:	17d3      	asrs	r3, r2, #31
 800151c:	1acb      	subs	r3, r1, r3
 800151e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d104      	bne.n	8001536 <main+0x7e>
	HAL_Delay(1);
 800152c:	2001      	movs	r0, #1
 800152e:	f001 f941 	bl	80027b4 <HAL_Delay>
	TH_read_write();
 8001532:	f7ff ff43 	bl	80013bc <TH_read_write>
	}
	  if (state == WORKING)
 8001536:	4b89      	ldr	r3, [pc, #548]	; (800175c <main+0x2a4>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b01      	cmp	r3, #1
 800153e:	d176      	bne.n	800162e <main+0x176>
	  {
		  Get_Time();
 8001540:	f7ff fc9c 	bl	8000e7c <Get_Time>
		  int time_units[] = {time.hour / 10, time.hour % 10, time.minutes / 10, time.minutes % 10}; //take time from rtc module
 8001544:	4b86      	ldr	r3, [pc, #536]	; (8001760 <main+0x2a8>)
 8001546:	789b      	ldrb	r3, [r3, #2]
 8001548:	4a86      	ldr	r2, [pc, #536]	; (8001764 <main+0x2ac>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	08db      	lsrs	r3, r3, #3
 8001550:	b2db      	uxtb	r3, r3
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	4b82      	ldr	r3, [pc, #520]	; (8001760 <main+0x2a8>)
 8001556:	789a      	ldrb	r2, [r3, #2]
 8001558:	4b82      	ldr	r3, [pc, #520]	; (8001764 <main+0x2ac>)
 800155a:	fba3 1302 	umull	r1, r3, r3, r2
 800155e:	08d9      	lsrs	r1, r3, #3
 8001560:	460b      	mov	r3, r1
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	4b7c      	ldr	r3, [pc, #496]	; (8001760 <main+0x2a8>)
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	4a7c      	ldr	r2, [pc, #496]	; (8001764 <main+0x2ac>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	08db      	lsrs	r3, r3, #3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	61bb      	str	r3, [r7, #24]
 800157e:	4b78      	ldr	r3, [pc, #480]	; (8001760 <main+0x2a8>)
 8001580:	785a      	ldrb	r2, [r3, #1]
 8001582:	4b78      	ldr	r3, [pc, #480]	; (8001764 <main+0x2ac>)
 8001584:	fba3 1302 	umull	r1, r3, r3, r2
 8001588:	08d9      	lsrs	r1, r3, #3
 800158a:	460b      	mov	r3, r1
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	61fb      	str	r3, [r7, #28]
		  for (int i = 0; i < 4; i++)
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800159c:	e043      	b.n	8001626 <main+0x16e>
		  {
			  decimal_to_binary(time_units[i], controls[i]);
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	3330      	adds	r3, #48	; 0x30
 80015a4:	443b      	add	r3, r7
 80015a6:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	496e      	ldr	r1, [pc, #440]	; (8001768 <main+0x2b0>)
 80015b0:	440b      	add	r3, r1
 80015b2:	4619      	mov	r1, r3
 80015b4:	4610      	mov	r0, r2
 80015b6:	f7ff fbab 	bl	8000d10 <decimal_to_binary>
			  for(int j = 0; j < 4; j++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80015be:	e012      	b.n	80015e6 <main+0x12e>
			  {
				  HAL_GPIO_WritePin(GPIOE, pins_controls[j], controls[i][j]);
 80015c0:	4a6a      	ldr	r2, [pc, #424]	; (800176c <main+0x2b4>)
 80015c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80015c8:	4867      	ldr	r0, [pc, #412]	; (8001768 <main+0x2b0>)
 80015ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015cc:	009a      	lsls	r2, r3, #2
 80015ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d0:	4413      	add	r3, r2
 80015d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	4865      	ldr	r0, [pc, #404]	; (8001770 <main+0x2b8>)
 80015dc:	f001 fbbc 	bl	8002d58 <HAL_GPIO_WritePin>
			  for(int j = 0; j < 4; j++)
 80015e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e2:	3301      	adds	r3, #1
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80015e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	dde9      	ble.n	80015c0 <main+0x108>
			  }
//			  delay(500);
			  HAL_GPIO_WritePin(GPIOD, pins_lamps[i], 1);
 80015ec:	4a61      	ldr	r2, [pc, #388]	; (8001774 <main+0x2bc>)
 80015ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015f4:	2201      	movs	r2, #1
 80015f6:	4619      	mov	r1, r3
 80015f8:	485f      	ldr	r0, [pc, #380]	; (8001778 <main+0x2c0>)
 80015fa:	f001 fbad 	bl	8002d58 <HAL_GPIO_WritePin>
			  delay(4200);
 80015fe:	f241 0068 	movw	r0, #4200	; 0x1068
 8001602:	f7ff fde9 	bl	80011d8 <delay>
			  HAL_GPIO_WritePin(GPIOD, pins_lamps[i], 0);
 8001606:	4a5b      	ldr	r2, [pc, #364]	; (8001774 <main+0x2bc>)
 8001608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800160e:	2200      	movs	r2, #0
 8001610:	4619      	mov	r1, r3
 8001612:	4859      	ldr	r0, [pc, #356]	; (8001778 <main+0x2c0>)
 8001614:	f001 fba0 	bl	8002d58 <HAL_GPIO_WritePin>
			  delay(600);
 8001618:	f44f 7016 	mov.w	r0, #600	; 0x258
 800161c:	f7ff fddc 	bl	80011d8 <delay>
		  for (int i = 0; i < 4; i++)
 8001620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001622:	3301      	adds	r3, #1
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001628:	2b03      	cmp	r3, #3
 800162a:	ddb8      	ble.n	800159e <main+0xe6>
 800162c:	e077      	b.n	800171e <main+0x266>
		  }

	  }
	  else
	  {
		  int time_units[] = {HOUR / 10, HOUR % 10, MINUTE / 10, MINUTE % 10}; //take time from setting
 800162e:	4b53      	ldr	r3, [pc, #332]	; (800177c <main+0x2c4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a53      	ldr	r2, [pc, #332]	; (8001780 <main+0x2c8>)
 8001634:	fb82 1203 	smull	r1, r2, r2, r3
 8001638:	1092      	asrs	r2, r2, #2
 800163a:	17db      	asrs	r3, r3, #31
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	4b4e      	ldr	r3, [pc, #312]	; (800177c <main+0x2c4>)
 8001642:	6819      	ldr	r1, [r3, #0]
 8001644:	4b4e      	ldr	r3, [pc, #312]	; (8001780 <main+0x2c8>)
 8001646:	fb83 2301 	smull	r2, r3, r3, r1
 800164a:	109a      	asrs	r2, r3, #2
 800164c:	17cb      	asrs	r3, r1, #31
 800164e:	1ad2      	subs	r2, r2, r3
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	1aca      	subs	r2, r1, r3
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	4b49      	ldr	r3, [pc, #292]	; (8001784 <main+0x2cc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a47      	ldr	r2, [pc, #284]	; (8001780 <main+0x2c8>)
 8001662:	fb82 1203 	smull	r1, r2, r2, r3
 8001666:	1092      	asrs	r2, r2, #2
 8001668:	17db      	asrs	r3, r3, #31
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	4b45      	ldr	r3, [pc, #276]	; (8001784 <main+0x2cc>)
 8001670:	6819      	ldr	r1, [r3, #0]
 8001672:	4b43      	ldr	r3, [pc, #268]	; (8001780 <main+0x2c8>)
 8001674:	fb83 2301 	smull	r2, r3, r3, r1
 8001678:	109a      	asrs	r2, r3, #2
 800167a:	17cb      	asrs	r3, r1, #31
 800167c:	1ad2      	subs	r2, r2, r3
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	1aca      	subs	r2, r1, r3
 8001688:	60fa      	str	r2, [r7, #12]
		  for (int i = 0; i < 4; i++)
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
 800168e:	e043      	b.n	8001718 <main+0x260>
		  	  {
			  decimal_to_binary(time_units[i], controls[i]);
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	3330      	adds	r3, #48	; 0x30
 8001696:	443b      	add	r3, r7
 8001698:	f853 2c30 	ldr.w	r2, [r3, #-48]
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4931      	ldr	r1, [pc, #196]	; (8001768 <main+0x2b0>)
 80016a2:	440b      	add	r3, r1
 80016a4:	4619      	mov	r1, r3
 80016a6:	4610      	mov	r0, r2
 80016a8:	f7ff fb32 	bl	8000d10 <decimal_to_binary>
			  for(int j = 0; j < 4; j++)
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
 80016b0:	e012      	b.n	80016d8 <main+0x220>
			  	  {
				  HAL_GPIO_WritePin(GPIOE, pins_controls[j], controls[i][j]);
 80016b2:	4a2e      	ldr	r2, [pc, #184]	; (800176c <main+0x2b4>)
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80016ba:	482b      	ldr	r0, [pc, #172]	; (8001768 <main+0x2b0>)
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	009a      	lsls	r2, r3, #2
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	4413      	add	r3, r2
 80016c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	461a      	mov	r2, r3
 80016cc:	4828      	ldr	r0, [pc, #160]	; (8001770 <main+0x2b8>)
 80016ce:	f001 fb43 	bl	8002d58 <HAL_GPIO_WritePin>
			  for(int j = 0; j < 4; j++)
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	3301      	adds	r3, #1
 80016d6:	623b      	str	r3, [r7, #32]
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	dde9      	ble.n	80016b2 <main+0x1fa>
			  	  }
//			  delay(50);
			  HAL_GPIO_WritePin(GPIOD, pins_lamps[i], 1);
 80016de:	4a25      	ldr	r2, [pc, #148]	; (8001774 <main+0x2bc>)
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016e6:	2201      	movs	r2, #1
 80016e8:	4619      	mov	r1, r3
 80016ea:	4823      	ldr	r0, [pc, #140]	; (8001778 <main+0x2c0>)
 80016ec:	f001 fb34 	bl	8002d58 <HAL_GPIO_WritePin>
			  delay(5000);
 80016f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80016f4:	f7ff fd70 	bl	80011d8 <delay>
			  HAL_GPIO_WritePin(GPIOD, pins_lamps[i], 0);
 80016f8:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <main+0x2bc>)
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001700:	2200      	movs	r2, #0
 8001702:	4619      	mov	r1, r3
 8001704:	481c      	ldr	r0, [pc, #112]	; (8001778 <main+0x2c0>)
 8001706:	f001 fb27 	bl	8002d58 <HAL_GPIO_WritePin>
			  delay(600);
 800170a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800170e:	f7ff fd63 	bl	80011d8 <delay>
		  for (int i = 0; i < 4; i++)
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	3301      	adds	r3, #1
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	2b03      	cmp	r3, #3
 800171c:	ddb8      	ble.n	8001690 <main+0x1d8>
		  	  }
	  }
	  check_temp++;
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <main+0x29c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <main+0x29c>)
 8001726:	6013      	str	r3, [r2, #0]
	  check_temp = check_temp % 500;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <main+0x29c>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <main+0x2a0>)
 800172e:	fb83 1302 	smull	r1, r3, r3, r2
 8001732:	1159      	asrs	r1, r3, #5
 8001734:	17d3      	asrs	r3, r2, #31
 8001736:	1acb      	subs	r3, r1, r3
 8001738:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	4a04      	ldr	r2, [pc, #16]	; (8001754 <main+0x29c>)
 8001744:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001746:	f009 fd4f 	bl	800b1e8 <MX_USB_HOST_Process>
	if (check_temp % 500 == 0){
 800174a:	e6e0      	b.n	800150e <main+0x56>
 800174c:	20000314 	.word	0x20000314
 8001750:	2000023c 	.word	0x2000023c
 8001754:	200003c4 	.word	0x200003c4
 8001758:	10624dd3 	.word	0x10624dd3
 800175c:	20000011 	.word	0x20000011
 8001760:	200003a4 	.word	0x200003a4
 8001764:	cccccccd 	.word	0xcccccccd
 8001768:	2000035c 	.word	0x2000035c
 800176c:	20000008 	.word	0x20000008
 8001770:	40021000 	.word	0x40021000
 8001774:	20000000 	.word	0x20000000
 8001778:	40020c00 	.word	0x40020c00
 800177c:	200003a0 	.word	0x200003a0
 8001780:	66666667 	.word	0x66666667
 8001784:	2000039c 	.word	0x2000039c

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b094      	sub	sp, #80	; 0x50
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 0320 	add.w	r3, r7, #32
 8001792:	2230      	movs	r2, #48	; 0x30
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f00a f8c6 	bl	800b928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	4b27      	ldr	r3, [pc, #156]	; (8001850 <SystemClock_Config+0xc8>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	4a26      	ldr	r2, [pc, #152]	; (8001850 <SystemClock_Config+0xc8>)
 80017b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ba:	6413      	str	r3, [r2, #64]	; 0x40
 80017bc:	4b24      	ldr	r3, [pc, #144]	; (8001850 <SystemClock_Config+0xc8>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <SystemClock_Config+0xcc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a20      	ldr	r2, [pc, #128]	; (8001854 <SystemClock_Config+0xcc>)
 80017d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <SystemClock_Config+0xcc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e4:	2301      	movs	r3, #1
 80017e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ee:	2302      	movs	r3, #2
 80017f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017f8:	2304      	movs	r3, #4
 80017fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80017fc:	23c0      	movs	r3, #192	; 0xc0
 80017fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001800:	2304      	movs	r3, #4
 8001802:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001804:	2308      	movs	r3, #8
 8001806:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001808:	f107 0320 	add.w	r3, r7, #32
 800180c:	4618      	mov	r0, r3
 800180e:	f005 f8cd 	bl	80069ac <HAL_RCC_OscConfig>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001818:	f000 fc62 	bl	80020e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181c:	230f      	movs	r3, #15
 800181e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001820:	2302      	movs	r3, #2
 8001822:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001828:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800182c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	2103      	movs	r1, #3
 8001838:	4618      	mov	r0, r3
 800183a:	f005 fb2f 	bl	8006e9c <HAL_RCC_ClockConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001844:	f000 fc4c 	bl	80020e0 <Error_Handler>
  }
}
 8001848:	bf00      	nop
 800184a:	3750      	adds	r7, #80	; 0x50
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	40007000 	.word	0x40007000

08001858 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800185e:	463b      	mov	r3, r7
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
 800186c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800186e:	2301      	movs	r3, #1
 8001870:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001872:	23c8      	movs	r3, #200	; 0xc8
 8001874:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001876:	2305      	movs	r3, #5
 8001878:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800187a:	2302      	movs	r3, #2
 800187c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187e:	463b      	mov	r3, r7
 8001880:	4618      	mov	r0, r3
 8001882:	f005 fd17 	bl	80072b4 <HAL_RCCEx_PeriphCLKConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800188c:	f000 fc28 	bl	80020e0 <Error_Handler>
  }
}
 8001890:	bf00      	nop
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_I2C1_Init+0x50>)
 800189e:	4a13      	ldr	r2, [pc, #76]	; (80018ec <MX_I2C1_Init+0x54>)
 80018a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <MX_I2C1_Init+0x58>)
 80018a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018d6:	f003 fba5 	bl	8005024 <HAL_I2C_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018e0:	f000 fbfe 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200000bc 	.word	0x200000bc
 80018ec:	40005400 	.word	0x40005400
 80018f0:	000186a0 	.word	0x000186a0

080018f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <MX_I2C3_Init+0x50>)
 80018fa:	4a13      	ldr	r2, [pc, #76]	; (8001948 <MX_I2C3_Init+0x54>)
 80018fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_I2C3_Init+0x50>)
 8001900:	4a12      	ldr	r2, [pc, #72]	; (800194c <MX_I2C3_Init+0x58>)
 8001902:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MX_I2C3_Init+0x50>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <MX_I2C3_Init+0x50>)
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_I2C3_Init+0x50>)
 8001912:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001916:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <MX_I2C3_Init+0x50>)
 800191a:	2200      	movs	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_I2C3_Init+0x50>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <MX_I2C3_Init+0x50>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_I2C3_Init+0x50>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001930:	4804      	ldr	r0, [pc, #16]	; (8001944 <MX_I2C3_Init+0x50>)
 8001932:	f003 fb77 	bl	8005024 <HAL_I2C_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800193c:	f000 fbd0 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000110 	.word	0x20000110
 8001948:	40005c00 	.word	0x40005c00
 800194c:	000186a0 	.word	0x000186a0

08001950 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <MX_I2S2_Init+0x50>)
 8001956:	4a13      	ldr	r2, [pc, #76]	; (80019a4 <MX_I2S2_Init+0x54>)
 8001958:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_I2S2_Init+0x50>)
 800195c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001960:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <MX_I2S2_Init+0x50>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001968:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <MX_I2S2_Init+0x50>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_I2S2_Init+0x50>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <MX_I2S2_Init+0x50>)
 8001976:	4a0c      	ldr	r2, [pc, #48]	; (80019a8 <MX_I2S2_Init+0x58>)
 8001978:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_I2S2_Init+0x50>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001980:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <MX_I2S2_Init+0x50>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_I2S2_Init+0x50>)
 8001988:	2201      	movs	r2, #1
 800198a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800198c:	4804      	ldr	r0, [pc, #16]	; (80019a0 <MX_I2S2_Init+0x50>)
 800198e:	f004 fb6d 	bl	800606c <HAL_I2S_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001998:	f000 fba2 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000164 	.word	0x20000164
 80019a4:	40003800 	.word	0x40003800
 80019a8:	00017700 	.word	0x00017700

080019ac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019b2:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <MX_I2S3_Init+0x58>)
 80019b4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019bc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80019c4:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80019ca:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019d4:	4a0c      	ldr	r2, [pc, #48]	; (8001a08 <MX_I2S3_Init+0x5c>)
 80019d6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_I2S3_Init+0x54>)
 80019ec:	f004 fb3e 	bl	800606c <HAL_I2S_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80019f6:	f000 fb73 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200001ac 	.word	0x200001ac
 8001a04:	40003c00 	.word	0x40003c00
 8001a08:	00017700 	.word	0x00017700

08001a0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a12:	f107 0308 	add.w	r3, r7, #8
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	463b      	mov	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <MX_TIM1_Init+0x98>)
 8001a2a:	4a1f      	ldr	r2, [pc, #124]	; (8001aa8 <MX_TIM1_Init+0x9c>)
 8001a2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <MX_TIM1_Init+0x98>)
 8001a30:	225f      	movs	r2, #95	; 0x5f
 8001a32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <MX_TIM1_Init+0x98>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <MX_TIM1_Init+0x98>)
 8001a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <MX_TIM1_Init+0x98>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <MX_TIM1_Init+0x98>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <MX_TIM1_Init+0x98>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a54:	4813      	ldr	r0, [pc, #76]	; (8001aa4 <MX_TIM1_Init+0x98>)
 8001a56:	f005 fd7f 	bl	8007558 <HAL_TIM_Base_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a60:	f000 fb3e 	bl	80020e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <MX_TIM1_Init+0x98>)
 8001a72:	f005 ff9c 	bl	80079ae <HAL_TIM_ConfigClockSource>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a7c:	f000 fb30 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a88:	463b      	mov	r3, r7
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_TIM1_Init+0x98>)
 8001a8e:	f006 f9a3 	bl	8007dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a98:	f000 fb22 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200001f4 	.word	0x200001f4
 8001aa8:	40010000 	.word	0x40010000

08001aac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab2:	f107 0308 	add.w	r3, r7, #8
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <MX_TIM2_Init+0x94>)
 8001aca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ace:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9599;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_TIM2_Init+0x94>)
 8001ad2:	f242 527f 	movw	r2, #9599	; 0x257f
 8001ad6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <MX_TIM2_Init+0x94>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_TIM2_Init+0x94>)
 8001ae0:	22fa      	movs	r2, #250	; 0xfa
 8001ae2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <MX_TIM2_Init+0x94>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <MX_TIM2_Init+0x94>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001af0:	4813      	ldr	r0, [pc, #76]	; (8001b40 <MX_TIM2_Init+0x94>)
 8001af2:	f005 fd31 	bl	8007558 <HAL_TIM_Base_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001afc:	f000 faf0 	bl	80020e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b06:	f107 0308 	add.w	r3, r7, #8
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	480c      	ldr	r0, [pc, #48]	; (8001b40 <MX_TIM2_Init+0x94>)
 8001b0e:	f005 ff4e 	bl	80079ae <HAL_TIM_ConfigClockSource>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b18:	f000 fae2 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b24:	463b      	mov	r3, r7
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_TIM2_Init+0x94>)
 8001b2a:	f006 f955 	bl	8007dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b34:	f000 fad4 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b38:	bf00      	nop
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000023c 	.word	0x2000023c

08001b44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b58:	463b      	mov	r3, r7
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <MX_TIM4_Init+0x94>)
 8001b62:	4a1e      	ldr	r2, [pc, #120]	; (8001bdc <MX_TIM4_Init+0x98>)
 8001b64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9599;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <MX_TIM4_Init+0x94>)
 8001b68:	f242 527f 	movw	r2, #9599	; 0x257f
 8001b6c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <MX_TIM4_Init+0x94>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <MX_TIM4_Init+0x94>)
 8001b76:	2264      	movs	r2, #100	; 0x64
 8001b78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <MX_TIM4_Init+0x94>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <MX_TIM4_Init+0x94>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b86:	4814      	ldr	r0, [pc, #80]	; (8001bd8 <MX_TIM4_Init+0x94>)
 8001b88:	f005 fce6 	bl	8007558 <HAL_TIM_Base_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001b92:	f000 faa5 	bl	80020e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b9c:	f107 0308 	add.w	r3, r7, #8
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <MX_TIM4_Init+0x94>)
 8001ba4:	f005 ff03 	bl	80079ae <HAL_TIM_ConfigClockSource>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001bae:	f000 fa97 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bba:	463b      	mov	r3, r7
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <MX_TIM4_Init+0x94>)
 8001bc0:	f006 f90a 	bl	8007dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001bca:	f000 fa89 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000284 	.word	0x20000284
 8001bdc:	40000800 	.word	0x40000800

08001be0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_TIM10_Init+0x40>)
 8001be6:	4a0f      	ldr	r2, [pc, #60]	; (8001c24 <MX_TIM10_Init+0x44>)
 8001be8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9599;
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <MX_TIM10_Init+0x40>)
 8001bec:	f242 527f 	movw	r2, #9599	; 0x257f
 8001bf0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <MX_TIM10_Init+0x40>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1200;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_TIM10_Init+0x40>)
 8001bfa:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001bfe:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c00:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <MX_TIM10_Init+0x40>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_TIM10_Init+0x40>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001c0c:	4804      	ldr	r0, [pc, #16]	; (8001c20 <MX_TIM10_Init+0x40>)
 8001c0e:	f005 fca3 	bl	8007558 <HAL_TIM_Base_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001c18:	f000 fa62 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	200002cc 	.word	0x200002cc
 8001c24:	40014400 	.word	0x40014400

08001c28 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <MX_TIM11_Init+0x40>)
 8001c2e:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <MX_TIM11_Init+0x44>)
 8001c30:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 95;
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <MX_TIM11_Init+0x40>)
 8001c34:	225f      	movs	r2, #95	; 0x5f
 8001c36:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <MX_TIM11_Init+0x40>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0xffff-1;
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <MX_TIM11_Init+0x40>)
 8001c40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001c44:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <MX_TIM11_Init+0x40>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <MX_TIM11_Init+0x40>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001c52:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_TIM11_Init+0x40>)
 8001c54:	f005 fc80 	bl	8007558 <HAL_TIM_Base_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001c5e:	f000 fa3f 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000314 	.word	0x20000314
 8001c6c:	40014800 	.word	0x40014800

08001c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	; 0x30
 8001c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	4b91      	ldr	r3, [pc, #580]	; (8001ed0 <MX_GPIO_Init+0x260>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a90      	ldr	r2, [pc, #576]	; (8001ed0 <MX_GPIO_Init+0x260>)
 8001c90:	f043 0310 	orr.w	r3, r3, #16
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b8e      	ldr	r3, [pc, #568]	; (8001ed0 <MX_GPIO_Init+0x260>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	61bb      	str	r3, [r7, #24]
 8001ca0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	4b8a      	ldr	r3, [pc, #552]	; (8001ed0 <MX_GPIO_Init+0x260>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a89      	ldr	r2, [pc, #548]	; (8001ed0 <MX_GPIO_Init+0x260>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b87      	ldr	r3, [pc, #540]	; (8001ed0 <MX_GPIO_Init+0x260>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	4b83      	ldr	r3, [pc, #524]	; (8001ed0 <MX_GPIO_Init+0x260>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a82      	ldr	r2, [pc, #520]	; (8001ed0 <MX_GPIO_Init+0x260>)
 8001cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b80      	ldr	r3, [pc, #512]	; (8001ed0 <MX_GPIO_Init+0x260>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b7c      	ldr	r3, [pc, #496]	; (8001ed0 <MX_GPIO_Init+0x260>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a7b      	ldr	r2, [pc, #492]	; (8001ed0 <MX_GPIO_Init+0x260>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b79      	ldr	r3, [pc, #484]	; (8001ed0 <MX_GPIO_Init+0x260>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	4b75      	ldr	r3, [pc, #468]	; (8001ed0 <MX_GPIO_Init+0x260>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a74      	ldr	r2, [pc, #464]	; (8001ed0 <MX_GPIO_Init+0x260>)
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b72      	ldr	r3, [pc, #456]	; (8001ed0 <MX_GPIO_Init+0x260>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	4b6e      	ldr	r3, [pc, #440]	; (8001ed0 <MX_GPIO_Init+0x260>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a6d      	ldr	r2, [pc, #436]	; (8001ed0 <MX_GPIO_Init+0x260>)
 8001d1c:	f043 0308 	orr.w	r3, r3, #8
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b6b      	ldr	r3, [pc, #428]	; (8001ed0 <MX_GPIO_Init+0x260>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8001d34:	4867      	ldr	r0, [pc, #412]	; (8001ed4 <MX_GPIO_Init+0x264>)
 8001d36:	f001 f80f 	bl	8002d58 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	4866      	ldr	r0, [pc, #408]	; (8001ed8 <MX_GPIO_Init+0x268>)
 8001d40:	f001 f80a 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STB_Pin|CLK_Pin|DIO_Pin|GPIO_PIN_13
 8001d44:	2200      	movs	r2, #0
 8001d46:	f24e 0127 	movw	r1, #57383	; 0xe027
 8001d4a:	4864      	ldr	r0, [pc, #400]	; (8001edc <MX_GPIO_Init+0x26c>)
 8001d4c:	f001 f804 	bl	8002d58 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001d50:	2200      	movs	r2, #0
 8001d52:	f24f 011f 	movw	r1, #61471	; 0xf01f
 8001d56:	4862      	ldr	r0, [pc, #392]	; (8001ee0 <MX_GPIO_Init+0x270>)
 8001d58:	f000 fffe 	bl	8002d58 <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d60:	2300      	movs	r3, #0
 8001d62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4859      	ldr	r0, [pc, #356]	; (8001ed4 <MX_GPIO_Init+0x264>)
 8001d70:	f000 fe56 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE7 PE8 PE9
                           PE10 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001d74:	f44f 63f1 	mov.w	r3, #1928	; 0x788
 8001d78:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4851      	ldr	r0, [pc, #324]	; (8001ed4 <MX_GPIO_Init+0x264>)
 8001d8e:	f000 fe47 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001d92:	2332      	movs	r3, #50	; 0x32
 8001d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d96:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	4619      	mov	r1, r3
 8001da6:	484b      	ldr	r0, [pc, #300]	; (8001ed4 <MX_GPIO_Init+0x264>)
 8001da8:	f000 fe3a 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001dac:	2301      	movs	r3, #1
 8001dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db0:	2301      	movs	r3, #1
 8001db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4845      	ldr	r0, [pc, #276]	; (8001ed8 <MX_GPIO_Init+0x268>)
 8001dc4:	f000 fe2c 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001dcc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4841      	ldr	r0, [pc, #260]	; (8001ee4 <MX_GPIO_Init+0x274>)
 8001dde:	f000 fe1f 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 8001de2:	2302      	movs	r3, #2
 8001de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8001dee:	f107 031c 	add.w	r3, r7, #28
 8001df2:	4619      	mov	r1, r3
 8001df4:	483b      	ldr	r0, [pc, #236]	; (8001ee4 <MX_GPIO_Init+0x274>)
 8001df6:	f000 fe13 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001dfa:	23e0      	movs	r3, #224	; 0xe0
 8001dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e0a:	2305      	movs	r3, #5
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f107 031c 	add.w	r3, r7, #28
 8001e12:	4619      	mov	r1, r3
 8001e14:	4833      	ldr	r0, [pc, #204]	; (8001ee4 <MX_GPIO_Init+0x274>)
 8001e16:	f000 fe03 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : STB_Pin CLK_Pin DIO_Pin PB13
                           PB14 PB15 PB5 */
  GPIO_InitStruct.Pin = STB_Pin|CLK_Pin|DIO_Pin|GPIO_PIN_13
 8001e1a:	f24e 0327 	movw	r3, #57383	; 0xe027
 8001e1e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e20:	2301      	movs	r3, #1
 8001e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	4619      	mov	r1, r3
 8001e32:	482a      	ldr	r0, [pc, #168]	; (8001edc <MX_GPIO_Init+0x26c>)
 8001e34:	f000 fdf4 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e3e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4824      	ldr	r0, [pc, #144]	; (8001ee0 <MX_GPIO_Init+0x270>)
 8001e50:	f000 fde6 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e64:	f107 031c 	add.w	r3, r7, #28
 8001e68:	4619      	mov	r1, r3
 8001e6a:	481d      	ldr	r0, [pc, #116]	; (8001ee0 <MX_GPIO_Init+0x270>)
 8001e6c:	f000 fdd8 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           PD0 PD1 PD2 PD3
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001e70:	f24f 031f 	movw	r3, #61471	; 0xf01f
 8001e74:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	4815      	ldr	r0, [pc, #84]	; (8001ee0 <MX_GPIO_Init+0x270>)
 8001e8a:	f000 fdc9 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e8e:	2320      	movs	r3, #32
 8001e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480f      	ldr	r0, [pc, #60]	; (8001ee0 <MX_GPIO_Init+0x270>)
 8001ea2:	f000 fdbd 	bl	8002a20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2017      	movs	r0, #23
 8001eac:	f000 fd81 	bl	80029b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001eb0:	2017      	movs	r0, #23
 8001eb2:	f000 fd9a 	bl	80029ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2100      	movs	r1, #0
 8001eba:	2028      	movs	r0, #40	; 0x28
 8001ebc:	f000 fd79 	bl	80029b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ec0:	2028      	movs	r0, #40	; 0x28
 8001ec2:	f000 fd92 	bl	80029ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ec6:	bf00      	nop
 8001ec8:	3730      	adds	r7, #48	; 0x30
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40020800 	.word	0x40020800
 8001edc:	40020400 	.word	0x40020400
 8001ee0:	40020c00 	.word	0x40020c00
 8001ee4:	40020000 	.word	0x40020000

08001ee8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//*****************SETTING*************//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == GPIO_PIN_9) && state_ex == true){
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef8:	d113      	bne.n	8001f22 <HAL_GPIO_EXTI_Callback+0x3a>
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <HAL_GPIO_EXTI_Callback+0x44>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00f      	beq.n	8001f22 <HAL_GPIO_EXTI_Callback+0x3a>
		HAL_TIM_Base_Start_IT(&htim10);
 8001f02:	480b      	ldr	r0, [pc, #44]	; (8001f30 <HAL_GPIO_EXTI_Callback+0x48>)
 8001f04:	f005 fbd2 	bl	80076ac <HAL_TIM_Base_Start_IT>
		state_ex = false;
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_GPIO_EXTI_Callback+0x44>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
		MINUTE = time.minutes;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001f10:	785b      	ldrb	r3, [r3, #1]
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_GPIO_EXTI_Callback+0x50>)
 8001f16:	601a      	str	r2, [r3, #0]
		HOUR = time.hour;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001f1a:	789b      	ldrb	r3, [r3, #2]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <HAL_GPIO_EXTI_Callback+0x54>)
 8001f20:	601a      	str	r2, [r3, #0]
	}
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000010 	.word	0x20000010
 8001f30:	200002cc 	.word	0x200002cc
 8001f34:	200003a4 	.word	0x200003a4
 8001f38:	2000039c 	.word	0x2000039c
 8001f3c:	200003a0 	.word	0x200003a0

08001f40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b5b0      	push	{r4, r5, r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af04      	add	r7, sp, #16
 8001f46:	6078      	str	r0, [r7, #4]
	//PRINT Temp and Hum on TM1638
	if (htim == &htim2){
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a58      	ldr	r2, [pc, #352]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d124      	bne.n	8001f9a <HAL_TIM_PeriodElapsedCallback+0x5a>
		send_command(0x8a);
 8001f50:	208a      	movs	r0, #138	; 0x8a
 8001f52:	f7ff f82f 	bl	8000fb4 <send_command>
		print_hum((int) Humidity);
 8001f56:	4b56      	ldr	r3, [pc, #344]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f60:	ee17 0a90 	vmov	r0, s15
 8001f64:	f7ff f8ee 	bl	8001144 <print_hum>
		print_temp((int) Temperature);
 8001f68:	4b52      	ldr	r3, [pc, #328]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f72:	ee17 0a90 	vmov	r0, s15
 8001f76:	f7ff f895 	bl	80010a4 <print_temp>
		if (state == WORKING)
 8001f7a:	4b4f      	ldr	r3, [pc, #316]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d105      	bne.n	8001f90 <HAL_TIM_PeriodElapsedCallback+0x50>
		{

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2120      	movs	r1, #32
 8001f88:	484c      	ldr	r0, [pc, #304]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001f8a:	f000 fee5 	bl	8002d58 <HAL_GPIO_WritePin>
 8001f8e:	e004      	b.n	8001f9a <HAL_TIM_PeriodElapsedCallback+0x5a>

		}
		else
		{

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001f90:	2201      	movs	r2, #1
 8001f92:	2120      	movs	r1, #32
 8001f94:	4849      	ldr	r0, [pc, #292]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001f96:	f000 fedf 	bl	8002d58 <HAL_GPIO_WritePin>
		}
	}
	//SET MINUTE AND HOUR
	if (htim == &htim10)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a48      	ldr	r2, [pc, #288]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d17f      	bne.n	80020a2 <HAL_TIM_PeriodElapsedCallback+0x162>
	{
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9) == GPIO_PIN_SET)
 8001fa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fa6:	4847      	ldr	r0, [pc, #284]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001fa8:	f000 febe 	bl	8002d28 <HAL_GPIO_ReadPin>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d133      	bne.n	800201a <HAL_TIM_PeriodElapsedCallback+0xda>
			{
			 if (state == WORKING){
 8001fb2:	4b41      	ldr	r3, [pc, #260]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d10d      	bne.n	8001fd8 <HAL_TIM_PeriodElapsedCallback+0x98>
			 MINUTE = time.minutes;
 8001fbc:	4b42      	ldr	r3, [pc, #264]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001fbe:	785b      	ldrb	r3, [r3, #1]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b42      	ldr	r3, [pc, #264]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001fc4:	601a      	str	r2, [r3, #0]
			 HOUR = time.hour;
 8001fc6:	4b40      	ldr	r3, [pc, #256]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001fc8:	789b      	ldrb	r3, [r3, #2]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b40      	ldr	r3, [pc, #256]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001fce:	601a      	str	r2, [r3, #0]
			 state = SETTING;
 8001fd0:	4b39      	ldr	r3, [pc, #228]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
				 HOUR = HOUR % 24;
				 }
			}
	}

}
 8001fd6:	e064      	b.n	80020a2 <HAL_TIM_PeriodElapsedCallback+0x162>
				 Set_Time(00, MINUTE, HOUR, time.dayofweek, time.dayofmonth, time.month, time.year);
 8001fd8:	4b3c      	ldr	r3, [pc, #240]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	b2d8      	uxtb	r0, r3
 8001fde:	4b3c      	ldr	r3, [pc, #240]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	b2dc      	uxtb	r4, r3
 8001fe4:	4b38      	ldr	r3, [pc, #224]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001fe6:	78dd      	ldrb	r5, [r3, #3]
 8001fe8:	4b37      	ldr	r3, [pc, #220]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001fea:	791b      	ldrb	r3, [r3, #4]
 8001fec:	4a36      	ldr	r2, [pc, #216]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001fee:	7952      	ldrb	r2, [r2, #5]
 8001ff0:	4935      	ldr	r1, [pc, #212]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001ff2:	7989      	ldrb	r1, [r1, #6]
 8001ff4:	9102      	str	r1, [sp, #8]
 8001ff6:	9201      	str	r2, [sp, #4]
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	462b      	mov	r3, r5
 8001ffc:	4622      	mov	r2, r4
 8001ffe:	4601      	mov	r1, r0
 8002000:	2000      	movs	r0, #0
 8002002:	f7fe feeb 	bl	8000ddc <Set_Time>
				 state = WORKING;
 8002006:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
				 state_ex = true;
 800200c:	4b31      	ldr	r3, [pc, #196]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
				 HAL_TIM_Base_Stop_IT(&htim10);
 8002012:	482b      	ldr	r0, [pc, #172]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002014:	f005 fbac 	bl	8007770 <HAL_TIM_Base_Stop_IT>
}
 8002018:	e043      	b.n	80020a2 <HAL_TIM_PeriodElapsedCallback+0x162>
		else if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == GPIO_PIN_SET)
 800201a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800201e:	4829      	ldr	r0, [pc, #164]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002020:	f000 fe82 	bl	8002d28 <HAL_GPIO_ReadPin>
 8002024:	4603      	mov	r3, r0
 8002026:	2b01      	cmp	r3, #1
 8002028:	d11a      	bne.n	8002060 <HAL_TIM_PeriodElapsedCallback+0x120>
			 if (state == SETTING)
 800202a:	4b23      	ldr	r3, [pc, #140]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d136      	bne.n	80020a2 <HAL_TIM_PeriodElapsedCallback+0x162>
				 MINUTE++;
 8002034:	4b25      	ldr	r3, [pc, #148]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3301      	adds	r3, #1
 800203a:	4a24      	ldr	r2, [pc, #144]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800203c:	6013      	str	r3, [r2, #0]
				 MINUTE = MINUTE % 60;
 800203e:	4b23      	ldr	r3, [pc, #140]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002044:	fb83 1302 	smull	r1, r3, r3, r2
 8002048:	4413      	add	r3, r2
 800204a:	1159      	asrs	r1, r3, #5
 800204c:	17d3      	asrs	r3, r2, #31
 800204e:	1ac9      	subs	r1, r1, r3
 8002050:	460b      	mov	r3, r1
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	1a5b      	subs	r3, r3, r1
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	1ad1      	subs	r1, r2, r3
 800205a:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800205c:	6019      	str	r1, [r3, #0]
}
 800205e:	e020      	b.n	80020a2 <HAL_TIM_PeriodElapsedCallback+0x162>
		else if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET)
 8002060:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002064:	4817      	ldr	r0, [pc, #92]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002066:	f000 fe5f 	bl	8002d28 <HAL_GPIO_ReadPin>
 800206a:	4603      	mov	r3, r0
 800206c:	2b01      	cmp	r3, #1
 800206e:	d118      	bne.n	80020a2 <HAL_TIM_PeriodElapsedCallback+0x162>
			 if (state == SETTING)
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d113      	bne.n	80020a2 <HAL_TIM_PeriodElapsedCallback+0x162>
				 HOUR++;
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002082:	6013      	str	r3, [r2, #0]
				 HOUR = HOUR % 24;
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002086:	6819      	ldr	r1, [r3, #0]
 8002088:	4b14      	ldr	r3, [pc, #80]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800208a:	fb83 2301 	smull	r2, r3, r3, r1
 800208e:	109a      	asrs	r2, r3, #2
 8002090:	17cb      	asrs	r3, r1, #31
 8002092:	1ad2      	subs	r2, r2, r3
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	1aca      	subs	r2, r1, r3
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80020a0:	601a      	str	r2, [r3, #0]
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bdb0      	pop	{r4, r5, r7, pc}
 80020aa:	bf00      	nop
 80020ac:	2000023c 	.word	0x2000023c
 80020b0:	200003bc 	.word	0x200003bc
 80020b4:	200003b8 	.word	0x200003b8
 80020b8:	20000011 	.word	0x20000011
 80020bc:	40020400 	.word	0x40020400
 80020c0:	200002cc 	.word	0x200002cc
 80020c4:	40020c00 	.word	0x40020c00
 80020c8:	200003a4 	.word	0x200003a4
 80020cc:	2000039c 	.word	0x2000039c
 80020d0:	200003a0 	.word	0x200003a0
 80020d4:	20000010 	.word	0x20000010
 80020d8:	88888889 	.word	0x88888889
 80020dc:	2aaaaaab 	.word	0x2aaaaaab

080020e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e4:	b672      	cpsid	i
}
 80020e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <Error_Handler+0x8>
	...

080020ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <HAL_MspInit+0x4c>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	4a0f      	ldr	r2, [pc, #60]	; (8002138 <HAL_MspInit+0x4c>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002100:	6453      	str	r3, [r2, #68]	; 0x44
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_MspInit+0x4c>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	603b      	str	r3, [r7, #0]
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_MspInit+0x4c>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	4a08      	ldr	r2, [pc, #32]	; (8002138 <HAL_MspInit+0x4c>)
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211c:	6413      	str	r3, [r2, #64]	; 0x40
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_MspInit+0x4c>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800212a:	2007      	movs	r0, #7
 800212c:	f000 fc36 	bl	800299c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800

0800213c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08c      	sub	sp, #48	; 0x30
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 031c 	add.w	r3, r7, #28
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a42      	ldr	r2, [pc, #264]	; (8002264 <HAL_I2C_MspInit+0x128>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d12d      	bne.n	80021ba <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	4b41      	ldr	r3, [pc, #260]	; (8002268 <HAL_I2C_MspInit+0x12c>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a40      	ldr	r2, [pc, #256]	; (8002268 <HAL_I2C_MspInit+0x12c>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b3e      	ldr	r3, [pc, #248]	; (8002268 <HAL_I2C_MspInit+0x12c>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800217a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800217e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002180:	2312      	movs	r3, #18
 8002182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002184:	2301      	movs	r3, #1
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800218c:	2304      	movs	r3, #4
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002190:	f107 031c 	add.w	r3, r7, #28
 8002194:	4619      	mov	r1, r3
 8002196:	4835      	ldr	r0, [pc, #212]	; (800226c <HAL_I2C_MspInit+0x130>)
 8002198:	f000 fc42 	bl	8002a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	4b31      	ldr	r3, [pc, #196]	; (8002268 <HAL_I2C_MspInit+0x12c>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	4a30      	ldr	r2, [pc, #192]	; (8002268 <HAL_I2C_MspInit+0x12c>)
 80021a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021aa:	6413      	str	r3, [r2, #64]	; 0x40
 80021ac:	4b2e      	ldr	r3, [pc, #184]	; (8002268 <HAL_I2C_MspInit+0x12c>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80021b8:	e050      	b.n	800225c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a2c      	ldr	r2, [pc, #176]	; (8002270 <HAL_I2C_MspInit+0x134>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d14b      	bne.n	800225c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c4:	2300      	movs	r3, #0
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_I2C_MspInit+0x12c>)
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	4a26      	ldr	r2, [pc, #152]	; (8002268 <HAL_I2C_MspInit+0x12c>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	6313      	str	r3, [r2, #48]	; 0x30
 80021d4:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_I2C_MspInit+0x12c>)
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	4b20      	ldr	r3, [pc, #128]	; (8002268 <HAL_I2C_MspInit+0x12c>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	4a1f      	ldr	r2, [pc, #124]	; (8002268 <HAL_I2C_MspInit+0x12c>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6313      	str	r3, [r2, #48]	; 0x30
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <HAL_I2C_MspInit+0x12c>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002202:	2312      	movs	r3, #18
 8002204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220a:	2303      	movs	r3, #3
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800220e:	2304      	movs	r3, #4
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002212:	f107 031c 	add.w	r3, r7, #28
 8002216:	4619      	mov	r1, r3
 8002218:	4816      	ldr	r0, [pc, #88]	; (8002274 <HAL_I2C_MspInit+0x138>)
 800221a:	f000 fc01 	bl	8002a20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800221e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002224:	2312      	movs	r3, #18
 8002226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222c:	2303      	movs	r3, #3
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002230:	2304      	movs	r3, #4
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	4619      	mov	r1, r3
 800223a:	480f      	ldr	r0, [pc, #60]	; (8002278 <HAL_I2C_MspInit+0x13c>)
 800223c:	f000 fbf0 	bl	8002a20 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_I2C_MspInit+0x12c>)
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	4a07      	ldr	r2, [pc, #28]	; (8002268 <HAL_I2C_MspInit+0x12c>)
 800224a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800224e:	6413      	str	r3, [r2, #64]	; 0x40
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_I2C_MspInit+0x12c>)
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]
}
 800225c:	bf00      	nop
 800225e:	3730      	adds	r7, #48	; 0x30
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40005400 	.word	0x40005400
 8002268:	40023800 	.word	0x40023800
 800226c:	40020400 	.word	0x40020400
 8002270:	40005c00 	.word	0x40005c00
 8002274:	40020800 	.word	0x40020800
 8002278:	40020000 	.word	0x40020000

0800227c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08e      	sub	sp, #56	; 0x38
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a59      	ldr	r2, [pc, #356]	; (8002400 <HAL_I2S_MspInit+0x184>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d15b      	bne.n	8002356 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	623b      	str	r3, [r7, #32]
 80022a2:	4b58      	ldr	r3, [pc, #352]	; (8002404 <HAL_I2S_MspInit+0x188>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a57      	ldr	r2, [pc, #348]	; (8002404 <HAL_I2S_MspInit+0x188>)
 80022a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b55      	ldr	r3, [pc, #340]	; (8002404 <HAL_I2S_MspInit+0x188>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b6:	623b      	str	r3, [r7, #32]
 80022b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	4b51      	ldr	r3, [pc, #324]	; (8002404 <HAL_I2S_MspInit+0x188>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a50      	ldr	r2, [pc, #320]	; (8002404 <HAL_I2S_MspInit+0x188>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b4e      	ldr	r3, [pc, #312]	; (8002404 <HAL_I2S_MspInit+0x188>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
 80022da:	4b4a      	ldr	r3, [pc, #296]	; (8002404 <HAL_I2S_MspInit+0x188>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a49      	ldr	r2, [pc, #292]	; (8002404 <HAL_I2S_MspInit+0x188>)
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b47      	ldr	r3, [pc, #284]	; (8002404 <HAL_I2S_MspInit+0x188>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022f2:	2304      	movs	r3, #4
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8002302:	2306      	movs	r3, #6
 8002304:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230a:	4619      	mov	r1, r3
 800230c:	483e      	ldr	r0, [pc, #248]	; (8002408 <HAL_I2S_MspInit+0x18c>)
 800230e:	f000 fb87 	bl	8002a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002312:	2308      	movs	r3, #8
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002322:	2305      	movs	r3, #5
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232a:	4619      	mov	r1, r3
 800232c:	4836      	ldr	r0, [pc, #216]	; (8002408 <HAL_I2S_MspInit+0x18c>)
 800232e:	f000 fb77 	bl	8002a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8002332:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002344:	2305      	movs	r3, #5
 8002346:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234c:	4619      	mov	r1, r3
 800234e:	482f      	ldr	r0, [pc, #188]	; (800240c <HAL_I2S_MspInit+0x190>)
 8002350:	f000 fb66 	bl	8002a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002354:	e04f      	b.n	80023f6 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a2d      	ldr	r2, [pc, #180]	; (8002410 <HAL_I2S_MspInit+0x194>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d14a      	bne.n	80023f6 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <HAL_I2S_MspInit+0x188>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	4a26      	ldr	r2, [pc, #152]	; (8002404 <HAL_I2S_MspInit+0x188>)
 800236a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236e:	6413      	str	r3, [r2, #64]	; 0x40
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <HAL_I2S_MspInit+0x188>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	4b20      	ldr	r3, [pc, #128]	; (8002404 <HAL_I2S_MspInit+0x188>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	4a1f      	ldr	r2, [pc, #124]	; (8002404 <HAL_I2S_MspInit+0x188>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6313      	str	r3, [r2, #48]	; 0x30
 800238c:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_I2S_MspInit+0x188>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_I2S_MspInit+0x188>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	4a18      	ldr	r2, [pc, #96]	; (8002404 <HAL_I2S_MspInit+0x188>)
 80023a2:	f043 0304 	orr.w	r3, r3, #4
 80023a6:	6313      	str	r3, [r2, #48]	; 0x30
 80023a8:	4b16      	ldr	r3, [pc, #88]	; (8002404 <HAL_I2S_MspInit+0x188>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80023b4:	2310      	movs	r3, #16
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023c4:	2306      	movs	r3, #6
 80023c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80023c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023cc:	4619      	mov	r1, r3
 80023ce:	4811      	ldr	r0, [pc, #68]	; (8002414 <HAL_I2S_MspInit+0x198>)
 80023d0:	f000 fb26 	bl	8002a20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80023d4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023da:	2302      	movs	r3, #2
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023e6:	2306      	movs	r3, #6
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ee:	4619      	mov	r1, r3
 80023f0:	4805      	ldr	r0, [pc, #20]	; (8002408 <HAL_I2S_MspInit+0x18c>)
 80023f2:	f000 fb15 	bl	8002a20 <HAL_GPIO_Init>
}
 80023f6:	bf00      	nop
 80023f8:	3738      	adds	r7, #56	; 0x38
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40003800 	.word	0x40003800
 8002404:	40023800 	.word	0x40023800
 8002408:	40020800 	.word	0x40020800
 800240c:	40020400 	.word	0x40020400
 8002410:	40003c00 	.word	0x40003c00
 8002414:	40020000 	.word	0x40020000

08002418 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a3e      	ldr	r2, [pc, #248]	; (8002520 <HAL_TIM_Base_MspInit+0x108>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d116      	bne.n	8002458 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <HAL_TIM_Base_MspInit+0x10c>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	4a3c      	ldr	r2, [pc, #240]	; (8002524 <HAL_TIM_Base_MspInit+0x10c>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6453      	str	r3, [r2, #68]	; 0x44
 800243a:	4b3a      	ldr	r3, [pc, #232]	; (8002524 <HAL_TIM_Base_MspInit+0x10c>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	61fb      	str	r3, [r7, #28]
 8002444:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	2019      	movs	r0, #25
 800244c:	f000 fab1 	bl	80029b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002450:	2019      	movs	r0, #25
 8002452:	f000 faca 	bl	80029ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002456:	e05e      	b.n	8002516 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002460:	d116      	bne.n	8002490 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	4b2f      	ldr	r3, [pc, #188]	; (8002524 <HAL_TIM_Base_MspInit+0x10c>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	4a2e      	ldr	r2, [pc, #184]	; (8002524 <HAL_TIM_Base_MspInit+0x10c>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6413      	str	r3, [r2, #64]	; 0x40
 8002472:	4b2c      	ldr	r3, [pc, #176]	; (8002524 <HAL_TIM_Base_MspInit+0x10c>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	61bb      	str	r3, [r7, #24]
 800247c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	2100      	movs	r1, #0
 8002482:	201c      	movs	r0, #28
 8002484:	f000 fa95 	bl	80029b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002488:	201c      	movs	r0, #28
 800248a:	f000 faae 	bl	80029ea <HAL_NVIC_EnableIRQ>
}
 800248e:	e042      	b.n	8002516 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM4)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a24      	ldr	r2, [pc, #144]	; (8002528 <HAL_TIM_Base_MspInit+0x110>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d10e      	bne.n	80024b8 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	4b21      	ldr	r3, [pc, #132]	; (8002524 <HAL_TIM_Base_MspInit+0x10c>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	4a20      	ldr	r2, [pc, #128]	; (8002524 <HAL_TIM_Base_MspInit+0x10c>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	6413      	str	r3, [r2, #64]	; 0x40
 80024aa:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <HAL_TIM_Base_MspInit+0x10c>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	697b      	ldr	r3, [r7, #20]
}
 80024b6:	e02e      	b.n	8002516 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1b      	ldr	r2, [pc, #108]	; (800252c <HAL_TIM_Base_MspInit+0x114>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d116      	bne.n	80024f0 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	4b17      	ldr	r3, [pc, #92]	; (8002524 <HAL_TIM_Base_MspInit+0x10c>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	4a16      	ldr	r2, [pc, #88]	; (8002524 <HAL_TIM_Base_MspInit+0x10c>)
 80024cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d0:	6453      	str	r3, [r2, #68]	; 0x44
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HAL_TIM_Base_MspInit+0x10c>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	2019      	movs	r0, #25
 80024e4:	f000 fa65 	bl	80029b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024e8:	2019      	movs	r0, #25
 80024ea:	f000 fa7e 	bl	80029ea <HAL_NVIC_EnableIRQ>
}
 80024ee:	e012      	b.n	8002516 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <HAL_TIM_Base_MspInit+0x118>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d10d      	bne.n	8002516 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_TIM_Base_MspInit+0x10c>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	4a08      	ldr	r2, [pc, #32]	; (8002524 <HAL_TIM_Base_MspInit+0x10c>)
 8002504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002508:	6453      	str	r3, [r2, #68]	; 0x44
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_TIM_Base_MspInit+0x10c>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
}
 8002516:	bf00      	nop
 8002518:	3720      	adds	r7, #32
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40010000 	.word	0x40010000
 8002524:	40023800 	.word	0x40023800
 8002528:	40000800 	.word	0x40000800
 800252c:	40014400 	.word	0x40014400
 8002530:	40014800 	.word	0x40014800

08002534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002538:	e7fe      	b.n	8002538 <NMI_Handler+0x4>

0800253a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800253e:	e7fe      	b.n	800253e <HardFault_Handler+0x4>

08002540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <MemManage_Handler+0x4>

08002546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800254a:	e7fe      	b.n	800254a <BusFault_Handler+0x4>

0800254c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <UsageFault_Handler+0x4>

08002552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002580:	f000 f8f8 	bl	8002774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}

08002588 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800258c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002590:	f000 fc16 	bl	8002dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}

08002598 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800259c:	4803      	ldr	r0, [pc, #12]	; (80025ac <TIM1_UP_TIM10_IRQHandler+0x14>)
 800259e:	f005 f916 	bl	80077ce <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80025a2:	4803      	ldr	r0, [pc, #12]	; (80025b0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80025a4:	f005 f913 	bl	80077ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	200001f4 	.word	0x200001f4
 80025b0:	200002cc 	.word	0x200002cc

080025b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <TIM2_IRQHandler+0x10>)
 80025ba:	f005 f908 	bl	80077ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	2000023c 	.word	0x2000023c

080025c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80025cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025d0:	f000 fbf6 	bl	8002dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <OTG_FS_IRQHandler+0x10>)
 80025de:	f000 fee7 	bl	80033b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200007ac 	.word	0x200007ac

080025ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <_sbrk+0x5c>)
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <_sbrk+0x60>)
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <_sbrk+0x64>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <_sbrk+0x64>)
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <_sbrk+0x68>)
 800260c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <_sbrk+0x64>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	429a      	cmp	r2, r3
 800261a:	d207      	bcs.n	800262c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800261c:	f009 f99c 	bl	800b958 <__errno>
 8002620:	4603      	mov	r3, r0
 8002622:	220c      	movs	r2, #12
 8002624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800262a:	e009      	b.n	8002640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <_sbrk+0x64>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <_sbrk+0x64>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <_sbrk+0x64>)
 800263c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800263e:	68fb      	ldr	r3, [r7, #12]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20020000 	.word	0x20020000
 800264c:	00000400 	.word	0x00000400
 8002650:	200003c8 	.word	0x200003c8
 8002654:	20000cd8 	.word	0x20000cd8

08002658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <SystemInit+0x20>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	4a05      	ldr	r2, [pc, #20]	; (8002678 <SystemInit+0x20>)
 8002664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800267c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002680:	f7ff ffea 	bl	8002658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002684:	480c      	ldr	r0, [pc, #48]	; (80026b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002686:	490d      	ldr	r1, [pc, #52]	; (80026bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002688:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800268a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800268c:	e002      	b.n	8002694 <LoopCopyDataInit>

0800268e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800268e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002692:	3304      	adds	r3, #4

08002694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002698:	d3f9      	bcc.n	800268e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800269c:	4c0a      	ldr	r4, [pc, #40]	; (80026c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800269e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a0:	e001      	b.n	80026a6 <LoopFillZerobss>

080026a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a4:	3204      	adds	r2, #4

080026a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a8:	d3fb      	bcc.n	80026a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026aa:	f009 f95b 	bl	800b964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ae:	f7fe ff03 	bl	80014b8 <main>
  bx  lr    
 80026b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026bc:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80026c0:	0800baa0 	.word	0x0800baa0
  ldr r2, =_sbss
 80026c4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80026c8:	20000cd4 	.word	0x20000cd4

080026cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026cc:	e7fe      	b.n	80026cc <ADC_IRQHandler>
	...

080026d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <HAL_Init+0x40>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0d      	ldr	r2, [pc, #52]	; (8002710 <HAL_Init+0x40>)
 80026da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_Init+0x40>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <HAL_Init+0x40>)
 80026e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_Init+0x40>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a07      	ldr	r2, [pc, #28]	; (8002710 <HAL_Init+0x40>)
 80026f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f8:	2003      	movs	r0, #3
 80026fa:	f000 f94f 	bl	800299c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026fe:	2000      	movs	r0, #0
 8002700:	f000 f808 	bl	8002714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002704:	f7ff fcf2 	bl	80020ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023c00 	.word	0x40023c00

08002714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_InitTick+0x54>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b12      	ldr	r3, [pc, #72]	; (800276c <HAL_InitTick+0x58>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	4619      	mov	r1, r3
 8002726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800272a:	fbb3 f3f1 	udiv	r3, r3, r1
 800272e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f967 	bl	8002a06 <HAL_SYSTICK_Config>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e00e      	b.n	8002760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b0f      	cmp	r3, #15
 8002746:	d80a      	bhi.n	800275e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002748:	2200      	movs	r2, #0
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002750:	f000 f92f 	bl	80029b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002754:	4a06      	ldr	r2, [pc, #24]	; (8002770 <HAL_InitTick+0x5c>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	e000      	b.n	8002760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000024 	.word	0x20000024
 800276c:	2000002c 	.word	0x2000002c
 8002770:	20000028 	.word	0x20000028

08002774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_IncTick+0x20>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_IncTick+0x24>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4413      	add	r3, r2
 8002784:	4a04      	ldr	r2, [pc, #16]	; (8002798 <HAL_IncTick+0x24>)
 8002786:	6013      	str	r3, [r2, #0]
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	2000002c 	.word	0x2000002c
 8002798:	200003cc 	.word	0x200003cc

0800279c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return uwTick;
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <HAL_GetTick+0x14>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	200003cc 	.word	0x200003cc

080027b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027bc:	f7ff ffee 	bl	800279c <HAL_GetTick>
 80027c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027cc:	d005      	beq.n	80027da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_Delay+0x44>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027da:	bf00      	nop
 80027dc:	f7ff ffde 	bl	800279c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d8f7      	bhi.n	80027dc <HAL_Delay+0x28>
  {
  }
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	2000002c 	.word	0x2000002c

080027fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002818:	4013      	ands	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800282c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282e:	4a04      	ldr	r2, [pc, #16]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	60d3      	str	r3, [r2, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <__NVIC_GetPriorityGrouping+0x18>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	f003 0307 	and.w	r3, r3, #7
}
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	2b00      	cmp	r3, #0
 8002870:	db0b      	blt.n	800288a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	f003 021f 	and.w	r2, r3, #31
 8002878:	4907      	ldr	r1, [pc, #28]	; (8002898 <__NVIC_EnableIRQ+0x38>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2001      	movs	r0, #1
 8002882:	fa00 f202 	lsl.w	r2, r0, r2
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000e100 	.word	0xe000e100

0800289c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	db0a      	blt.n	80028c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	490c      	ldr	r1, [pc, #48]	; (80028e8 <__NVIC_SetPriority+0x4c>)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	0112      	lsls	r2, r2, #4
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	440b      	add	r3, r1
 80028c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c4:	e00a      	b.n	80028dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4908      	ldr	r1, [pc, #32]	; (80028ec <__NVIC_SetPriority+0x50>)
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	3b04      	subs	r3, #4
 80028d4:	0112      	lsls	r2, r2, #4
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	440b      	add	r3, r1
 80028da:	761a      	strb	r2, [r3, #24]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000e100 	.word	0xe000e100
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b089      	sub	sp, #36	; 0x24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f1c3 0307 	rsb	r3, r3, #7
 800290a:	2b04      	cmp	r3, #4
 800290c:	bf28      	it	cs
 800290e:	2304      	movcs	r3, #4
 8002910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3304      	adds	r3, #4
 8002916:	2b06      	cmp	r3, #6
 8002918:	d902      	bls.n	8002920 <NVIC_EncodePriority+0x30>
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3b03      	subs	r3, #3
 800291e:	e000      	b.n	8002922 <NVIC_EncodePriority+0x32>
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	401a      	ands	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002938:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	fa01 f303 	lsl.w	r3, r1, r3
 8002942:	43d9      	mvns	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	4313      	orrs	r3, r2
         );
}
 800294a:	4618      	mov	r0, r3
 800294c:	3724      	adds	r7, #36	; 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002968:	d301      	bcc.n	800296e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800296a:	2301      	movs	r3, #1
 800296c:	e00f      	b.n	800298e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296e:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <SysTick_Config+0x40>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002976:	210f      	movs	r1, #15
 8002978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800297c:	f7ff ff8e 	bl	800289c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <SysTick_Config+0x40>)
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002986:	4b04      	ldr	r3, [pc, #16]	; (8002998 <SysTick_Config+0x40>)
 8002988:	2207      	movs	r2, #7
 800298a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	e000e010 	.word	0xe000e010

0800299c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ff29 	bl	80027fc <__NVIC_SetPriorityGrouping>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b086      	sub	sp, #24
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4603      	mov	r3, r0
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c4:	f7ff ff3e 	bl	8002844 <__NVIC_GetPriorityGrouping>
 80029c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	6978      	ldr	r0, [r7, #20]
 80029d0:	f7ff ff8e 	bl	80028f0 <NVIC_EncodePriority>
 80029d4:	4602      	mov	r2, r0
 80029d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff5d 	bl	800289c <__NVIC_SetPriority>
}
 80029e2:	bf00      	nop
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff31 	bl	8002860 <__NVIC_EnableIRQ>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff ffa2 	bl	8002958 <SysTick_Config>
 8002a14:	4603      	mov	r3, r0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	e159      	b.n	8002cf0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	f040 8148 	bne.w	8002cea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d005      	beq.n	8002a72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d130      	bne.n	8002ad4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 0201 	and.w	r2, r3, #1
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d017      	beq.n	8002b10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	2203      	movs	r2, #3
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d123      	bne.n	8002b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	08da      	lsrs	r2, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3208      	adds	r2, #8
 8002b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	220f      	movs	r2, #15
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	08da      	lsrs	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3208      	adds	r2, #8
 8002b5e:	69b9      	ldr	r1, [r7, #24]
 8002b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2203      	movs	r2, #3
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0203 	and.w	r2, r3, #3
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80a2 	beq.w	8002cea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	4b57      	ldr	r3, [pc, #348]	; (8002d08 <HAL_GPIO_Init+0x2e8>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	4a56      	ldr	r2, [pc, #344]	; (8002d08 <HAL_GPIO_Init+0x2e8>)
 8002bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	4b54      	ldr	r3, [pc, #336]	; (8002d08 <HAL_GPIO_Init+0x2e8>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bc2:	4a52      	ldr	r2, [pc, #328]	; (8002d0c <HAL_GPIO_Init+0x2ec>)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	089b      	lsrs	r3, r3, #2
 8002bc8:	3302      	adds	r3, #2
 8002bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	220f      	movs	r2, #15
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a49      	ldr	r2, [pc, #292]	; (8002d10 <HAL_GPIO_Init+0x2f0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d019      	beq.n	8002c22 <HAL_GPIO_Init+0x202>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a48      	ldr	r2, [pc, #288]	; (8002d14 <HAL_GPIO_Init+0x2f4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <HAL_GPIO_Init+0x1fe>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a47      	ldr	r2, [pc, #284]	; (8002d18 <HAL_GPIO_Init+0x2f8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00d      	beq.n	8002c1a <HAL_GPIO_Init+0x1fa>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a46      	ldr	r2, [pc, #280]	; (8002d1c <HAL_GPIO_Init+0x2fc>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d007      	beq.n	8002c16 <HAL_GPIO_Init+0x1f6>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a45      	ldr	r2, [pc, #276]	; (8002d20 <HAL_GPIO_Init+0x300>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d101      	bne.n	8002c12 <HAL_GPIO_Init+0x1f2>
 8002c0e:	2304      	movs	r3, #4
 8002c10:	e008      	b.n	8002c24 <HAL_GPIO_Init+0x204>
 8002c12:	2307      	movs	r3, #7
 8002c14:	e006      	b.n	8002c24 <HAL_GPIO_Init+0x204>
 8002c16:	2303      	movs	r3, #3
 8002c18:	e004      	b.n	8002c24 <HAL_GPIO_Init+0x204>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e002      	b.n	8002c24 <HAL_GPIO_Init+0x204>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <HAL_GPIO_Init+0x204>
 8002c22:	2300      	movs	r3, #0
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	f002 0203 	and.w	r2, r2, #3
 8002c2a:	0092      	lsls	r2, r2, #2
 8002c2c:	4093      	lsls	r3, r2
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c34:	4935      	ldr	r1, [pc, #212]	; (8002d0c <HAL_GPIO_Init+0x2ec>)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c42:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <HAL_GPIO_Init+0x304>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c66:	4a2f      	ldr	r2, [pc, #188]	; (8002d24 <HAL_GPIO_Init+0x304>)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c6c:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <HAL_GPIO_Init+0x304>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c90:	4a24      	ldr	r2, [pc, #144]	; (8002d24 <HAL_GPIO_Init+0x304>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c96:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <HAL_GPIO_Init+0x304>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cba:	4a1a      	ldr	r2, [pc, #104]	; (8002d24 <HAL_GPIO_Init+0x304>)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cc0:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <HAL_GPIO_Init+0x304>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ce4:	4a0f      	ldr	r2, [pc, #60]	; (8002d24 <HAL_GPIO_Init+0x304>)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3301      	adds	r3, #1
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b0f      	cmp	r3, #15
 8002cf4:	f67f aea2 	bls.w	8002a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	3724      	adds	r7, #36	; 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40013800 	.word	0x40013800
 8002d10:	40020000 	.word	0x40020000
 8002d14:	40020400 	.word	0x40020400
 8002d18:	40020800 	.word	0x40020800
 8002d1c:	40020c00 	.word	0x40020c00
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40013c00 	.word	0x40013c00

08002d28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	887b      	ldrh	r3, [r7, #2]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
 8002d44:	e001      	b.n	8002d4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d46:	2300      	movs	r3, #0
 8002d48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	807b      	strh	r3, [r7, #2]
 8002d64:	4613      	mov	r3, r2
 8002d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d68:	787b      	ldrb	r3, [r7, #1]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d74:	e003      	b.n	8002d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d76:	887b      	ldrh	r3, [r7, #2]
 8002d78:	041a      	lsls	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	619a      	str	r2, [r3, #24]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d9c:	887a      	ldrh	r2, [r7, #2]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4013      	ands	r3, r2
 8002da2:	041a      	lsls	r2, r3, #16
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	43d9      	mvns	r1, r3
 8002da8:	887b      	ldrh	r3, [r7, #2]
 8002daa:	400b      	ands	r3, r1
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	619a      	str	r2, [r3, #24]
}
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d006      	beq.n	8002de4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dd6:	4a05      	ldr	r2, [pc, #20]	; (8002dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff f882 	bl	8001ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40013c00 	.word	0x40013c00

08002df0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e059      	b.n	8002eb6 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d106      	bne.n	8002e22 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f008 fa1b 	bl	800b258 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2203      	movs	r2, #3
 8002e26:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e30:	d102      	bne.n	8002e38 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f005 f8c2 	bl	8007fc6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	7c1a      	ldrb	r2, [r3, #16]
 8002e4a:	f88d 2000 	strb.w	r2, [sp]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e52:	f005 f843 	bl	8007edc <USB_CoreInit>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e026      	b.n	8002eb6 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f005 f8ba 	bl	8007fe8 <USB_SetCurrentMode>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e017      	b.n	8002eb6 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	7c1a      	ldrb	r2, [r3, #16]
 8002e8e:	f88d 2000 	strb.w	r2, [sp]
 8002e92:	3304      	adds	r3, #4
 8002e94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e96:	f005 fa5d 	bl	8008354 <USB_HostInit>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e004      	b.n	8002eb6 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002ebe:	b590      	push	{r4, r7, lr}
 8002ec0:	b08b      	sub	sp, #44	; 0x2c
 8002ec2:	af04      	add	r7, sp, #16
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	4608      	mov	r0, r1
 8002ec8:	4611      	mov	r1, r2
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4603      	mov	r3, r0
 8002ece:	70fb      	strb	r3, [r7, #3]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	70bb      	strb	r3, [r7, #2]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002ed8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002eda:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_HCD_HC_Init+0x2c>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e09d      	b.n	8003026 <HAL_HCD_HC_Init+0x168>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	3319      	adds	r3, #25
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	3314      	adds	r3, #20
 8002f16:	787a      	ldrb	r2, [r7, #1]
 8002f18:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	3315      	adds	r3, #21
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3326      	adds	r3, #38	; 0x26
 8002f3e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002f42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	78bb      	ldrb	r3, [r7, #2]
 8002f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f4c:	b2d8      	uxtb	r0, r3
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	3316      	adds	r3, #22
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	4619      	mov	r1, r3
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fbc7 	bl	80036f8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002f6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	da0a      	bge.n	8002f88 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	3317      	adds	r3, #23
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	e009      	b.n	8002f9c <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	3317      	adds	r3, #23
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f005 fb25 	bl	80085f0 <USB_GetHostSpeed>
 8002fa6:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002fa8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d10b      	bne.n	8002fc8 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002fb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d107      	bne.n	8002fc8 <HAL_HCD_HC_Init+0x10a>
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d104      	bne.n	8002fc8 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2bbc      	cmp	r3, #188	; 0xbc
 8002fc2:	d901      	bls.n	8002fc8 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002fc4:	23bc      	movs	r3, #188	; 0xbc
 8002fc6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3318      	adds	r3, #24
 8002fd8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002fdc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	b298      	uxth	r0, r3
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	3328      	adds	r3, #40	; 0x28
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	787c      	ldrb	r4, [r7, #1]
 8003000:	78ba      	ldrb	r2, [r7, #2]
 8003002:	78f9      	ldrb	r1, [r7, #3]
 8003004:	9302      	str	r3, [sp, #8]
 8003006:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800300a:	9301      	str	r3, [sp, #4]
 800300c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	4623      	mov	r3, r4
 8003014:	f005 fb14 	bl	8008640 <USB_HC_Init>
 8003018:	4603      	mov	r3, r0
 800301a:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
}
 8003026:	4618      	mov	r0, r3
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	bd90      	pop	{r4, r7, pc}

0800302e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	460b      	mov	r3, r1
 8003038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_HCD_HC_Halt+0x1e>
 8003048:	2302      	movs	r3, #2
 800304a:	e00f      	b.n	800306c <HAL_HCD_HC_Halt+0x3e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f005 fe5a 	bl	8008d16 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800306a:	7bfb      	ldrb	r3, [r7, #15]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	4608      	mov	r0, r1
 800307e:	4611      	mov	r1, r2
 8003080:	461a      	mov	r2, r3
 8003082:	4603      	mov	r3, r0
 8003084:	70fb      	strb	r3, [r7, #3]
 8003086:	460b      	mov	r3, r1
 8003088:	70bb      	strb	r3, [r7, #2]
 800308a:	4613      	mov	r3, r2
 800308c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	3317      	adds	r3, #23
 800309e:	78ba      	ldrb	r2, [r7, #2]
 80030a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	3326      	adds	r3, #38	; 0x26
 80030b2:	787a      	ldrb	r2, [r7, #1]
 80030b4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80030b6:	7c3b      	ldrb	r3, [r7, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d114      	bne.n	80030e6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	332a      	adds	r3, #42	; 0x2a
 80030cc:	2203      	movs	r2, #3
 80030ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	3319      	adds	r3, #25
 80030e0:	7f3a      	ldrb	r2, [r7, #28]
 80030e2:	701a      	strb	r2, [r3, #0]
 80030e4:	e009      	b.n	80030fa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	332a      	adds	r3, #42	; 0x2a
 80030f6:	2202      	movs	r2, #2
 80030f8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80030fa:	787b      	ldrb	r3, [r7, #1]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	f200 8102 	bhi.w	8003306 <HAL_HCD_HC_SubmitRequest+0x292>
 8003102:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	08003119 	.word	0x08003119
 800310c:	080032f1 	.word	0x080032f1
 8003110:	080031dd 	.word	0x080031dd
 8003114:	08003267 	.word	0x08003267
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003118:	7c3b      	ldrb	r3, [r7, #16]
 800311a:	2b01      	cmp	r3, #1
 800311c:	f040 80f5 	bne.w	800330a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003120:	78bb      	ldrb	r3, [r7, #2]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d12d      	bne.n	8003182 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003126:	8b3b      	ldrh	r3, [r7, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d109      	bne.n	8003140 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	333d      	adds	r3, #61	; 0x3d
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	333d      	adds	r3, #61	; 0x3d
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	332a      	adds	r3, #42	; 0x2a
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800316a:	e0ce      	b.n	800330a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	332a      	adds	r3, #42	; 0x2a
 800317c:	2202      	movs	r2, #2
 800317e:	701a      	strb	r2, [r3, #0]
      break;
 8003180:	e0c3      	b.n	800330a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	331a      	adds	r3, #26
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 80b8 	bne.w	800330a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	333c      	adds	r3, #60	; 0x3c
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	332a      	adds	r3, #42	; 0x2a
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
      break;
 80031c4:	e0a1      	b.n	800330a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	332a      	adds	r3, #42	; 0x2a
 80031d6:	2202      	movs	r2, #2
 80031d8:	701a      	strb	r2, [r3, #0]
      break;
 80031da:	e096      	b.n	800330a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80031dc:	78bb      	ldrb	r3, [r7, #2]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d120      	bne.n	8003224 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	333d      	adds	r3, #61	; 0x3d
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10a      	bne.n	800320e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	332a      	adds	r3, #42	; 0x2a
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800320c:	e07e      	b.n	800330c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	332a      	adds	r3, #42	; 0x2a
 800321e:	2202      	movs	r2, #2
 8003220:	701a      	strb	r2, [r3, #0]
      break;
 8003222:	e073      	b.n	800330c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	333c      	adds	r3, #60	; 0x3c
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10a      	bne.n	8003250 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800323a:	78fa      	ldrb	r2, [r7, #3]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	332a      	adds	r3, #42	; 0x2a
 800324a:	2200      	movs	r2, #0
 800324c:	701a      	strb	r2, [r3, #0]
      break;
 800324e:	e05d      	b.n	800330c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	332a      	adds	r3, #42	; 0x2a
 8003260:	2202      	movs	r2, #2
 8003262:	701a      	strb	r2, [r3, #0]
      break;
 8003264:	e052      	b.n	800330c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003266:	78bb      	ldrb	r3, [r7, #2]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d120      	bne.n	80032ae <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	333d      	adds	r3, #61	; 0x3d
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10a      	bne.n	8003298 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	332a      	adds	r3, #42	; 0x2a
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003296:	e039      	b.n	800330c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	332a      	adds	r3, #42	; 0x2a
 80032a8:	2202      	movs	r2, #2
 80032aa:	701a      	strb	r2, [r3, #0]
      break;
 80032ac:	e02e      	b.n	800330c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	333c      	adds	r3, #60	; 0x3c
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10a      	bne.n	80032da <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	332a      	adds	r3, #42	; 0x2a
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
      break;
 80032d8:	e018      	b.n	800330c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	332a      	adds	r3, #42	; 0x2a
 80032ea:	2202      	movs	r2, #2
 80032ec:	701a      	strb	r2, [r3, #0]
      break;
 80032ee:	e00d      	b.n	800330c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032f0:	78fa      	ldrb	r2, [r7, #3]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	1a9b      	subs	r3, r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	332a      	adds	r3, #42	; 0x2a
 8003300:	2200      	movs	r2, #0
 8003302:	701a      	strb	r2, [r3, #0]
      break;
 8003304:	e002      	b.n	800330c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003306:	bf00      	nop
 8003308:	e000      	b.n	800330c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800330a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	332c      	adds	r3, #44	; 0x2c
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	8b39      	ldrh	r1, [r7, #24]
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4403      	add	r3, r0
 8003330:	3334      	adds	r3, #52	; 0x34
 8003332:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	334c      	adds	r3, #76	; 0x4c
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	3338      	adds	r3, #56	; 0x38
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	3315      	adds	r3, #21
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	334d      	adds	r3, #77	; 0x4d
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	3310      	adds	r3, #16
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	1d19      	adds	r1, r3, #4
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	799b      	ldrb	r3, [r3, #6]
 800339e:	461a      	mov	r2, r3
 80033a0:	f005 fa64 	bl	800886c <USB_HC_StartXfer>
 80033a4:	4603      	mov	r3, r0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop

080033b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f004 ff84 	bl	80082d4 <USB_GetMode>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	f040 80fb 	bne.w	80035ca <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f004 ff47 	bl	800826c <USB_ReadInterrupts>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80f1 	beq.w	80035c8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f004 ff3e 	bl	800826c <USB_ReadInterrupts>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033fa:	d104      	bne.n	8003406 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003404:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f004 ff2e 	bl	800826c <USB_ReadInterrupts>
 8003410:	4603      	mov	r3, r0
 8003412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800341a:	d104      	bne.n	8003426 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003424:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f004 ff1e 	bl	800826c <USB_ReadInterrupts>
 8003430:	4603      	mov	r3, r0
 8003432:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003436:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800343a:	d104      	bne.n	8003446 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003444:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f004 ff0e 	bl	800826c <USB_ReadInterrupts>
 8003450:	4603      	mov	r3, r0
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b02      	cmp	r3, #2
 8003458:	d103      	bne.n	8003462 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2202      	movs	r2, #2
 8003460:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f004 ff00 	bl	800826c <USB_ReadInterrupts>
 800346c:	4603      	mov	r3, r0
 800346e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003476:	d120      	bne.n	80034ba <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003480:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d113      	bne.n	80034ba <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003492:	2110      	movs	r1, #16
 8003494:	6938      	ldr	r0, [r7, #16]
 8003496:	f004 fdf3 	bl	8008080 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800349a:	6938      	ldr	r0, [r7, #16]
 800349c:	f004 fe22 	bl	80080e4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	7a5b      	ldrb	r3, [r3, #9]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d105      	bne.n	80034b4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2101      	movs	r1, #1
 80034ae:	4618      	mov	r0, r3
 80034b0:	f004 fffe 	bl	80084b0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f007 ff4d 	bl	800b354 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f004 fed4 	bl	800826c <USB_ReadInterrupts>
 80034c4:	4603      	mov	r3, r0
 80034c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ce:	d102      	bne.n	80034d6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f001 fd33 	bl	8004f3c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f004 fec6 	bl	800826c <USB_ReadInterrupts>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d106      	bne.n	80034f8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f007 ff16 	bl	800b31c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2208      	movs	r2, #8
 80034f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f004 feb5 	bl	800826c <USB_ReadInterrupts>
 8003502:	4603      	mov	r3, r0
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800350c:	d139      	bne.n	8003582 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f005 fbee 	bl	8008cf4 <USB_HC_ReadInterrupt>
 8003518:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	e025      	b.n	800356c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d018      	beq.n	8003566 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800354a:	d106      	bne.n	800355a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	4619      	mov	r1, r3
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f905 	bl	8003762 <HCD_HC_IN_IRQHandler>
 8003558:	e005      	b.n	8003566 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	4619      	mov	r1, r3
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 ff67 	bl	8004434 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	3301      	adds	r3, #1
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	795b      	ldrb	r3, [r3, #5]
 8003570:	461a      	mov	r2, r3
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	4293      	cmp	r3, r2
 8003576:	d3d3      	bcc.n	8003520 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003580:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f004 fe70 	bl	800826c <USB_ReadInterrupts>
 800358c:	4603      	mov	r3, r0
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b10      	cmp	r3, #16
 8003594:	d101      	bne.n	800359a <HAL_HCD_IRQHandler+0x1ea>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <HAL_HCD_IRQHandler+0x1ec>
 800359a:	2300      	movs	r3, #0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d014      	beq.n	80035ca <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0210 	bic.w	r2, r2, #16
 80035ae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f001 fbe4 	bl	8004d7e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699a      	ldr	r2, [r3, #24]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0210 	orr.w	r2, r2, #16
 80035c4:	619a      	str	r2, [r3, #24]
 80035c6:	e000      	b.n	80035ca <HAL_HCD_IRQHandler+0x21a>
      return;
 80035c8:	bf00      	nop
    }
  }
}
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_HCD_Start+0x16>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e013      	b.n	800360e <HAL_HCD_Start+0x3e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2101      	movs	r1, #1
 80035f4:	4618      	mov	r0, r3
 80035f6:	f004 ffc2 	bl	800857e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f004 fcd0 	bl	8007fa4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_HCD_Stop+0x16>
 8003628:	2302      	movs	r3, #2
 800362a:	e00d      	b.n	8003648 <HAL_HCD_Stop+0x32>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f005 fc8c 	bl	8008f56 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f004 ff64 	bl	800852a <USB_ResetPort>
 8003662:	4603      	mov	r3, r0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	334c      	adds	r3, #76	; 0x4c
 8003688:	781b      	ldrb	r3, [r3, #0]
}
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	460b      	mov	r3, r1
 80036a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	3338      	adds	r3, #56	; 0x38
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f004 ffa6 	bl	800861e <USB_GetCurrentFrame>
 80036d2:	4603      	mov	r3, r0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f004 ff81 	bl	80085f0 <USB_GetHostSpeed>
 80036ee:	4603      	mov	r3, r0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	331a      	adds	r3, #26
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	331b      	adds	r3, #27
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800372c:	78fa      	ldrb	r2, [r7, #3]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	3325      	adds	r3, #37	; 0x25
 800373c:	2200      	movs	r2, #0
 800373e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003740:	78fa      	ldrb	r2, [r7, #3]
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	4613      	mov	r3, r2
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	3324      	adds	r3, #36	; 0x24
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b086      	sub	sp, #24
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	460b      	mov	r3, r1
 800376c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f004 fd86 	bl	8008292 <USB_ReadChInterrupts>
 8003786:	4603      	mov	r3, r0
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b04      	cmp	r3, #4
 800378e:	d11a      	bne.n	80037c6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4413      	add	r3, r2
 8003798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379c:	461a      	mov	r2, r3
 800379e:	2304      	movs	r3, #4
 80037a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	334d      	adds	r3, #77	; 0x4d
 80037b2:	2207      	movs	r2, #7
 80037b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	4611      	mov	r1, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	f005 faa9 	bl	8008d16 <USB_HC_Halt>
 80037c4:	e09e      	b.n	8003904 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	4611      	mov	r1, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f004 fd5f 	bl	8008292 <USB_ReadChInterrupts>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037de:	d11b      	bne.n	8003818 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ec:	461a      	mov	r2, r3
 80037ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	334d      	adds	r3, #77	; 0x4d
 8003804:	2208      	movs	r2, #8
 8003806:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	4611      	mov	r1, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f005 fa80 	bl	8008d16 <USB_HC_Halt>
 8003816:	e075      	b.n	8003904 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f004 fd36 	bl	8008292 <USB_ReadChInterrupts>
 8003826:	4603      	mov	r3, r0
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b08      	cmp	r3, #8
 800382e:	d11a      	bne.n	8003866 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4413      	add	r3, r2
 8003838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383c:	461a      	mov	r2, r3
 800383e:	2308      	movs	r3, #8
 8003840:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	334d      	adds	r3, #77	; 0x4d
 8003852:	2206      	movs	r2, #6
 8003854:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f005 fa59 	bl	8008d16 <USB_HC_Halt>
 8003864:	e04e      	b.n	8003904 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	78fa      	ldrb	r2, [r7, #3]
 800386c:	4611      	mov	r1, r2
 800386e:	4618      	mov	r0, r3
 8003870:	f004 fd0f 	bl	8008292 <USB_ReadChInterrupts>
 8003874:	4603      	mov	r3, r0
 8003876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387e:	d11b      	bne.n	80038b8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4413      	add	r3, r2
 8003888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388c:	461a      	mov	r2, r3
 800388e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003892:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	334d      	adds	r3, #77	; 0x4d
 80038a4:	2209      	movs	r2, #9
 80038a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	4611      	mov	r1, r2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f005 fa30 	bl	8008d16 <USB_HC_Halt>
 80038b6:	e025      	b.n	8003904 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	78fa      	ldrb	r2, [r7, #3]
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f004 fce6 	bl	8008292 <USB_ReadChInterrupts>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038cc:	2b80      	cmp	r3, #128	; 0x80
 80038ce:	d119      	bne.n	8003904 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038dc:	461a      	mov	r2, r3
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	334d      	adds	r3, #77	; 0x4d
 80038f2:	2207      	movs	r2, #7
 80038f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	78fa      	ldrb	r2, [r7, #3]
 80038fc:	4611      	mov	r1, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	f005 fa09 	bl	8008d16 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	78fa      	ldrb	r2, [r7, #3]
 800390a:	4611      	mov	r1, r2
 800390c:	4618      	mov	r0, r3
 800390e:	f004 fcc0 	bl	8008292 <USB_ReadChInterrupts>
 8003912:	4603      	mov	r3, r0
 8003914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391c:	d112      	bne.n	8003944 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f005 f9f5 	bl	8008d16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4413      	add	r3, r2
 8003934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003938:	461a      	mov	r2, r3
 800393a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800393e:	6093      	str	r3, [r2, #8]
 8003940:	f000 bd75 	b.w	800442e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	4611      	mov	r1, r2
 800394c:	4618      	mov	r0, r3
 800394e:	f004 fca0 	bl	8008292 <USB_ReadChInterrupts>
 8003952:	4603      	mov	r3, r0
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b01      	cmp	r3, #1
 800395a:	f040 8128 	bne.w	8003bae <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4413      	add	r3, r2
 8003966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396a:	461a      	mov	r2, r3
 800396c:	2320      	movs	r3, #32
 800396e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003970:	78fa      	ldrb	r2, [r7, #3]
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	331b      	adds	r3, #27
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d119      	bne.n	80039ba <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003986:	78fa      	ldrb	r2, [r7, #3]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	1a9b      	subs	r3, r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	331b      	adds	r3, #27
 8003996:	2200      	movs	r2, #0
 8003998:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	0151      	lsls	r1, r2, #5
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	440a      	add	r2, r1
 80039b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	799b      	ldrb	r3, [r3, #6]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d01b      	beq.n	80039fa <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80039c2:	78fa      	ldrb	r2, [r7, #3]
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	4613      	mov	r3, r2
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	1a9b      	subs	r3, r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	3330      	adds	r3, #48	; 0x30
 80039d2:	6819      	ldr	r1, [r3, #0]
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	1ac9      	subs	r1, r1, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4403      	add	r3, r0
 80039f6:	3338      	adds	r3, #56	; 0x38
 80039f8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80039fa:	78fa      	ldrb	r2, [r7, #3]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	1a9b      	subs	r3, r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	334d      	adds	r3, #77	; 0x4d
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003a0e:	78fa      	ldrb	r2, [r7, #3]
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	3344      	adds	r3, #68	; 0x44
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003a22:	78fb      	ldrb	r3, [r7, #3]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2e:	461a      	mov	r2, r3
 8003a30:	2301      	movs	r3, #1
 8003a32:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	3326      	adds	r3, #38	; 0x26
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a4a:	78fa      	ldrb	r2, [r7, #3]
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	1a9b      	subs	r3, r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	3326      	adds	r3, #38	; 0x26
 8003a5a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d110      	bne.n	8003a82 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	4611      	mov	r1, r2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f005 f954 	bl	8008d16 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	6093      	str	r3, [r2, #8]
 8003a80:	e03d      	b.n	8003afe <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003a82:	78fa      	ldrb	r2, [r7, #3]
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	3326      	adds	r3, #38	; 0x26
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d00a      	beq.n	8003aae <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	3326      	adds	r3, #38	; 0x26
 8003aa8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d127      	bne.n	8003afe <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	0151      	lsls	r1, r2, #5
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	440a      	add	r2, r1
 8003ac4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ac8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003acc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003ace:	78fa      	ldrb	r2, [r7, #3]
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	1a9b      	subs	r3, r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	334c      	adds	r3, #76	; 0x4c
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003ae2:	78fa      	ldrb	r2, [r7, #3]
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	334c      	adds	r3, #76	; 0x4c
 8003af2:	781a      	ldrb	r2, [r3, #0]
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	4619      	mov	r1, r3
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f007 fc39 	bl	800b370 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	799b      	ldrb	r3, [r3, #6]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d13b      	bne.n	8003b7e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003b06:	78fa      	ldrb	r2, [r7, #3]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	3338      	adds	r3, #56	; 0x38
 8003b16:	6819      	ldr	r1, [r3, #0]
 8003b18:	78fa      	ldrb	r2, [r7, #3]
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4403      	add	r3, r0
 8003b26:	3328      	adds	r3, #40	; 0x28
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	440b      	add	r3, r1
 8003b2c:	1e59      	subs	r1, r3, #1
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4403      	add	r3, r0
 8003b3c:	3328      	adds	r3, #40	; 0x28
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8470 	beq.w	800442e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	333c      	adds	r3, #60	; 0x3c
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	f083 0301 	eor.w	r3, r3, #1
 8003b66:	b2d8      	uxtb	r0, r3
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	333c      	adds	r3, #60	; 0x3c
 8003b76:	4602      	mov	r2, r0
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	f000 bc58 	b.w	800442e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	333c      	adds	r3, #60	; 0x3c
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	78fa      	ldrb	r2, [r7, #3]
 8003b92:	f083 0301 	eor.w	r3, r3, #1
 8003b96:	b2d8      	uxtb	r0, r3
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	333c      	adds	r3, #60	; 0x3c
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	701a      	strb	r2, [r3, #0]
 8003baa:	f000 bc40 	b.w	800442e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f004 fb6b 	bl	8008292 <USB_ReadChInterrupts>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b20      	cmp	r3, #32
 8003bc4:	d131      	bne.n	8003c2a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	2320      	movs	r3, #32
 8003bd6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003bd8:	78fa      	ldrb	r2, [r7, #3]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	331a      	adds	r3, #26
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	f040 841f 	bne.w	800442e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	331b      	adds	r3, #27
 8003c00:	2201      	movs	r2, #1
 8003c02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003c04:	78fa      	ldrb	r2, [r7, #3]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	334d      	adds	r3, #77	; 0x4d
 8003c14:	2203      	movs	r2, #3
 8003c16:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	78fa      	ldrb	r2, [r7, #3]
 8003c1e:	4611      	mov	r1, r2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f005 f878 	bl	8008d16 <USB_HC_Halt>
 8003c26:	f000 bc02 	b.w	800442e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	78fa      	ldrb	r2, [r7, #3]
 8003c30:	4611      	mov	r1, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f004 fb2d 	bl	8008292 <USB_ReadChInterrupts>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	f040 8305 	bne.w	800424e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c50:	461a      	mov	r2, r3
 8003c52:	2302      	movs	r3, #2
 8003c54:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	334d      	adds	r3, #77	; 0x4d
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d114      	bne.n	8003c96 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c6c:	78fa      	ldrb	r2, [r7, #3]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	334d      	adds	r3, #77	; 0x4d
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003c80:	78fa      	ldrb	r2, [r7, #3]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	334c      	adds	r3, #76	; 0x4c
 8003c90:	2201      	movs	r2, #1
 8003c92:	701a      	strb	r2, [r3, #0]
 8003c94:	e2cc      	b.n	8004230 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003c96:	78fa      	ldrb	r2, [r7, #3]
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	1a9b      	subs	r3, r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	334d      	adds	r3, #77	; 0x4d
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b06      	cmp	r3, #6
 8003caa:	d114      	bne.n	8003cd6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	334d      	adds	r3, #77	; 0x4d
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	334c      	adds	r3, #76	; 0x4c
 8003cd0:	2205      	movs	r2, #5
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	e2ac      	b.n	8004230 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003cd6:	78fa      	ldrb	r2, [r7, #3]
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	334d      	adds	r3, #77	; 0x4d
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b07      	cmp	r3, #7
 8003cea:	d00b      	beq.n	8003d04 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003cec:	78fa      	ldrb	r2, [r7, #3]
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	334d      	adds	r3, #77	; 0x4d
 8003cfc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003cfe:	2b09      	cmp	r3, #9
 8003d00:	f040 80a6 	bne.w	8003e50 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	334d      	adds	r3, #77	; 0x4d
 8003d14:	2202      	movs	r2, #2
 8003d16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003d18:	78fa      	ldrb	r2, [r7, #3]
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	3344      	adds	r3, #68	; 0x44
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	1c59      	adds	r1, r3, #1
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4403      	add	r3, r0
 8003d38:	3344      	adds	r3, #68	; 0x44
 8003d3a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	3344      	adds	r3, #68	; 0x44
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d943      	bls.n	8003dda <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	3344      	adds	r3, #68	; 0x44
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	331a      	adds	r3, #26
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d123      	bne.n	8003dc4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	331b      	adds	r3, #27
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003d90:	78fa      	ldrb	r2, [r7, #3]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	331c      	adds	r3, #28
 8003da0:	2200      	movs	r2, #0
 8003da2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	0151      	lsls	r1, r2, #5
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	440a      	add	r2, r1
 8003dba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003dc4:	78fa      	ldrb	r2, [r7, #3]
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	334c      	adds	r3, #76	; 0x4c
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003dd8:	e229      	b.n	800422e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003dda:	78fa      	ldrb	r2, [r7, #3]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	334c      	adds	r3, #76	; 0x4c
 8003dea:	2202      	movs	r2, #2
 8003dec:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003dee:	78fa      	ldrb	r2, [r7, #3]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	3326      	adds	r3, #38	; 0x26
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00b      	beq.n	8003e1c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	3326      	adds	r3, #38	; 0x26
 8003e14:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	f040 8209 	bne.w	800422e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e32:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e3a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e4e:	e1ee      	b.n	800422e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003e50:	78fa      	ldrb	r2, [r7, #3]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	334d      	adds	r3, #77	; 0x4d
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b05      	cmp	r3, #5
 8003e64:	f040 80c8 	bne.w	8003ff8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	334d      	adds	r3, #77	; 0x4d
 8003e78:	2202      	movs	r2, #2
 8003e7a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e7c:	78fa      	ldrb	r2, [r7, #3]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	331b      	adds	r3, #27
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	f040 81ce 	bne.w	8004230 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003e94:	78fa      	ldrb	r2, [r7, #3]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	3326      	adds	r3, #38	; 0x26
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d16b      	bne.n	8003f82 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003eaa:	78fa      	ldrb	r2, [r7, #3]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	3348      	adds	r3, #72	; 0x48
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	1c59      	adds	r1, r3, #1
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4403      	add	r3, r0
 8003eca:	3348      	adds	r3, #72	; 0x48
 8003ecc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003ece:	78fa      	ldrb	r2, [r7, #3]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	3348      	adds	r3, #72	; 0x48
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d943      	bls.n	8003f6c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	3348      	adds	r3, #72	; 0x48
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	331b      	adds	r3, #27
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003f0c:	78fa      	ldrb	r2, [r7, #3]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	3344      	adds	r3, #68	; 0x44
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d809      	bhi.n	8003f36 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	331c      	adds	r3, #28
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003f36:	78fb      	ldrb	r3, [r7, #3]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	0151      	lsls	r1, r2, #5
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	440a      	add	r2, r1
 8003f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f54:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f56:	78fa      	ldrb	r2, [r7, #3]
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	334c      	adds	r3, #76	; 0x4c
 8003f66:	2204      	movs	r2, #4
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	e014      	b.n	8003f96 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f6c:	78fa      	ldrb	r2, [r7, #3]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	4613      	mov	r3, r2
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	334c      	adds	r3, #76	; 0x4c
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	e009      	b.n	8003f96 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	334c      	adds	r3, #76	; 0x4c
 8003f92:	2202      	movs	r2, #2
 8003f94:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f96:	78fa      	ldrb	r2, [r7, #3]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3326      	adds	r3, #38	; 0x26
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00b      	beq.n	8003fc4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003fac:	78fa      	ldrb	r2, [r7, #3]
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	3326      	adds	r3, #38	; 0x26
 8003fbc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	f040 8136 	bne.w	8004230 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fda:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fe2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fe4:	78fb      	ldrb	r3, [r7, #3]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e11b      	b.n	8004230 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003ff8:	78fa      	ldrb	r2, [r7, #3]
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	1a9b      	subs	r3, r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	334d      	adds	r3, #77	; 0x4d
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b03      	cmp	r3, #3
 800400c:	f040 8081 	bne.w	8004112 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	334d      	adds	r3, #77	; 0x4d
 8004020:	2202      	movs	r2, #2
 8004022:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004024:	78fa      	ldrb	r2, [r7, #3]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	331b      	adds	r3, #27
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b01      	cmp	r3, #1
 8004038:	f040 80fa 	bne.w	8004230 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	334c      	adds	r3, #76	; 0x4c
 800404c:	2202      	movs	r2, #2
 800404e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4413      	add	r3, r2
 8004058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	0151      	lsls	r1, r2, #5
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	440a      	add	r2, r1
 8004066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800406a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4413      	add	r3, r2
 8004078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	78fa      	ldrb	r2, [r7, #3]
 8004080:	0151      	lsls	r1, r2, #5
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	440a      	add	r2, r1
 8004086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800408a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800408e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4413      	add	r3, r2
 8004098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	0151      	lsls	r1, r2, #5
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	440a      	add	r2, r1
 80040a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040aa:	f023 0320 	bic.w	r3, r3, #32
 80040ae:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040b0:	78fa      	ldrb	r2, [r7, #3]
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	3326      	adds	r3, #38	; 0x26
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00b      	beq.n	80040de <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	1a9b      	subs	r3, r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	3326      	adds	r3, #38	; 0x26
 80040d6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040d8:	2b02      	cmp	r3, #2
 80040da:	f040 80a9 	bne.w	8004230 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80040de:	78fb      	ldrb	r3, [r7, #3]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040f4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040fc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4413      	add	r3, r2
 8004106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410a:	461a      	mov	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	e08e      	b.n	8004230 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004112:	78fa      	ldrb	r2, [r7, #3]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	334d      	adds	r3, #77	; 0x4d
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b04      	cmp	r3, #4
 8004126:	d143      	bne.n	80041b0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004128:	78fa      	ldrb	r2, [r7, #3]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	334d      	adds	r3, #77	; 0x4d
 8004138:	2202      	movs	r2, #2
 800413a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800413c:	78fa      	ldrb	r2, [r7, #3]
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	334c      	adds	r3, #76	; 0x4c
 800414c:	2202      	movs	r2, #2
 800414e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004150:	78fa      	ldrb	r2, [r7, #3]
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	4613      	mov	r3, r2
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	3326      	adds	r3, #38	; 0x26
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004166:	78fa      	ldrb	r2, [r7, #3]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	3326      	adds	r3, #38	; 0x26
 8004176:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004178:	2b02      	cmp	r3, #2
 800417a:	d159      	bne.n	8004230 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4413      	add	r3, r2
 8004184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004192:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800419a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800419c:	78fb      	ldrb	r3, [r7, #3]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a8:	461a      	mov	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e03f      	b.n	8004230 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	334d      	adds	r3, #77	; 0x4d
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d126      	bne.n	8004214 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	334d      	adds	r3, #77	; 0x4d
 80041d6:	2202      	movs	r2, #2
 80041d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80041da:	78fa      	ldrb	r2, [r7, #3]
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	3344      	adds	r3, #68	; 0x44
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	1c59      	adds	r1, r3, #1
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4403      	add	r3, r0
 80041fa:	3344      	adds	r3, #68	; 0x44
 80041fc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80041fe:	78fa      	ldrb	r2, [r7, #3]
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	4613      	mov	r3, r2
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	1a9b      	subs	r3, r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	440b      	add	r3, r1
 800420c:	334c      	adds	r3, #76	; 0x4c
 800420e:	2204      	movs	r2, #4
 8004210:	701a      	strb	r2, [r3, #0]
 8004212:	e00d      	b.n	8004230 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004214:	78fa      	ldrb	r2, [r7, #3]
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	1a9b      	subs	r3, r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	334d      	adds	r3, #77	; 0x4d
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b02      	cmp	r3, #2
 8004228:	f000 8100 	beq.w	800442c <HCD_HC_IN_IRQHandler+0xcca>
 800422c:	e000      	b.n	8004230 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800422e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	334c      	adds	r3, #76	; 0x4c
 8004240:	781a      	ldrb	r2, [r3, #0]
 8004242:	78fb      	ldrb	r3, [r7, #3]
 8004244:	4619      	mov	r1, r3
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f007 f892 	bl	800b370 <HAL_HCD_HC_NotifyURBChange_Callback>
 800424c:	e0ef      	b.n	800442e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	78fa      	ldrb	r2, [r7, #3]
 8004254:	4611      	mov	r1, r2
 8004256:	4618      	mov	r0, r3
 8004258:	f004 f81b 	bl	8008292 <USB_ReadChInterrupts>
 800425c:	4603      	mov	r3, r0
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b40      	cmp	r3, #64	; 0x40
 8004264:	d12f      	bne.n	80042c6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4413      	add	r3, r2
 800426e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004272:	461a      	mov	r2, r3
 8004274:	2340      	movs	r3, #64	; 0x40
 8004276:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004278:	78fa      	ldrb	r2, [r7, #3]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	334d      	adds	r3, #77	; 0x4d
 8004288:	2205      	movs	r2, #5
 800428a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	331a      	adds	r3, #26
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80042a2:	78fa      	ldrb	r2, [r7, #3]
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	4613      	mov	r3, r2
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	1a9b      	subs	r3, r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	440b      	add	r3, r1
 80042b0:	3344      	adds	r3, #68	; 0x44
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	78fa      	ldrb	r2, [r7, #3]
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f004 fd29 	bl	8008d16 <USB_HC_Halt>
 80042c4:	e0b3      	b.n	800442e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	78fa      	ldrb	r2, [r7, #3]
 80042cc:	4611      	mov	r1, r2
 80042ce:	4618      	mov	r0, r3
 80042d0:	f003 ffdf 	bl	8008292 <USB_ReadChInterrupts>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f003 0310 	and.w	r3, r3, #16
 80042da:	2b10      	cmp	r3, #16
 80042dc:	f040 80a7 	bne.w	800442e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80042e0:	78fa      	ldrb	r2, [r7, #3]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	3326      	adds	r3, #38	; 0x26
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d11b      	bne.n	800432e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	3344      	adds	r3, #68	; 0x44
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	334d      	adds	r3, #77	; 0x4d
 800431a:	2204      	movs	r2, #4
 800431c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	4611      	mov	r1, r2
 8004326:	4618      	mov	r0, r3
 8004328:	f004 fcf5 	bl	8008d16 <USB_HC_Halt>
 800432c:	e03f      	b.n	80043ae <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800432e:	78fa      	ldrb	r2, [r7, #3]
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	3326      	adds	r3, #38	; 0x26
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004344:	78fa      	ldrb	r2, [r7, #3]
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	3326      	adds	r3, #38	; 0x26
 8004354:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004356:	2b02      	cmp	r3, #2
 8004358:	d129      	bne.n	80043ae <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800435a:	78fa      	ldrb	r2, [r7, #3]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	3344      	adds	r3, #68	; 0x44
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	799b      	ldrb	r3, [r3, #6]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HCD_HC_IN_IRQHandler+0xc2a>
 8004376:	78fa      	ldrb	r2, [r7, #3]
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	4613      	mov	r3, r2
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	1a9b      	subs	r3, r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	440b      	add	r3, r1
 8004384:	331b      	adds	r3, #27
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d110      	bne.n	80043ae <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	334d      	adds	r3, #77	; 0x4d
 800439c:	2204      	movs	r2, #4
 800439e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	4611      	mov	r1, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f004 fcb4 	bl	8008d16 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	331b      	adds	r3, #27
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d129      	bne.n	8004418 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80043c4:	78fa      	ldrb	r2, [r7, #3]
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	1a9b      	subs	r3, r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	331b      	adds	r3, #27
 80043d4:	2200      	movs	r2, #0
 80043d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	78fa      	ldrb	r2, [r7, #3]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	78fa      	ldrb	r2, [r7, #3]
 8004408:	0151      	lsls	r1, r2, #5
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	440a      	add	r2, r1
 800440e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004412:	f043 0320 	orr.w	r3, r3, #32
 8004416:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	4413      	add	r3, r2
 8004420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004424:	461a      	mov	r2, r3
 8004426:	2310      	movs	r3, #16
 8004428:	6093      	str	r3, [r2, #8]
 800442a:	e000      	b.n	800442e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800442c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	78fa      	ldrb	r2, [r7, #3]
 8004450:	4611      	mov	r1, r2
 8004452:	4618      	mov	r0, r3
 8004454:	f003 ff1d 	bl	8008292 <USB_ReadChInterrupts>
 8004458:	4603      	mov	r3, r0
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b04      	cmp	r3, #4
 8004460:	d11b      	bne.n	800449a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4413      	add	r3, r2
 800446a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446e:	461a      	mov	r2, r3
 8004470:	2304      	movs	r3, #4
 8004472:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	334d      	adds	r3, #77	; 0x4d
 8004484:	2207      	movs	r2, #7
 8004486:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	4611      	mov	r1, r2
 8004490:	4618      	mov	r0, r3
 8004492:	f004 fc40 	bl	8008d16 <USB_HC_Halt>
 8004496:	f000 bc6f 	b.w	8004d78 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	4611      	mov	r1, r2
 80044a2:	4618      	mov	r0, r3
 80044a4:	f003 fef5 	bl	8008292 <USB_ReadChInterrupts>
 80044a8:	4603      	mov	r3, r0
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	f040 8082 	bne.w	80045b8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c0:	461a      	mov	r2, r3
 80044c2:	2320      	movs	r3, #32
 80044c4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80044c6:	78fa      	ldrb	r2, [r7, #3]
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	3319      	adds	r3, #25
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d124      	bne.n	8004526 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	3319      	adds	r3, #25
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044f0:	78fa      	ldrb	r2, [r7, #3]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	334c      	adds	r3, #76	; 0x4c
 8004500:	2202      	movs	r2, #2
 8004502:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	334d      	adds	r3, #77	; 0x4d
 8004514:	2203      	movs	r2, #3
 8004516:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	78fa      	ldrb	r2, [r7, #3]
 800451e:	4611      	mov	r1, r2
 8004520:	4618      	mov	r0, r3
 8004522:	f004 fbf8 	bl	8008d16 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004526:	78fa      	ldrb	r2, [r7, #3]
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	4613      	mov	r3, r2
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	1a9b      	subs	r3, r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	440b      	add	r3, r1
 8004534:	331a      	adds	r3, #26
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b01      	cmp	r3, #1
 800453a:	f040 841d 	bne.w	8004d78 <HCD_HC_OUT_IRQHandler+0x944>
 800453e:	78fa      	ldrb	r2, [r7, #3]
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	4613      	mov	r3, r2
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	331b      	adds	r3, #27
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	f040 8411 	bne.w	8004d78 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004556:	78fa      	ldrb	r2, [r7, #3]
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	3326      	adds	r3, #38	; 0x26
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d009      	beq.n	8004580 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	331b      	adds	r3, #27
 800457c:	2201      	movs	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004580:	78fa      	ldrb	r2, [r7, #3]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	334d      	adds	r3, #77	; 0x4d
 8004590:	2203      	movs	r2, #3
 8004592:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	4611      	mov	r1, r2
 800459c:	4618      	mov	r0, r3
 800459e:	f004 fbba 	bl	8008d16 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	3344      	adds	r3, #68	; 0x44
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	e3df      	b.n	8004d78 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	78fa      	ldrb	r2, [r7, #3]
 80045be:	4611      	mov	r1, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f003 fe66 	bl	8008292 <USB_ReadChInterrupts>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045d0:	d111      	bne.n	80045f6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80045d2:	78fb      	ldrb	r3, [r7, #3]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045de:	461a      	mov	r2, r3
 80045e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045e4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	78fa      	ldrb	r2, [r7, #3]
 80045ec:	4611      	mov	r1, r2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f004 fb91 	bl	8008d16 <USB_HC_Halt>
 80045f4:	e3c0      	b.n	8004d78 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f003 fe47 	bl	8008292 <USB_ReadChInterrupts>
 8004604:	4603      	mov	r3, r0
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b01      	cmp	r3, #1
 800460c:	d168      	bne.n	80046e0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	3344      	adds	r3, #68	; 0x44
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	78fa      	ldrb	r2, [r7, #3]
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	f003 fe31 	bl	8008292 <USB_ReadChInterrupts>
 8004630:	4603      	mov	r3, r0
 8004632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004636:	2b40      	cmp	r3, #64	; 0x40
 8004638:	d112      	bne.n	8004660 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800463a:	78fa      	ldrb	r2, [r7, #3]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	3319      	adds	r3, #25
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4413      	add	r3, r2
 8004656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465a:	461a      	mov	r2, r3
 800465c:	2340      	movs	r3, #64	; 0x40
 800465e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004660:	78fa      	ldrb	r2, [r7, #3]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	331b      	adds	r3, #27
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d019      	beq.n	80046aa <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004676:	78fa      	ldrb	r2, [r7, #3]
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	4613      	mov	r3, r2
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	1a9b      	subs	r3, r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	440b      	add	r3, r1
 8004684:	331b      	adds	r3, #27
 8004686:	2200      	movs	r2, #0
 8004688:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800468a:	78fb      	ldrb	r3, [r7, #3]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4413      	add	r3, r2
 8004692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	0151      	lsls	r1, r2, #5
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	440a      	add	r2, r1
 80046a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80046aa:	78fb      	ldrb	r3, [r7, #3]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b6:	461a      	mov	r2, r3
 80046b8:	2301      	movs	r3, #1
 80046ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80046bc:	78fa      	ldrb	r2, [r7, #3]
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	334d      	adds	r3, #77	; 0x4d
 80046cc:	2201      	movs	r2, #1
 80046ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	78fa      	ldrb	r2, [r7, #3]
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f004 fb1c 	bl	8008d16 <USB_HC_Halt>
 80046de:	e34b      	b.n	8004d78 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	78fa      	ldrb	r2, [r7, #3]
 80046e6:	4611      	mov	r1, r2
 80046e8:	4618      	mov	r0, r3
 80046ea:	f003 fdd2 	bl	8008292 <USB_ReadChInterrupts>
 80046ee:	4603      	mov	r3, r0
 80046f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d139      	bne.n	800476c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80046f8:	78fa      	ldrb	r2, [r7, #3]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	334d      	adds	r3, #77	; 0x4d
 8004708:	2205      	movs	r2, #5
 800470a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800470c:	78fa      	ldrb	r2, [r7, #3]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	331a      	adds	r3, #26
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d109      	bne.n	8004736 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004722:	78fa      	ldrb	r2, [r7, #3]
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	1a9b      	subs	r3, r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	3319      	adds	r3, #25
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004736:	78fa      	ldrb	r2, [r7, #3]
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	1a9b      	subs	r3, r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	3344      	adds	r3, #68	; 0x44
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	4611      	mov	r1, r2
 8004752:	4618      	mov	r0, r3
 8004754:	f004 fadf 	bl	8008d16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4413      	add	r3, r2
 8004760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004764:	461a      	mov	r2, r3
 8004766:	2340      	movs	r3, #64	; 0x40
 8004768:	6093      	str	r3, [r2, #8]
 800476a:	e305      	b.n	8004d78 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	78fa      	ldrb	r2, [r7, #3]
 8004772:	4611      	mov	r1, r2
 8004774:	4618      	mov	r0, r3
 8004776:	f003 fd8c 	bl	8008292 <USB_ReadChInterrupts>
 800477a:	4603      	mov	r3, r0
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b08      	cmp	r3, #8
 8004782:	d11a      	bne.n	80047ba <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4413      	add	r3, r2
 800478c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004790:	461a      	mov	r2, r3
 8004792:	2308      	movs	r3, #8
 8004794:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004796:	78fa      	ldrb	r2, [r7, #3]
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	1a9b      	subs	r3, r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	334d      	adds	r3, #77	; 0x4d
 80047a6:	2206      	movs	r2, #6
 80047a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	4611      	mov	r1, r2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f004 faaf 	bl	8008d16 <USB_HC_Halt>
 80047b8:	e2de      	b.n	8004d78 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	78fa      	ldrb	r2, [r7, #3]
 80047c0:	4611      	mov	r1, r2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f003 fd65 	bl	8008292 <USB_ReadChInterrupts>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f003 0310 	and.w	r3, r3, #16
 80047ce:	2b10      	cmp	r3, #16
 80047d0:	d144      	bne.n	800485c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80047d2:	78fa      	ldrb	r2, [r7, #3]
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	1a9b      	subs	r3, r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	3344      	adds	r3, #68	; 0x44
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80047e6:	78fa      	ldrb	r2, [r7, #3]
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	334d      	adds	r3, #77	; 0x4d
 80047f6:	2204      	movs	r2, #4
 80047f8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80047fa:	78fa      	ldrb	r2, [r7, #3]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	3319      	adds	r3, #25
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d114      	bne.n	800483a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004810:	78fa      	ldrb	r2, [r7, #3]
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	3318      	adds	r3, #24
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004826:	78fa      	ldrb	r2, [r7, #3]
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	3319      	adds	r3, #25
 8004836:	2201      	movs	r2, #1
 8004838:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	78fa      	ldrb	r2, [r7, #3]
 8004840:	4611      	mov	r1, r2
 8004842:	4618      	mov	r0, r3
 8004844:	f004 fa67 	bl	8008d16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4413      	add	r3, r2
 8004850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004854:	461a      	mov	r2, r3
 8004856:	2310      	movs	r3, #16
 8004858:	6093      	str	r3, [r2, #8]
 800485a:	e28d      	b.n	8004d78 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	78fa      	ldrb	r2, [r7, #3]
 8004862:	4611      	mov	r1, r2
 8004864:	4618      	mov	r0, r3
 8004866:	f003 fd14 	bl	8008292 <USB_ReadChInterrupts>
 800486a:	4603      	mov	r3, r0
 800486c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004870:	2b80      	cmp	r3, #128	; 0x80
 8004872:	d169      	bne.n	8004948 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	799b      	ldrb	r3, [r3, #6]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d111      	bne.n	80048a0 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800487c:	78fa      	ldrb	r2, [r7, #3]
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	1a9b      	subs	r3, r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	334d      	adds	r3, #77	; 0x4d
 800488c:	2207      	movs	r2, #7
 800488e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	78fa      	ldrb	r2, [r7, #3]
 8004896:	4611      	mov	r1, r2
 8004898:	4618      	mov	r0, r3
 800489a:	f004 fa3c 	bl	8008d16 <USB_HC_Halt>
 800489e:	e049      	b.n	8004934 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	3344      	adds	r3, #68	; 0x44
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	1c59      	adds	r1, r3, #1
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	1a9b      	subs	r3, r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4403      	add	r3, r0
 80048c0:	3344      	adds	r3, #68	; 0x44
 80048c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80048c4:	78fa      	ldrb	r2, [r7, #3]
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	4613      	mov	r3, r2
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	1a9b      	subs	r3, r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	3344      	adds	r3, #68	; 0x44
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d922      	bls.n	8004920 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80048da:	78fa      	ldrb	r2, [r7, #3]
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	3344      	adds	r3, #68	; 0x44
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80048ee:	78fa      	ldrb	r2, [r7, #3]
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	4613      	mov	r3, r2
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	440b      	add	r3, r1
 80048fc:	334c      	adds	r3, #76	; 0x4c
 80048fe:	2204      	movs	r2, #4
 8004900:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004902:	78fa      	ldrb	r2, [r7, #3]
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	334c      	adds	r3, #76	; 0x4c
 8004912:	781a      	ldrb	r2, [r3, #0]
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	4619      	mov	r1, r3
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f006 fd29 	bl	800b370 <HAL_HCD_HC_NotifyURBChange_Callback>
 800491e:	e009      	b.n	8004934 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004920:	78fa      	ldrb	r2, [r7, #3]
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	4613      	mov	r3, r2
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	1a9b      	subs	r3, r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	440b      	add	r3, r1
 800492e:	334c      	adds	r3, #76	; 0x4c
 8004930:	2202      	movs	r2, #2
 8004932:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	4413      	add	r3, r2
 800493c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004940:	461a      	mov	r2, r3
 8004942:	2380      	movs	r3, #128	; 0x80
 8004944:	6093      	str	r3, [r2, #8]
 8004946:	e217      	b.n	8004d78 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	78fa      	ldrb	r2, [r7, #3]
 800494e:	4611      	mov	r1, r2
 8004950:	4618      	mov	r0, r3
 8004952:	f003 fc9e 	bl	8008292 <USB_ReadChInterrupts>
 8004956:	4603      	mov	r3, r0
 8004958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800495c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004960:	d11b      	bne.n	800499a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004962:	78fa      	ldrb	r2, [r7, #3]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	334d      	adds	r3, #77	; 0x4d
 8004972:	2209      	movs	r2, #9
 8004974:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	78fa      	ldrb	r2, [r7, #3]
 800497c:	4611      	mov	r1, r2
 800497e:	4618      	mov	r0, r3
 8004980:	f004 f9c9 	bl	8008d16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	4413      	add	r3, r2
 800498c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004990:	461a      	mov	r2, r3
 8004992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004996:	6093      	str	r3, [r2, #8]
 8004998:	e1ee      	b.n	8004d78 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	78fa      	ldrb	r2, [r7, #3]
 80049a0:	4611      	mov	r1, r2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f003 fc75 	bl	8008292 <USB_ReadChInterrupts>
 80049a8:	4603      	mov	r3, r0
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	f040 81df 	bne.w	8004d72 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c0:	461a      	mov	r2, r3
 80049c2:	2302      	movs	r3, #2
 80049c4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80049c6:	78fa      	ldrb	r2, [r7, #3]
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	4613      	mov	r3, r2
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	1a9b      	subs	r3, r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	334d      	adds	r3, #77	; 0x4d
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	f040 8093 	bne.w	8004b04 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049de:	78fa      	ldrb	r2, [r7, #3]
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	4613      	mov	r3, r2
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	1a9b      	subs	r3, r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	334d      	adds	r3, #77	; 0x4d
 80049ee:	2202      	movs	r2, #2
 80049f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80049f2:	78fa      	ldrb	r2, [r7, #3]
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	440b      	add	r3, r1
 8004a00:	334c      	adds	r3, #76	; 0x4c
 8004a02:	2201      	movs	r2, #1
 8004a04:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004a06:	78fa      	ldrb	r2, [r7, #3]
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	1a9b      	subs	r3, r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	3326      	adds	r3, #38	; 0x26
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d00b      	beq.n	8004a34 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004a1c:	78fa      	ldrb	r2, [r7, #3]
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	4613      	mov	r3, r2
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	1a9b      	subs	r3, r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	3326      	adds	r3, #38	; 0x26
 8004a2c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	f040 8190 	bne.w	8004d54 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	799b      	ldrb	r3, [r3, #6]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d115      	bne.n	8004a68 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004a3c:	78fa      	ldrb	r2, [r7, #3]
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	4613      	mov	r3, r2
 8004a42:	011b      	lsls	r3, r3, #4
 8004a44:	1a9b      	subs	r3, r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	333d      	adds	r3, #61	; 0x3d
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	78fa      	ldrb	r2, [r7, #3]
 8004a50:	f083 0301 	eor.w	r3, r3, #1
 8004a54:	b2d8      	uxtb	r0, r3
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	333d      	adds	r3, #61	; 0x3d
 8004a64:	4602      	mov	r2, r0
 8004a66:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	799b      	ldrb	r3, [r3, #6]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	f040 8171 	bne.w	8004d54 <HCD_HC_OUT_IRQHandler+0x920>
 8004a72:	78fa      	ldrb	r2, [r7, #3]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	3334      	adds	r3, #52	; 0x34
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8165 	beq.w	8004d54 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004a8a:	78fa      	ldrb	r2, [r7, #3]
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	1a9b      	subs	r3, r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	440b      	add	r3, r1
 8004a98:	3334      	adds	r3, #52	; 0x34
 8004a9a:	6819      	ldr	r1, [r3, #0]
 8004a9c:	78fa      	ldrb	r2, [r7, #3]
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4403      	add	r3, r0
 8004aaa:	3328      	adds	r3, #40	; 0x28
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	440b      	add	r3, r1
 8004ab0:	1e59      	subs	r1, r3, #1
 8004ab2:	78fa      	ldrb	r2, [r7, #3]
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4403      	add	r3, r0
 8004ac0:	3328      	adds	r3, #40	; 0x28
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ac8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 813f 	beq.w	8004d54 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004ad6:	78fa      	ldrb	r2, [r7, #3]
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	333d      	adds	r3, #61	; 0x3d
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	78fa      	ldrb	r2, [r7, #3]
 8004aea:	f083 0301 	eor.w	r3, r3, #1
 8004aee:	b2d8      	uxtb	r0, r3
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	333d      	adds	r3, #61	; 0x3d
 8004afe:	4602      	mov	r2, r0
 8004b00:	701a      	strb	r2, [r3, #0]
 8004b02:	e127      	b.n	8004d54 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004b04:	78fa      	ldrb	r2, [r7, #3]
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	334d      	adds	r3, #77	; 0x4d
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d120      	bne.n	8004b5c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b1a:	78fa      	ldrb	r2, [r7, #3]
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	1a9b      	subs	r3, r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	440b      	add	r3, r1
 8004b28:	334d      	adds	r3, #77	; 0x4d
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004b2e:	78fa      	ldrb	r2, [r7, #3]
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	4613      	mov	r3, r2
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	1a9b      	subs	r3, r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	331b      	adds	r3, #27
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	f040 8107 	bne.w	8004d54 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b46:	78fa      	ldrb	r2, [r7, #3]
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	334c      	adds	r3, #76	; 0x4c
 8004b56:	2202      	movs	r2, #2
 8004b58:	701a      	strb	r2, [r3, #0]
 8004b5a:	e0fb      	b.n	8004d54 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004b5c:	78fa      	ldrb	r2, [r7, #3]
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	334d      	adds	r3, #77	; 0x4d
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d13a      	bne.n	8004be8 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b72:	78fa      	ldrb	r2, [r7, #3]
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	1a9b      	subs	r3, r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	334d      	adds	r3, #77	; 0x4d
 8004b82:	2202      	movs	r2, #2
 8004b84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b86:	78fa      	ldrb	r2, [r7, #3]
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	334c      	adds	r3, #76	; 0x4c
 8004b96:	2202      	movs	r2, #2
 8004b98:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004b9a:	78fa      	ldrb	r2, [r7, #3]
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	1a9b      	subs	r3, r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	331b      	adds	r3, #27
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	f040 80d1 	bne.w	8004d54 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004bb2:	78fa      	ldrb	r2, [r7, #3]
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	331b      	adds	r3, #27
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be4:	6053      	str	r3, [r2, #4]
 8004be6:	e0b5      	b.n	8004d54 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004be8:	78fa      	ldrb	r2, [r7, #3]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	334d      	adds	r3, #77	; 0x4d
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b05      	cmp	r3, #5
 8004bfc:	d114      	bne.n	8004c28 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004bfe:	78fa      	ldrb	r2, [r7, #3]
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	1a9b      	subs	r3, r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	334d      	adds	r3, #77	; 0x4d
 8004c0e:	2202      	movs	r2, #2
 8004c10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004c12:	78fa      	ldrb	r2, [r7, #3]
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	1a9b      	subs	r3, r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	334c      	adds	r3, #76	; 0x4c
 8004c22:	2202      	movs	r2, #2
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	e095      	b.n	8004d54 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004c28:	78fa      	ldrb	r2, [r7, #3]
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	1a9b      	subs	r3, r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	334d      	adds	r3, #77	; 0x4d
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b06      	cmp	r3, #6
 8004c3c:	d114      	bne.n	8004c68 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c3e:	78fa      	ldrb	r2, [r7, #3]
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	1a9b      	subs	r3, r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	334d      	adds	r3, #77	; 0x4d
 8004c4e:	2202      	movs	r2, #2
 8004c50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	334c      	adds	r3, #76	; 0x4c
 8004c62:	2205      	movs	r2, #5
 8004c64:	701a      	strb	r2, [r3, #0]
 8004c66:	e075      	b.n	8004d54 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004c68:	78fa      	ldrb	r2, [r7, #3]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	334d      	adds	r3, #77	; 0x4d
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b07      	cmp	r3, #7
 8004c7c:	d00a      	beq.n	8004c94 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	334d      	adds	r3, #77	; 0x4d
 8004c8e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004c90:	2b09      	cmp	r3, #9
 8004c92:	d170      	bne.n	8004d76 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c94:	78fa      	ldrb	r2, [r7, #3]
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	334d      	adds	r3, #77	; 0x4d
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004ca8:	78fa      	ldrb	r2, [r7, #3]
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	3344      	adds	r3, #68	; 0x44
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	1c59      	adds	r1, r3, #1
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	1a9b      	subs	r3, r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4403      	add	r3, r0
 8004cc8:	3344      	adds	r3, #68	; 0x44
 8004cca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ccc:	78fa      	ldrb	r2, [r7, #3]
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	1a9b      	subs	r3, r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	3344      	adds	r3, #68	; 0x44
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d914      	bls.n	8004d0c <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	3344      	adds	r3, #68	; 0x44
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	334c      	adds	r3, #76	; 0x4c
 8004d06:	2204      	movs	r2, #4
 8004d08:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d0a:	e022      	b.n	8004d52 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d0c:	78fa      	ldrb	r2, [r7, #3]
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	1a9b      	subs	r3, r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	334c      	adds	r3, #76	; 0x4c
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d36:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d3e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d52:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004d54:	78fa      	ldrb	r2, [r7, #3]
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	334c      	adds	r3, #76	; 0x4c
 8004d64:	781a      	ldrb	r2, [r3, #0]
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f006 fb00 	bl	800b370 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004d70:	e002      	b.n	8004d78 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004d72:	bf00      	nop
 8004d74:	e000      	b.n	8004d78 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004d76:	bf00      	nop
  }
}
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b08a      	sub	sp, #40	; 0x28
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	0c5b      	lsrs	r3, r3, #17
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	091b      	lsrs	r3, r3, #4
 8004dae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004db2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d004      	beq.n	8004dc4 <HCD_RXQLVL_IRQHandler+0x46>
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b05      	cmp	r3, #5
 8004dbe:	f000 80b6 	beq.w	8004f2e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004dc2:	e0b7      	b.n	8004f34 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 80b3 	beq.w	8004f32 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	1a9b      	subs	r3, r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	332c      	adds	r3, #44	; 0x2c
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 80a7 	beq.w	8004f32 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	4613      	mov	r3, r2
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	3338      	adds	r3, #56	; 0x38
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	18d1      	adds	r1, r2, r3
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	1a9b      	subs	r3, r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4403      	add	r3, r0
 8004e08:	3334      	adds	r3, #52	; 0x34
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4299      	cmp	r1, r3
 8004e0e:	f200 8083 	bhi.w	8004f18 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	1a9b      	subs	r3, r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	332c      	adds	r3, #44	; 0x2c
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	b292      	uxth	r2, r2
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	f003 f9c5 	bl	80081bc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004e32:	6879      	ldr	r1, [r7, #4]
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4613      	mov	r3, r2
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	332c      	adds	r3, #44	; 0x2c
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	18d1      	adds	r1, r2, r3
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	1a9b      	subs	r3, r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4403      	add	r3, r0
 8004e56:	332c      	adds	r3, #44	; 0x2c
 8004e58:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	3338      	adds	r3, #56	; 0x38
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	18d1      	adds	r1, r2, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4613      	mov	r3, r2
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4403      	add	r3, r0
 8004e7e:	3338      	adds	r3, #56	; 0x38
 8004e80:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	0cdb      	lsrs	r3, r3, #19
 8004e92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e96:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	1a9b      	subs	r3, r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	3328      	adds	r3, #40	; 0x28
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d13f      	bne.n	8004f32 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d03c      	beq.n	8004f32 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ece:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ed6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	333c      	adds	r3, #60	; 0x3c
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	f083 0301 	eor.w	r3, r3, #1
 8004f00:	b2d8      	uxtb	r0, r3
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	4613      	mov	r3, r2
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	333c      	adds	r3, #60	; 0x3c
 8004f12:	4602      	mov	r2, r0
 8004f14:	701a      	strb	r2, [r3, #0]
      break;
 8004f16:	e00c      	b.n	8004f32 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	1a9b      	subs	r3, r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	334c      	adds	r3, #76	; 0x4c
 8004f28:	2204      	movs	r2, #4
 8004f2a:	701a      	strb	r2, [r3, #0]
      break;
 8004f2c:	e001      	b.n	8004f32 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e000      	b.n	8004f34 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004f32:	bf00      	nop
  }
}
 8004f34:	bf00      	nop
 8004f36:	3728      	adds	r7, #40	; 0x28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f68:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d10b      	bne.n	8004f8c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d102      	bne.n	8004f84 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f006 f9da 	bl	800b338 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f043 0302 	orr.w	r3, r3, #2
 8004f8a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d132      	bne.n	8004ffc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f043 0308 	orr.w	r3, r3, #8
 8004f9c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d126      	bne.n	8004ff6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	7a5b      	ldrb	r3, [r3, #9]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d113      	bne.n	8004fd8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004fb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fba:	d106      	bne.n	8004fca <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2102      	movs	r1, #2
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f003 fa74 	bl	80084b0 <USB_InitFSLSPClkSel>
 8004fc8:	e011      	b.n	8004fee <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2101      	movs	r1, #1
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f003 fa6d 	bl	80084b0 <USB_InitFSLSPClkSel>
 8004fd6:	e00a      	b.n	8004fee <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	79db      	ldrb	r3, [r3, #7]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d106      	bne.n	8004fee <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004fec:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f006 f9cc 	bl	800b38c <HAL_HCD_PortEnabled_Callback>
 8004ff4:	e002      	b.n	8004ffc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f006 f9d6 	bl	800b3a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	2b20      	cmp	r3, #32
 8005004:	d103      	bne.n	800500e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f043 0320 	orr.w	r3, r3, #32
 800500c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005014:	461a      	mov	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	6013      	str	r3, [r2, #0]
}
 800501a:	bf00      	nop
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e12b      	b.n	800528e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fd f876 	bl	800213c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2224      	movs	r2, #36	; 0x24
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0201 	bic.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005076:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005086:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005088:	f002 f900 	bl	800728c <HAL_RCC_GetPCLK1Freq>
 800508c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	4a81      	ldr	r2, [pc, #516]	; (8005298 <HAL_I2C_Init+0x274>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d807      	bhi.n	80050a8 <HAL_I2C_Init+0x84>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4a80      	ldr	r2, [pc, #512]	; (800529c <HAL_I2C_Init+0x278>)
 800509c:	4293      	cmp	r3, r2
 800509e:	bf94      	ite	ls
 80050a0:	2301      	movls	r3, #1
 80050a2:	2300      	movhi	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	e006      	b.n	80050b6 <HAL_I2C_Init+0x92>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4a7d      	ldr	r2, [pc, #500]	; (80052a0 <HAL_I2C_Init+0x27c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	bf94      	ite	ls
 80050b0:	2301      	movls	r3, #1
 80050b2:	2300      	movhi	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e0e7      	b.n	800528e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4a78      	ldr	r2, [pc, #480]	; (80052a4 <HAL_I2C_Init+0x280>)
 80050c2:	fba2 2303 	umull	r2, r3, r2, r3
 80050c6:	0c9b      	lsrs	r3, r3, #18
 80050c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	4a6a      	ldr	r2, [pc, #424]	; (8005298 <HAL_I2C_Init+0x274>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d802      	bhi.n	80050f8 <HAL_I2C_Init+0xd4>
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	3301      	adds	r3, #1
 80050f6:	e009      	b.n	800510c <HAL_I2C_Init+0xe8>
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050fe:	fb02 f303 	mul.w	r3, r2, r3
 8005102:	4a69      	ldr	r2, [pc, #420]	; (80052a8 <HAL_I2C_Init+0x284>)
 8005104:	fba2 2303 	umull	r2, r3, r2, r3
 8005108:	099b      	lsrs	r3, r3, #6
 800510a:	3301      	adds	r3, #1
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6812      	ldr	r2, [r2, #0]
 8005110:	430b      	orrs	r3, r1
 8005112:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800511e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	495c      	ldr	r1, [pc, #368]	; (8005298 <HAL_I2C_Init+0x274>)
 8005128:	428b      	cmp	r3, r1
 800512a:	d819      	bhi.n	8005160 <HAL_I2C_Init+0x13c>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	1e59      	subs	r1, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	fbb1 f3f3 	udiv	r3, r1, r3
 800513a:	1c59      	adds	r1, r3, #1
 800513c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005140:	400b      	ands	r3, r1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <HAL_I2C_Init+0x138>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	1e59      	subs	r1, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	fbb1 f3f3 	udiv	r3, r1, r3
 8005154:	3301      	adds	r3, #1
 8005156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800515a:	e051      	b.n	8005200 <HAL_I2C_Init+0x1dc>
 800515c:	2304      	movs	r3, #4
 800515e:	e04f      	b.n	8005200 <HAL_I2C_Init+0x1dc>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d111      	bne.n	800518c <HAL_I2C_Init+0x168>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	1e58      	subs	r0, r3, #1
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6859      	ldr	r1, [r3, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	440b      	add	r3, r1
 8005176:	fbb0 f3f3 	udiv	r3, r0, r3
 800517a:	3301      	adds	r3, #1
 800517c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005180:	2b00      	cmp	r3, #0
 8005182:	bf0c      	ite	eq
 8005184:	2301      	moveq	r3, #1
 8005186:	2300      	movne	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	e012      	b.n	80051b2 <HAL_I2C_Init+0x18e>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	1e58      	subs	r0, r3, #1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6859      	ldr	r1, [r3, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	0099      	lsls	r1, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	fbb0 f3f3 	udiv	r3, r0, r3
 80051a2:	3301      	adds	r3, #1
 80051a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bf0c      	ite	eq
 80051ac:	2301      	moveq	r3, #1
 80051ae:	2300      	movne	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_I2C_Init+0x196>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e022      	b.n	8005200 <HAL_I2C_Init+0x1dc>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10e      	bne.n	80051e0 <HAL_I2C_Init+0x1bc>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	1e58      	subs	r0, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6859      	ldr	r1, [r3, #4]
 80051ca:	460b      	mov	r3, r1
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	440b      	add	r3, r1
 80051d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80051d4:	3301      	adds	r3, #1
 80051d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051de:	e00f      	b.n	8005200 <HAL_I2C_Init+0x1dc>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	1e58      	subs	r0, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6859      	ldr	r1, [r3, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	0099      	lsls	r1, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80051f6:	3301      	adds	r3, #1
 80051f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	6809      	ldr	r1, [r1, #0]
 8005204:	4313      	orrs	r3, r2
 8005206:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69da      	ldr	r2, [r3, #28]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800522e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6911      	ldr	r1, [r2, #16]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	68d2      	ldr	r2, [r2, #12]
 800523a:	4311      	orrs	r1, r2
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6812      	ldr	r2, [r2, #0]
 8005240:	430b      	orrs	r3, r1
 8005242:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695a      	ldr	r2, [r3, #20]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	000186a0 	.word	0x000186a0
 800529c:	001e847f 	.word	0x001e847f
 80052a0:	003d08ff 	.word	0x003d08ff
 80052a4:	431bde83 	.word	0x431bde83
 80052a8:	10624dd3 	.word	0x10624dd3

080052ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	4608      	mov	r0, r1
 80052b6:	4611      	mov	r1, r2
 80052b8:	461a      	mov	r2, r3
 80052ba:	4603      	mov	r3, r0
 80052bc:	817b      	strh	r3, [r7, #10]
 80052be:	460b      	mov	r3, r1
 80052c0:	813b      	strh	r3, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052c6:	f7fd fa69 	bl	800279c <HAL_GetTick>
 80052ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	f040 80d9 	bne.w	800548c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	2319      	movs	r3, #25
 80052e0:	2201      	movs	r2, #1
 80052e2:	496d      	ldr	r1, [pc, #436]	; (8005498 <HAL_I2C_Mem_Write+0x1ec>)
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 fc8b 	bl	8005c00 <I2C_WaitOnFlagUntilTimeout>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80052f0:	2302      	movs	r3, #2
 80052f2:	e0cc      	b.n	800548e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d101      	bne.n	8005302 <HAL_I2C_Mem_Write+0x56>
 80052fe:	2302      	movs	r3, #2
 8005300:	e0c5      	b.n	800548e <HAL_I2C_Mem_Write+0x1e2>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b01      	cmp	r3, #1
 8005316:	d007      	beq.n	8005328 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005336:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2221      	movs	r2, #33	; 0x21
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2240      	movs	r2, #64	; 0x40
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a3a      	ldr	r2, [r7, #32]
 8005352:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005358:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4a4d      	ldr	r2, [pc, #308]	; (800549c <HAL_I2C_Mem_Write+0x1f0>)
 8005368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800536a:	88f8      	ldrh	r0, [r7, #6]
 800536c:	893a      	ldrh	r2, [r7, #8]
 800536e:	8979      	ldrh	r1, [r7, #10]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	4603      	mov	r3, r0
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fac2 	bl	8005904 <I2C_RequestMemoryWrite>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d052      	beq.n	800542c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e081      	b.n	800548e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fd50 	bl	8005e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00d      	beq.n	80053b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d107      	bne.n	80053b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e06b      	b.n	800548e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	781a      	ldrb	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053dc:	b29b      	uxth	r3, r3
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d11b      	bne.n	800542c <HAL_I2C_Mem_Write+0x180>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d017      	beq.n	800542c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	781a      	ldrb	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005422:	b29b      	uxth	r3, r3
 8005424:	3b01      	subs	r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1aa      	bne.n	800538a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 fd43 	bl	8005ec4 <I2C_WaitOnBTFFlagUntilTimeout>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00d      	beq.n	8005460 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	2b04      	cmp	r3, #4
 800544a:	d107      	bne.n	800545c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800545a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e016      	b.n	800548e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800546e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	e000      	b.n	800548e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800548c:	2302      	movs	r3, #2
  }
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	00100002 	.word	0x00100002
 800549c:	ffff0000 	.word	0xffff0000

080054a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08c      	sub	sp, #48	; 0x30
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	4608      	mov	r0, r1
 80054aa:	4611      	mov	r1, r2
 80054ac:	461a      	mov	r2, r3
 80054ae:	4603      	mov	r3, r0
 80054b0:	817b      	strh	r3, [r7, #10]
 80054b2:	460b      	mov	r3, r1
 80054b4:	813b      	strh	r3, [r7, #8]
 80054b6:	4613      	mov	r3, r2
 80054b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054ba:	f7fd f96f 	bl	800279c <HAL_GetTick>
 80054be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	f040 8214 	bne.w	80058f6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	2319      	movs	r3, #25
 80054d4:	2201      	movs	r2, #1
 80054d6:	497b      	ldr	r1, [pc, #492]	; (80056c4 <HAL_I2C_Mem_Read+0x224>)
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 fb91 	bl	8005c00 <I2C_WaitOnFlagUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80054e4:	2302      	movs	r3, #2
 80054e6:	e207      	b.n	80058f8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <HAL_I2C_Mem_Read+0x56>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e200      	b.n	80058f8 <HAL_I2C_Mem_Read+0x458>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b01      	cmp	r3, #1
 800550a:	d007      	beq.n	800551c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800552a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2222      	movs	r2, #34	; 0x22
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2240      	movs	r2, #64	; 0x40
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800554c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4a5b      	ldr	r2, [pc, #364]	; (80056c8 <HAL_I2C_Mem_Read+0x228>)
 800555c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800555e:	88f8      	ldrh	r0, [r7, #6]
 8005560:	893a      	ldrh	r2, [r7, #8]
 8005562:	8979      	ldrh	r1, [r7, #10]
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	9301      	str	r3, [sp, #4]
 8005568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	4603      	mov	r3, r0
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 fa5e 	bl	8005a30 <I2C_RequestMemoryRead>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e1bc      	b.n	80058f8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005582:	2b00      	cmp	r3, #0
 8005584:	d113      	bne.n	80055ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005586:	2300      	movs	r3, #0
 8005588:	623b      	str	r3, [r7, #32]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	623b      	str	r3, [r7, #32]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	623b      	str	r3, [r7, #32]
 800559a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	e190      	b.n	80058d0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d11b      	bne.n	80055ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c6:	2300      	movs	r3, #0
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	61fb      	str	r3, [r7, #28]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	61fb      	str	r3, [r7, #28]
 80055da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	e170      	b.n	80058d0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d11b      	bne.n	800562e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005604:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005614:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005616:	2300      	movs	r3, #0
 8005618:	61bb      	str	r3, [r7, #24]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	e150      	b.n	80058d0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005644:	e144      	b.n	80058d0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564a:	2b03      	cmp	r3, #3
 800564c:	f200 80f1 	bhi.w	8005832 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005654:	2b01      	cmp	r3, #1
 8005656:	d123      	bne.n	80056a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800565a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 fc79 	bl	8005f54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e145      	b.n	80058f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691a      	ldr	r2, [r3, #16]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800569e:	e117      	b.n	80058d0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d14e      	bne.n	8005746 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ae:	2200      	movs	r2, #0
 80056b0:	4906      	ldr	r1, [pc, #24]	; (80056cc <HAL_I2C_Mem_Read+0x22c>)
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 faa4 	bl	8005c00 <I2C_WaitOnFlagUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d008      	beq.n	80056d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e11a      	b.n	80058f8 <HAL_I2C_Mem_Read+0x458>
 80056c2:	bf00      	nop
 80056c4:	00100002 	.word	0x00100002
 80056c8:	ffff0000 	.word	0xffff0000
 80056cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	691a      	ldr	r2, [r3, #16]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005744:	e0c4      	b.n	80058d0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	2200      	movs	r2, #0
 800574e:	496c      	ldr	r1, [pc, #432]	; (8005900 <HAL_I2C_Mem_Read+0x460>)
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fa55 	bl	8005c00 <I2C_WaitOnFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e0cb      	b.n	80058f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800576e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691a      	ldr	r2, [r3, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a8:	2200      	movs	r2, #0
 80057aa:	4955      	ldr	r1, [pc, #340]	; (8005900 <HAL_I2C_Mem_Read+0x460>)
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 fa27 	bl	8005c00 <I2C_WaitOnFlagUntilTimeout>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e09d      	b.n	80058f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691a      	ldr	r2, [r3, #16]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691a      	ldr	r2, [r3, #16]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005830:	e04e      	b.n	80058d0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005834:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 fb8c 	bl	8005f54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e058      	b.n	80058f8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	b2d2      	uxtb	r2, r2
 8005852:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005862:	3b01      	subs	r3, #1
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586e:	b29b      	uxth	r3, r3
 8005870:	3b01      	subs	r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b04      	cmp	r3, #4
 8005884:	d124      	bne.n	80058d0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588a:	2b03      	cmp	r3, #3
 800588c:	d107      	bne.n	800589e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800589c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f47f aeb6 	bne.w	8005646 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	e000      	b.n	80058f8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80058f6:	2302      	movs	r3, #2
  }
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3728      	adds	r7, #40	; 0x28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	00010004 	.word	0x00010004

08005904 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af02      	add	r7, sp, #8
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	4608      	mov	r0, r1
 800590e:	4611      	mov	r1, r2
 8005910:	461a      	mov	r2, r3
 8005912:	4603      	mov	r3, r0
 8005914:	817b      	strh	r3, [r7, #10]
 8005916:	460b      	mov	r3, r1
 8005918:	813b      	strh	r3, [r7, #8]
 800591a:	4613      	mov	r3, r2
 800591c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800592c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	2200      	movs	r2, #0
 8005936:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 f960 	bl	8005c00 <I2C_WaitOnFlagUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00d      	beq.n	8005962 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005954:	d103      	bne.n	800595e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800595c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e05f      	b.n	8005a22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005962:	897b      	ldrh	r3, [r7, #10]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005970:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	6a3a      	ldr	r2, [r7, #32]
 8005976:	492d      	ldr	r1, [pc, #180]	; (8005a2c <I2C_RequestMemoryWrite+0x128>)
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 f9bb 	bl	8005cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e04c      	b.n	8005a22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005988:	2300      	movs	r3, #0
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800599e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a0:	6a39      	ldr	r1, [r7, #32]
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 fa46 	bl	8005e34 <I2C_WaitOnTXEFlagUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00d      	beq.n	80059ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d107      	bne.n	80059c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e02b      	b.n	8005a22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059ca:	88fb      	ldrh	r3, [r7, #6]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d105      	bne.n	80059dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059d0:	893b      	ldrh	r3, [r7, #8]
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	611a      	str	r2, [r3, #16]
 80059da:	e021      	b.n	8005a20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059dc:	893b      	ldrh	r3, [r7, #8]
 80059de:	0a1b      	lsrs	r3, r3, #8
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ec:	6a39      	ldr	r1, [r7, #32]
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 fa20 	bl	8005e34 <I2C_WaitOnTXEFlagUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00d      	beq.n	8005a16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d107      	bne.n	8005a12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e005      	b.n	8005a22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a16:	893b      	ldrh	r3, [r7, #8]
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	00010002 	.word	0x00010002

08005a30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	4608      	mov	r0, r1
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	4603      	mov	r3, r0
 8005a40:	817b      	strh	r3, [r7, #10]
 8005a42:	460b      	mov	r3, r1
 8005a44:	813b      	strh	r3, [r7, #8]
 8005a46:	4613      	mov	r3, r2
 8005a48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f8c2 	bl	8005c00 <I2C_WaitOnFlagUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00d      	beq.n	8005a9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a90:	d103      	bne.n	8005a9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e0aa      	b.n	8005bf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a9e:	897b      	ldrh	r3, [r7, #10]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005aac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	6a3a      	ldr	r2, [r7, #32]
 8005ab2:	4952      	ldr	r1, [pc, #328]	; (8005bfc <I2C_RequestMemoryRead+0x1cc>)
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f91d 	bl	8005cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e097      	b.n	8005bf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005adc:	6a39      	ldr	r1, [r7, #32]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f9a8 	bl	8005e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00d      	beq.n	8005b06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d107      	bne.n	8005b02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e076      	b.n	8005bf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d105      	bne.n	8005b18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b0c:	893b      	ldrh	r3, [r7, #8]
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	611a      	str	r2, [r3, #16]
 8005b16:	e021      	b.n	8005b5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b18:	893b      	ldrh	r3, [r7, #8]
 8005b1a:	0a1b      	lsrs	r3, r3, #8
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b28:	6a39      	ldr	r1, [r7, #32]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 f982 	bl	8005e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00d      	beq.n	8005b52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d107      	bne.n	8005b4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e050      	b.n	8005bf4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b52:	893b      	ldrh	r3, [r7, #8]
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5e:	6a39      	ldr	r1, [r7, #32]
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f967 	bl	8005e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00d      	beq.n	8005b88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d107      	bne.n	8005b84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e035      	b.n	8005bf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 f82b 	bl	8005c00 <I2C_WaitOnFlagUntilTimeout>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00d      	beq.n	8005bcc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bbe:	d103      	bne.n	8005bc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e013      	b.n	8005bf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005bcc:	897b      	ldrh	r3, [r7, #10]
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	6a3a      	ldr	r2, [r7, #32]
 8005be0:	4906      	ldr	r1, [pc, #24]	; (8005bfc <I2C_RequestMemoryRead+0x1cc>)
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 f886 	bl	8005cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	00010002 	.word	0x00010002

08005c00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c10:	e048      	b.n	8005ca4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c18:	d044      	beq.n	8005ca4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c1a:	f7fc fdbf 	bl	800279c <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d302      	bcc.n	8005c30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d139      	bne.n	8005ca4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	0c1b      	lsrs	r3, r3, #16
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d10d      	bne.n	8005c56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	43da      	mvns	r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	4013      	ands	r3, r2
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	bf0c      	ite	eq
 8005c4c:	2301      	moveq	r3, #1
 8005c4e:	2300      	movne	r3, #0
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	461a      	mov	r2, r3
 8005c54:	e00c      	b.n	8005c70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	43da      	mvns	r2, r3
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	4013      	ands	r3, r2
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	bf0c      	ite	eq
 8005c68:	2301      	moveq	r3, #1
 8005c6a:	2300      	movne	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	461a      	mov	r2, r3
 8005c70:	79fb      	ldrb	r3, [r7, #7]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d116      	bne.n	8005ca4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	f043 0220 	orr.w	r2, r3, #32
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e023      	b.n	8005cec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	0c1b      	lsrs	r3, r3, #16
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d10d      	bne.n	8005cca <I2C_WaitOnFlagUntilTimeout+0xca>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	43da      	mvns	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	bf0c      	ite	eq
 8005cc0:	2301      	moveq	r3, #1
 8005cc2:	2300      	movne	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	e00c      	b.n	8005ce4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	43da      	mvns	r2, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	bf0c      	ite	eq
 8005cdc:	2301      	moveq	r3, #1
 8005cde:	2300      	movne	r3, #0
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	79fb      	ldrb	r3, [r7, #7]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d093      	beq.n	8005c12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d02:	e071      	b.n	8005de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d12:	d123      	bne.n	8005d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	f043 0204 	orr.w	r2, r3, #4
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e067      	b.n	8005e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d62:	d041      	beq.n	8005de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d64:	f7fc fd1a 	bl	800279c <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d302      	bcc.n	8005d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d136      	bne.n	8005de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	0c1b      	lsrs	r3, r3, #16
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d10c      	bne.n	8005d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	43da      	mvns	r2, r3
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	bf14      	ite	ne
 8005d96:	2301      	movne	r3, #1
 8005d98:	2300      	moveq	r3, #0
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	e00b      	b.n	8005db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	43da      	mvns	r2, r3
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	4013      	ands	r3, r2
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	bf14      	ite	ne
 8005db0:	2301      	movne	r3, #1
 8005db2:	2300      	moveq	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d016      	beq.n	8005de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd4:	f043 0220 	orr.w	r2, r3, #32
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e021      	b.n	8005e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	0c1b      	lsrs	r3, r3, #16
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d10c      	bne.n	8005e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	43da      	mvns	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bf14      	ite	ne
 8005e04:	2301      	movne	r3, #1
 8005e06:	2300      	moveq	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	e00b      	b.n	8005e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	43da      	mvns	r2, r3
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4013      	ands	r3, r2
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	bf14      	ite	ne
 8005e1e:	2301      	movne	r3, #1
 8005e20:	2300      	moveq	r3, #0
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f47f af6d 	bne.w	8005d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e40:	e034      	b.n	8005eac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 f8e3 	bl	800600e <I2C_IsAcknowledgeFailed>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e034      	b.n	8005ebc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e58:	d028      	beq.n	8005eac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e5a:	f7fc fc9f 	bl	800279c <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d302      	bcc.n	8005e70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d11d      	bne.n	8005eac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7a:	2b80      	cmp	r3, #128	; 0x80
 8005e7c:	d016      	beq.n	8005eac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	f043 0220 	orr.w	r2, r3, #32
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e007      	b.n	8005ebc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb6:	2b80      	cmp	r3, #128	; 0x80
 8005eb8:	d1c3      	bne.n	8005e42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ed0:	e034      	b.n	8005f3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 f89b 	bl	800600e <I2C_IsAcknowledgeFailed>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e034      	b.n	8005f4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee8:	d028      	beq.n	8005f3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eea:	f7fc fc57 	bl	800279c <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d302      	bcc.n	8005f00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d11d      	bne.n	8005f3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d016      	beq.n	8005f3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	f043 0220 	orr.w	r2, r3, #32
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e007      	b.n	8005f4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	f003 0304 	and.w	r3, r3, #4
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d1c3      	bne.n	8005ed2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f60:	e049      	b.n	8005ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	f003 0310 	and.w	r3, r3, #16
 8005f6c:	2b10      	cmp	r3, #16
 8005f6e:	d119      	bne.n	8005fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0210 	mvn.w	r2, #16
 8005f78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e030      	b.n	8006006 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa4:	f7fc fbfa 	bl	800279c <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d302      	bcc.n	8005fba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d11d      	bne.n	8005ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc4:	2b40      	cmp	r3, #64	; 0x40
 8005fc6:	d016      	beq.n	8005ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	f043 0220 	orr.w	r2, r3, #32
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e007      	b.n	8006006 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006000:	2b40      	cmp	r3, #64	; 0x40
 8006002:	d1ae      	bne.n	8005f62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006024:	d11b      	bne.n	800605e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800602e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	f043 0204 	orr.w	r2, r3, #4
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e128      	b.n	80062d0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d109      	bne.n	800609e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a90      	ldr	r2, [pc, #576]	; (80062d8 <HAL_I2S_Init+0x26c>)
 8006096:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7fc f8ef 	bl	800227c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2202      	movs	r2, #2
 80060a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6812      	ldr	r2, [r2, #0]
 80060b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80060b4:	f023 030f 	bic.w	r3, r3, #15
 80060b8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2202      	movs	r2, #2
 80060c0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d060      	beq.n	800618c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d102      	bne.n	80060d8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80060d2:	2310      	movs	r3, #16
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	e001      	b.n	80060dc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80060d8:	2320      	movs	r3, #32
 80060da:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	d802      	bhi.n	80060ea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80060ea:	2001      	movs	r0, #1
 80060ec:	f001 f9d2 	bl	8007494 <HAL_RCCEx_GetPeriphCLKFreq>
 80060f0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060fa:	d125      	bne.n	8006148 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d010      	beq.n	8006126 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	fbb2 f2f3 	udiv	r2, r2, r3
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	461a      	mov	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006120:	3305      	adds	r3, #5
 8006122:	613b      	str	r3, [r7, #16]
 8006124:	e01f      	b.n	8006166 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006130:	4613      	mov	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	461a      	mov	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006142:	3305      	adds	r3, #5
 8006144:	613b      	str	r3, [r7, #16]
 8006146:	e00e      	b.n	8006166 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	461a      	mov	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006162:	3305      	adds	r3, #5
 8006164:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	4a5c      	ldr	r2, [pc, #368]	; (80062dc <HAL_I2S_Init+0x270>)
 800616a:	fba2 2303 	umull	r2, r3, r2, r3
 800616e:	08db      	lsrs	r3, r3, #3
 8006170:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	085b      	lsrs	r3, r3, #1
 8006182:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	021b      	lsls	r3, r3, #8
 8006188:	61bb      	str	r3, [r7, #24]
 800618a:	e003      	b.n	8006194 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800618c:	2302      	movs	r3, #2
 800618e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d902      	bls.n	80061a0 <HAL_I2S_Init+0x134>
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	2bff      	cmp	r3, #255	; 0xff
 800619e:	d907      	bls.n	80061b0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a4:	f043 0210 	orr.w	r2, r3, #16
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e08f      	b.n	80062d0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	ea42 0103 	orr.w	r1, r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80061ce:	f023 030f 	bic.w	r3, r3, #15
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6851      	ldr	r1, [r2, #4]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6892      	ldr	r2, [r2, #8]
 80061da:	4311      	orrs	r1, r2
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	68d2      	ldr	r2, [r2, #12]
 80061e0:	4311      	orrs	r1, r2
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	6992      	ldr	r2, [r2, #24]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061f2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d161      	bne.n	80062c0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a38      	ldr	r2, [pc, #224]	; (80062e0 <HAL_I2S_Init+0x274>)
 8006200:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a37      	ldr	r2, [pc, #220]	; (80062e4 <HAL_I2S_Init+0x278>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d101      	bne.n	8006210 <HAL_I2S_Init+0x1a4>
 800620c:	4b36      	ldr	r3, [pc, #216]	; (80062e8 <HAL_I2S_Init+0x27c>)
 800620e:	e001      	b.n	8006214 <HAL_I2S_Init+0x1a8>
 8006210:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6812      	ldr	r2, [r2, #0]
 800621a:	4932      	ldr	r1, [pc, #200]	; (80062e4 <HAL_I2S_Init+0x278>)
 800621c:	428a      	cmp	r2, r1
 800621e:	d101      	bne.n	8006224 <HAL_I2S_Init+0x1b8>
 8006220:	4a31      	ldr	r2, [pc, #196]	; (80062e8 <HAL_I2S_Init+0x27c>)
 8006222:	e001      	b.n	8006228 <HAL_I2S_Init+0x1bc>
 8006224:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006228:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800622c:	f023 030f 	bic.w	r3, r3, #15
 8006230:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a2b      	ldr	r2, [pc, #172]	; (80062e4 <HAL_I2S_Init+0x278>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d101      	bne.n	8006240 <HAL_I2S_Init+0x1d4>
 800623c:	4b2a      	ldr	r3, [pc, #168]	; (80062e8 <HAL_I2S_Init+0x27c>)
 800623e:	e001      	b.n	8006244 <HAL_I2S_Init+0x1d8>
 8006240:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006244:	2202      	movs	r2, #2
 8006246:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a25      	ldr	r2, [pc, #148]	; (80062e4 <HAL_I2S_Init+0x278>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d101      	bne.n	8006256 <HAL_I2S_Init+0x1ea>
 8006252:	4b25      	ldr	r3, [pc, #148]	; (80062e8 <HAL_I2S_Init+0x27c>)
 8006254:	e001      	b.n	800625a <HAL_I2S_Init+0x1ee>
 8006256:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006266:	d003      	beq.n	8006270 <HAL_I2S_Init+0x204>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d103      	bne.n	8006278 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006270:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	e001      	b.n	800627c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006278:	2300      	movs	r3, #0
 800627a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006286:	4313      	orrs	r3, r2
 8006288:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006290:	4313      	orrs	r3, r2
 8006292:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800629a:	4313      	orrs	r3, r2
 800629c:	b29a      	uxth	r2, r3
 800629e:	897b      	ldrh	r3, [r7, #10]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80062a8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a0d      	ldr	r2, [pc, #52]	; (80062e4 <HAL_I2S_Init+0x278>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d101      	bne.n	80062b8 <HAL_I2S_Init+0x24c>
 80062b4:	4b0c      	ldr	r3, [pc, #48]	; (80062e8 <HAL_I2S_Init+0x27c>)
 80062b6:	e001      	b.n	80062bc <HAL_I2S_Init+0x250>
 80062b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062bc:	897a      	ldrh	r2, [r7, #10]
 80062be:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3720      	adds	r7, #32
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	080063e3 	.word	0x080063e3
 80062dc:	cccccccd 	.word	0xcccccccd
 80062e0:	080064f9 	.word	0x080064f9
 80062e4:	40003800 	.word	0x40003800
 80062e8:	40003400 	.word	0x40003400

080062ec <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	881a      	ldrh	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	1c9a      	adds	r2, r3, #2
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634a:	b29b      	uxth	r3, r3
 800634c:	3b01      	subs	r3, #1
 800634e:	b29a      	uxth	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006358:	b29b      	uxth	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10e      	bne.n	800637c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800636c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff ffb8 	bl	80062ec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800637c:	bf00      	nop
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006396:	b292      	uxth	r2, r2
 8006398:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639e:	1c9a      	adds	r2, r3, #2
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10e      	bne.n	80063da <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063ca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7ff ff93 	bl	8006300 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b086      	sub	sp, #24
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d13a      	bne.n	8006474 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b01      	cmp	r3, #1
 8006406:	d109      	bne.n	800641c <I2S_IRQHandler+0x3a>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006412:	2b40      	cmp	r3, #64	; 0x40
 8006414:	d102      	bne.n	800641c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff ffb4 	bl	8006384 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b40      	cmp	r3, #64	; 0x40
 8006424:	d126      	bne.n	8006474 <I2S_IRQHandler+0x92>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f003 0320 	and.w	r3, r3, #32
 8006430:	2b20      	cmp	r3, #32
 8006432:	d11f      	bne.n	8006474 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006442:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006444:	2300      	movs	r3, #0
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	613b      	str	r3, [r7, #16]
 8006458:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006466:	f043 0202 	orr.w	r2, r3, #2
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7ff ff50 	bl	8006314 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b03      	cmp	r3, #3
 800647e:	d136      	bne.n	80064ee <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b02      	cmp	r3, #2
 8006488:	d109      	bne.n	800649e <I2S_IRQHandler+0xbc>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006494:	2b80      	cmp	r3, #128	; 0x80
 8006496:	d102      	bne.n	800649e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f7ff ff45 	bl	8006328 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d122      	bne.n	80064ee <I2S_IRQHandler+0x10c>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f003 0320 	and.w	r3, r3, #32
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d11b      	bne.n	80064ee <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064c4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e0:	f043 0204 	orr.w	r2, r3, #4
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff ff13 	bl	8006314 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064ee:	bf00      	nop
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a92      	ldr	r2, [pc, #584]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d101      	bne.n	8006516 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006512:	4b92      	ldr	r3, [pc, #584]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006514:	e001      	b.n	800651a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006516:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a8b      	ldr	r2, [pc, #556]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d101      	bne.n	8006534 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006530:	4b8a      	ldr	r3, [pc, #552]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006532:	e001      	b.n	8006538 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006534:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006544:	d004      	beq.n	8006550 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	f040 8099 	bne.w	8006682 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b02      	cmp	r3, #2
 8006558:	d107      	bne.n	800656a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f925 	bl	80067b4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b01      	cmp	r3, #1
 8006572:	d107      	bne.n	8006584 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b00      	cmp	r3, #0
 800657c:	d002      	beq.n	8006584 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f9c8 	bl	8006914 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658a:	2b40      	cmp	r3, #64	; 0x40
 800658c:	d13a      	bne.n	8006604 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f003 0320 	and.w	r3, r3, #32
 8006594:	2b00      	cmp	r3, #0
 8006596:	d035      	beq.n	8006604 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a6e      	ldr	r2, [pc, #440]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d101      	bne.n	80065a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80065a2:	4b6e      	ldr	r3, [pc, #440]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80065a4:	e001      	b.n	80065aa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80065a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4969      	ldr	r1, [pc, #420]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80065b2:	428b      	cmp	r3, r1
 80065b4:	d101      	bne.n	80065ba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80065b6:	4b69      	ldr	r3, [pc, #420]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80065b8:	e001      	b.n	80065be <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80065ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065c2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80065d4:	2300      	movs	r3, #0
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f6:	f043 0202 	orr.w	r2, r3, #2
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7ff fe88 	bl	8006314 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	2b08      	cmp	r3, #8
 800660c:	f040 80c3 	bne.w	8006796 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 80bd 	beq.w	8006796 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800662a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a49      	ldr	r2, [pc, #292]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d101      	bne.n	800663a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006636:	4b49      	ldr	r3, [pc, #292]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006638:	e001      	b.n	800663e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800663a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4944      	ldr	r1, [pc, #272]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006646:	428b      	cmp	r3, r1
 8006648:	d101      	bne.n	800664e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800664a:	4b44      	ldr	r3, [pc, #272]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800664c:	e001      	b.n	8006652 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800664e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006652:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006656:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006658:	2300      	movs	r3, #0
 800665a:	60bb      	str	r3, [r7, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	60bb      	str	r3, [r7, #8]
 8006664:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006672:	f043 0204 	orr.w	r2, r3, #4
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7ff fe4a 	bl	8006314 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006680:	e089      	b.n	8006796 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b02      	cmp	r3, #2
 800668a:	d107      	bne.n	800669c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f8be 	bl	8006818 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d107      	bne.n	80066b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f8fd 	bl	80068b0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066bc:	2b40      	cmp	r3, #64	; 0x40
 80066be:	d12f      	bne.n	8006720 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d02a      	beq.n	8006720 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066d8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1e      	ldr	r2, [pc, #120]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d101      	bne.n	80066e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80066e4:	4b1d      	ldr	r3, [pc, #116]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80066e6:	e001      	b.n	80066ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80066e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4919      	ldr	r1, [pc, #100]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80066f4:	428b      	cmp	r3, r1
 80066f6:	d101      	bne.n	80066fc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80066f8:	4b18      	ldr	r3, [pc, #96]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80066fa:	e001      	b.n	8006700 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80066fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006700:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006704:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006712:	f043 0202 	orr.w	r2, r3, #2
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7ff fdfa 	bl	8006314 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b08      	cmp	r3, #8
 8006728:	d136      	bne.n	8006798 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f003 0320 	and.w	r3, r3, #32
 8006730:	2b00      	cmp	r3, #0
 8006732:	d031      	beq.n	8006798 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a07      	ldr	r2, [pc, #28]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d101      	bne.n	8006742 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800673e:	4b07      	ldr	r3, [pc, #28]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006740:	e001      	b.n	8006746 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006742:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4902      	ldr	r1, [pc, #8]	; (8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800674e:	428b      	cmp	r3, r1
 8006750:	d106      	bne.n	8006760 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006752:	4b02      	ldr	r3, [pc, #8]	; (800675c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006754:	e006      	b.n	8006764 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006756:	bf00      	nop
 8006758:	40003800 	.word	0x40003800
 800675c:	40003400 	.word	0x40003400
 8006760:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006764:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006768:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006778:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006786:	f043 0204 	orr.w	r2, r3, #4
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff fdc0 	bl	8006314 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006794:	e000      	b.n	8006798 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006796:	bf00      	nop
}
 8006798:	bf00      	nop
 800679a:	3720      	adds	r7, #32
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	1c99      	adds	r1, r3, #2
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6251      	str	r1, [r2, #36]	; 0x24
 80067c6:	881a      	ldrh	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	3b01      	subs	r3, #1
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d113      	bne.n	800680e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067f4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d106      	bne.n	800680e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7ff ffc9 	bl	80067a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800680e:	bf00      	nop
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	1c99      	adds	r1, r3, #2
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6251      	str	r1, [r2, #36]	; 0x24
 800682a:	8819      	ldrh	r1, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a1d      	ldr	r2, [pc, #116]	; (80068a8 <I2SEx_TxISR_I2SExt+0x90>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d101      	bne.n	800683a <I2SEx_TxISR_I2SExt+0x22>
 8006836:	4b1d      	ldr	r3, [pc, #116]	; (80068ac <I2SEx_TxISR_I2SExt+0x94>)
 8006838:	e001      	b.n	800683e <I2SEx_TxISR_I2SExt+0x26>
 800683a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800683e:	460a      	mov	r2, r1
 8006840:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006846:	b29b      	uxth	r3, r3
 8006848:	3b01      	subs	r3, #1
 800684a:	b29a      	uxth	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006854:	b29b      	uxth	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d121      	bne.n	800689e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a12      	ldr	r2, [pc, #72]	; (80068a8 <I2SEx_TxISR_I2SExt+0x90>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d101      	bne.n	8006868 <I2SEx_TxISR_I2SExt+0x50>
 8006864:	4b11      	ldr	r3, [pc, #68]	; (80068ac <I2SEx_TxISR_I2SExt+0x94>)
 8006866:	e001      	b.n	800686c <I2SEx_TxISR_I2SExt+0x54>
 8006868:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	490d      	ldr	r1, [pc, #52]	; (80068a8 <I2SEx_TxISR_I2SExt+0x90>)
 8006874:	428b      	cmp	r3, r1
 8006876:	d101      	bne.n	800687c <I2SEx_TxISR_I2SExt+0x64>
 8006878:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <I2SEx_TxISR_I2SExt+0x94>)
 800687a:	e001      	b.n	8006880 <I2SEx_TxISR_I2SExt+0x68>
 800687c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006880:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006884:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800688a:	b29b      	uxth	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	d106      	bne.n	800689e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7ff ff81 	bl	80067a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800689e:	bf00      	nop
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40003800 	.word	0x40003800
 80068ac:	40003400 	.word	0x40003400

080068b0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68d8      	ldr	r0, [r3, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c2:	1c99      	adds	r1, r3, #2
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80068c8:	b282      	uxth	r2, r0
 80068ca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068de:	b29b      	uxth	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d113      	bne.n	800690c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068f2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d106      	bne.n	800690c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7ff ff4a 	bl	80067a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800690c:	bf00      	nop
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a20      	ldr	r2, [pc, #128]	; (80069a4 <I2SEx_RxISR_I2SExt+0x90>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d101      	bne.n	800692a <I2SEx_RxISR_I2SExt+0x16>
 8006926:	4b20      	ldr	r3, [pc, #128]	; (80069a8 <I2SEx_RxISR_I2SExt+0x94>)
 8006928:	e001      	b.n	800692e <I2SEx_RxISR_I2SExt+0x1a>
 800692a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800692e:	68d8      	ldr	r0, [r3, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	1c99      	adds	r1, r3, #2
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	62d1      	str	r1, [r2, #44]	; 0x2c
 800693a:	b282      	uxth	r2, r0
 800693c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006942:	b29b      	uxth	r3, r3
 8006944:	3b01      	subs	r3, #1
 8006946:	b29a      	uxth	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006950:	b29b      	uxth	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d121      	bne.n	800699a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a12      	ldr	r2, [pc, #72]	; (80069a4 <I2SEx_RxISR_I2SExt+0x90>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d101      	bne.n	8006964 <I2SEx_RxISR_I2SExt+0x50>
 8006960:	4b11      	ldr	r3, [pc, #68]	; (80069a8 <I2SEx_RxISR_I2SExt+0x94>)
 8006962:	e001      	b.n	8006968 <I2SEx_RxISR_I2SExt+0x54>
 8006964:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	490d      	ldr	r1, [pc, #52]	; (80069a4 <I2SEx_RxISR_I2SExt+0x90>)
 8006970:	428b      	cmp	r3, r1
 8006972:	d101      	bne.n	8006978 <I2SEx_RxISR_I2SExt+0x64>
 8006974:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <I2SEx_RxISR_I2SExt+0x94>)
 8006976:	e001      	b.n	800697c <I2SEx_RxISR_I2SExt+0x68>
 8006978:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800697c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006980:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006986:	b29b      	uxth	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d106      	bne.n	800699a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7ff ff03 	bl	80067a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800699a:	bf00      	nop
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	40003800 	.word	0x40003800
 80069a8:	40003400 	.word	0x40003400

080069ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e267      	b.n	8006e8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d075      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069ca:	4b88      	ldr	r3, [pc, #544]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f003 030c 	and.w	r3, r3, #12
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d00c      	beq.n	80069f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069d6:	4b85      	ldr	r3, [pc, #532]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069de:	2b08      	cmp	r3, #8
 80069e0:	d112      	bne.n	8006a08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069e2:	4b82      	ldr	r3, [pc, #520]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ee:	d10b      	bne.n	8006a08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069f0:	4b7e      	ldr	r3, [pc, #504]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d05b      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x108>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d157      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e242      	b.n	8006e8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a10:	d106      	bne.n	8006a20 <HAL_RCC_OscConfig+0x74>
 8006a12:	4b76      	ldr	r3, [pc, #472]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a75      	ldr	r2, [pc, #468]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	e01d      	b.n	8006a5c <HAL_RCC_OscConfig+0xb0>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a28:	d10c      	bne.n	8006a44 <HAL_RCC_OscConfig+0x98>
 8006a2a:	4b70      	ldr	r3, [pc, #448]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a6f      	ldr	r2, [pc, #444]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	4b6d      	ldr	r3, [pc, #436]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a6c      	ldr	r2, [pc, #432]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a40:	6013      	str	r3, [r2, #0]
 8006a42:	e00b      	b.n	8006a5c <HAL_RCC_OscConfig+0xb0>
 8006a44:	4b69      	ldr	r3, [pc, #420]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a68      	ldr	r2, [pc, #416]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a4e:	6013      	str	r3, [r2, #0]
 8006a50:	4b66      	ldr	r3, [pc, #408]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a65      	ldr	r2, [pc, #404]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d013      	beq.n	8006a8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a64:	f7fb fe9a 	bl	800279c <HAL_GetTick>
 8006a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a6a:	e008      	b.n	8006a7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a6c:	f7fb fe96 	bl	800279c <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b64      	cmp	r3, #100	; 0x64
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e207      	b.n	8006e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a7e:	4b5b      	ldr	r3, [pc, #364]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0f0      	beq.n	8006a6c <HAL_RCC_OscConfig+0xc0>
 8006a8a:	e014      	b.n	8006ab6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a8c:	f7fb fe86 	bl	800279c <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a94:	f7fb fe82 	bl	800279c <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b64      	cmp	r3, #100	; 0x64
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e1f3      	b.n	8006e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aa6:	4b51      	ldr	r3, [pc, #324]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1f0      	bne.n	8006a94 <HAL_RCC_OscConfig+0xe8>
 8006ab2:	e000      	b.n	8006ab6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d063      	beq.n	8006b8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ac2:	4b4a      	ldr	r3, [pc, #296]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f003 030c 	and.w	r3, r3, #12
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00b      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ace:	4b47      	ldr	r3, [pc, #284]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ad6:	2b08      	cmp	r3, #8
 8006ad8:	d11c      	bne.n	8006b14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ada:	4b44      	ldr	r3, [pc, #272]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d116      	bne.n	8006b14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ae6:	4b41      	ldr	r3, [pc, #260]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d005      	beq.n	8006afe <HAL_RCC_OscConfig+0x152>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d001      	beq.n	8006afe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e1c7      	b.n	8006e8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006afe:	4b3b      	ldr	r3, [pc, #236]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	4937      	ldr	r1, [pc, #220]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b12:	e03a      	b.n	8006b8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d020      	beq.n	8006b5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b1c:	4b34      	ldr	r3, [pc, #208]	; (8006bf0 <HAL_RCC_OscConfig+0x244>)
 8006b1e:	2201      	movs	r2, #1
 8006b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b22:	f7fb fe3b 	bl	800279c <HAL_GetTick>
 8006b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b28:	e008      	b.n	8006b3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b2a:	f7fb fe37 	bl	800279c <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d901      	bls.n	8006b3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e1a8      	b.n	8006e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b3c:	4b2b      	ldr	r3, [pc, #172]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0f0      	beq.n	8006b2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b48:	4b28      	ldr	r3, [pc, #160]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	00db      	lsls	r3, r3, #3
 8006b56:	4925      	ldr	r1, [pc, #148]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	600b      	str	r3, [r1, #0]
 8006b5c:	e015      	b.n	8006b8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b5e:	4b24      	ldr	r3, [pc, #144]	; (8006bf0 <HAL_RCC_OscConfig+0x244>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b64:	f7fb fe1a 	bl	800279c <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b6c:	f7fb fe16 	bl	800279c <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e187      	b.n	8006e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b7e:	4b1b      	ldr	r3, [pc, #108]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1f0      	bne.n	8006b6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0308 	and.w	r3, r3, #8
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d036      	beq.n	8006c04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d016      	beq.n	8006bcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b9e:	4b15      	ldr	r3, [pc, #84]	; (8006bf4 <HAL_RCC_OscConfig+0x248>)
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba4:	f7fb fdfa 	bl	800279c <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bac:	f7fb fdf6 	bl	800279c <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e167      	b.n	8006e8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bbe:	4b0b      	ldr	r3, [pc, #44]	; (8006bec <HAL_RCC_OscConfig+0x240>)
 8006bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0f0      	beq.n	8006bac <HAL_RCC_OscConfig+0x200>
 8006bca:	e01b      	b.n	8006c04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bcc:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <HAL_RCC_OscConfig+0x248>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bd2:	f7fb fde3 	bl	800279c <HAL_GetTick>
 8006bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd8:	e00e      	b.n	8006bf8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bda:	f7fb fddf 	bl	800279c <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d907      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e150      	b.n	8006e8e <HAL_RCC_OscConfig+0x4e2>
 8006bec:	40023800 	.word	0x40023800
 8006bf0:	42470000 	.word	0x42470000
 8006bf4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bf8:	4b88      	ldr	r3, [pc, #544]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bfc:	f003 0302 	and.w	r3, r3, #2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1ea      	bne.n	8006bda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f000 8097 	beq.w	8006d40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c12:	2300      	movs	r3, #0
 8006c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c16:	4b81      	ldr	r3, [pc, #516]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10f      	bne.n	8006c42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c22:	2300      	movs	r3, #0
 8006c24:	60bb      	str	r3, [r7, #8]
 8006c26:	4b7d      	ldr	r3, [pc, #500]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	4a7c      	ldr	r2, [pc, #496]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c30:	6413      	str	r3, [r2, #64]	; 0x40
 8006c32:	4b7a      	ldr	r3, [pc, #488]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3a:	60bb      	str	r3, [r7, #8]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c42:	4b77      	ldr	r3, [pc, #476]	; (8006e20 <HAL_RCC_OscConfig+0x474>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d118      	bne.n	8006c80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c4e:	4b74      	ldr	r3, [pc, #464]	; (8006e20 <HAL_RCC_OscConfig+0x474>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a73      	ldr	r2, [pc, #460]	; (8006e20 <HAL_RCC_OscConfig+0x474>)
 8006c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c5a:	f7fb fd9f 	bl	800279c <HAL_GetTick>
 8006c5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c60:	e008      	b.n	8006c74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c62:	f7fb fd9b 	bl	800279c <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d901      	bls.n	8006c74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e10c      	b.n	8006e8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c74:	4b6a      	ldr	r3, [pc, #424]	; (8006e20 <HAL_RCC_OscConfig+0x474>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d0f0      	beq.n	8006c62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d106      	bne.n	8006c96 <HAL_RCC_OscConfig+0x2ea>
 8006c88:	4b64      	ldr	r3, [pc, #400]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8c:	4a63      	ldr	r2, [pc, #396]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006c8e:	f043 0301 	orr.w	r3, r3, #1
 8006c92:	6713      	str	r3, [r2, #112]	; 0x70
 8006c94:	e01c      	b.n	8006cd0 <HAL_RCC_OscConfig+0x324>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b05      	cmp	r3, #5
 8006c9c:	d10c      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x30c>
 8006c9e:	4b5f      	ldr	r3, [pc, #380]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca2:	4a5e      	ldr	r2, [pc, #376]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006ca4:	f043 0304 	orr.w	r3, r3, #4
 8006ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8006caa:	4b5c      	ldr	r3, [pc, #368]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cae:	4a5b      	ldr	r2, [pc, #364]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006cb0:	f043 0301 	orr.w	r3, r3, #1
 8006cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8006cb6:	e00b      	b.n	8006cd0 <HAL_RCC_OscConfig+0x324>
 8006cb8:	4b58      	ldr	r3, [pc, #352]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbc:	4a57      	ldr	r2, [pc, #348]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006cbe:	f023 0301 	bic.w	r3, r3, #1
 8006cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8006cc4:	4b55      	ldr	r3, [pc, #340]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc8:	4a54      	ldr	r2, [pc, #336]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006cca:	f023 0304 	bic.w	r3, r3, #4
 8006cce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d015      	beq.n	8006d04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd8:	f7fb fd60 	bl	800279c <HAL_GetTick>
 8006cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cde:	e00a      	b.n	8006cf6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ce0:	f7fb fd5c 	bl	800279c <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e0cb      	b.n	8006e8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cf6:	4b49      	ldr	r3, [pc, #292]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0ee      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x334>
 8006d02:	e014      	b.n	8006d2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d04:	f7fb fd4a 	bl	800279c <HAL_GetTick>
 8006d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d0a:	e00a      	b.n	8006d22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d0c:	f7fb fd46 	bl	800279c <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e0b5      	b.n	8006e8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d22:	4b3e      	ldr	r3, [pc, #248]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1ee      	bne.n	8006d0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d105      	bne.n	8006d40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d34:	4b39      	ldr	r3, [pc, #228]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d38:	4a38      	ldr	r2, [pc, #224]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 80a1 	beq.w	8006e8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d4a:	4b34      	ldr	r3, [pc, #208]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f003 030c 	and.w	r3, r3, #12
 8006d52:	2b08      	cmp	r3, #8
 8006d54:	d05c      	beq.n	8006e10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d141      	bne.n	8006de2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d5e:	4b31      	ldr	r3, [pc, #196]	; (8006e24 <HAL_RCC_OscConfig+0x478>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d64:	f7fb fd1a 	bl	800279c <HAL_GetTick>
 8006d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d6a:	e008      	b.n	8006d7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d6c:	f7fb fd16 	bl	800279c <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e087      	b.n	8006e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d7e:	4b27      	ldr	r3, [pc, #156]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1f0      	bne.n	8006d6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69da      	ldr	r2, [r3, #28]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	431a      	orrs	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	019b      	lsls	r3, r3, #6
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da0:	085b      	lsrs	r3, r3, #1
 8006da2:	3b01      	subs	r3, #1
 8006da4:	041b      	lsls	r3, r3, #16
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	061b      	lsls	r3, r3, #24
 8006dae:	491b      	ldr	r1, [pc, #108]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006db4:	4b1b      	ldr	r3, [pc, #108]	; (8006e24 <HAL_RCC_OscConfig+0x478>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dba:	f7fb fcef 	bl	800279c <HAL_GetTick>
 8006dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dc0:	e008      	b.n	8006dd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dc2:	f7fb fceb 	bl	800279c <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d901      	bls.n	8006dd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e05c      	b.n	8006e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dd4:	4b11      	ldr	r3, [pc, #68]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0f0      	beq.n	8006dc2 <HAL_RCC_OscConfig+0x416>
 8006de0:	e054      	b.n	8006e8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006de2:	4b10      	ldr	r3, [pc, #64]	; (8006e24 <HAL_RCC_OscConfig+0x478>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de8:	f7fb fcd8 	bl	800279c <HAL_GetTick>
 8006dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dee:	e008      	b.n	8006e02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006df0:	f7fb fcd4 	bl	800279c <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e045      	b.n	8006e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e02:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <HAL_RCC_OscConfig+0x470>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1f0      	bne.n	8006df0 <HAL_RCC_OscConfig+0x444>
 8006e0e:	e03d      	b.n	8006e8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d107      	bne.n	8006e28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e038      	b.n	8006e8e <HAL_RCC_OscConfig+0x4e2>
 8006e1c:	40023800 	.word	0x40023800
 8006e20:	40007000 	.word	0x40007000
 8006e24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e28:	4b1b      	ldr	r3, [pc, #108]	; (8006e98 <HAL_RCC_OscConfig+0x4ec>)
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d028      	beq.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d121      	bne.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d11a      	bne.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e58:	4013      	ands	r3, r2
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d111      	bne.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6e:	085b      	lsrs	r3, r3, #1
 8006e70:	3b01      	subs	r3, #1
 8006e72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d107      	bne.n	8006e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d001      	beq.n	8006e8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e000      	b.n	8006e8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40023800 	.word	0x40023800

08006e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e0cc      	b.n	800704a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006eb0:	4b68      	ldr	r3, [pc, #416]	; (8007054 <HAL_RCC_ClockConfig+0x1b8>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d90c      	bls.n	8006ed8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ebe:	4b65      	ldr	r3, [pc, #404]	; (8007054 <HAL_RCC_ClockConfig+0x1b8>)
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	b2d2      	uxtb	r2, r2
 8006ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ec6:	4b63      	ldr	r3, [pc, #396]	; (8007054 <HAL_RCC_ClockConfig+0x1b8>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d001      	beq.n	8006ed8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e0b8      	b.n	800704a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d020      	beq.n	8006f26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d005      	beq.n	8006efc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ef0:	4b59      	ldr	r3, [pc, #356]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	4a58      	ldr	r2, [pc, #352]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006efa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0308 	and.w	r3, r3, #8
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d005      	beq.n	8006f14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f08:	4b53      	ldr	r3, [pc, #332]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	4a52      	ldr	r2, [pc, #328]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006f0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f14:	4b50      	ldr	r3, [pc, #320]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	494d      	ldr	r1, [pc, #308]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d044      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d107      	bne.n	8006f4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f3a:	4b47      	ldr	r3, [pc, #284]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d119      	bne.n	8006f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e07f      	b.n	800704a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d003      	beq.n	8006f5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d107      	bne.n	8006f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f5a:	4b3f      	ldr	r3, [pc, #252]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d109      	bne.n	8006f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e06f      	b.n	800704a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f6a:	4b3b      	ldr	r3, [pc, #236]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e067      	b.n	800704a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f7a:	4b37      	ldr	r3, [pc, #220]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f023 0203 	bic.w	r2, r3, #3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	4934      	ldr	r1, [pc, #208]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f8c:	f7fb fc06 	bl	800279c <HAL_GetTick>
 8006f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f92:	e00a      	b.n	8006faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f94:	f7fb fc02 	bl	800279c <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e04f      	b.n	800704a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006faa:	4b2b      	ldr	r3, [pc, #172]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f003 020c 	and.w	r2, r3, #12
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d1eb      	bne.n	8006f94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fbc:	4b25      	ldr	r3, [pc, #148]	; (8007054 <HAL_RCC_ClockConfig+0x1b8>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0307 	and.w	r3, r3, #7
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d20c      	bcs.n	8006fe4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fca:	4b22      	ldr	r3, [pc, #136]	; (8007054 <HAL_RCC_ClockConfig+0x1b8>)
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fd2:	4b20      	ldr	r3, [pc, #128]	; (8007054 <HAL_RCC_ClockConfig+0x1b8>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0307 	and.w	r3, r3, #7
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d001      	beq.n	8006fe4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e032      	b.n	800704a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d008      	beq.n	8007002 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ff0:	4b19      	ldr	r3, [pc, #100]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	4916      	ldr	r1, [pc, #88]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0308 	and.w	r3, r3, #8
 800700a:	2b00      	cmp	r3, #0
 800700c:	d009      	beq.n	8007022 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800700e:	4b12      	ldr	r3, [pc, #72]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	00db      	lsls	r3, r3, #3
 800701c:	490e      	ldr	r1, [pc, #56]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	4313      	orrs	r3, r2
 8007020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007022:	f000 f821 	bl	8007068 <HAL_RCC_GetSysClockFreq>
 8007026:	4602      	mov	r2, r0
 8007028:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <HAL_RCC_ClockConfig+0x1bc>)
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	091b      	lsrs	r3, r3, #4
 800702e:	f003 030f 	and.w	r3, r3, #15
 8007032:	490a      	ldr	r1, [pc, #40]	; (800705c <HAL_RCC_ClockConfig+0x1c0>)
 8007034:	5ccb      	ldrb	r3, [r1, r3]
 8007036:	fa22 f303 	lsr.w	r3, r2, r3
 800703a:	4a09      	ldr	r2, [pc, #36]	; (8007060 <HAL_RCC_ClockConfig+0x1c4>)
 800703c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800703e:	4b09      	ldr	r3, [pc, #36]	; (8007064 <HAL_RCC_ClockConfig+0x1c8>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4618      	mov	r0, r3
 8007044:	f7fb fb66 	bl	8002714 <HAL_InitTick>

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	40023c00 	.word	0x40023c00
 8007058:	40023800 	.word	0x40023800
 800705c:	0800ba78 	.word	0x0800ba78
 8007060:	20000024 	.word	0x20000024
 8007064:	20000028 	.word	0x20000028

08007068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800706c:	b094      	sub	sp, #80	; 0x50
 800706e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	647b      	str	r3, [r7, #68]	; 0x44
 8007074:	2300      	movs	r3, #0
 8007076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007078:	2300      	movs	r3, #0
 800707a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007080:	4b79      	ldr	r3, [pc, #484]	; (8007268 <HAL_RCC_GetSysClockFreq+0x200>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f003 030c 	and.w	r3, r3, #12
 8007088:	2b08      	cmp	r3, #8
 800708a:	d00d      	beq.n	80070a8 <HAL_RCC_GetSysClockFreq+0x40>
 800708c:	2b08      	cmp	r3, #8
 800708e:	f200 80e1 	bhi.w	8007254 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <HAL_RCC_GetSysClockFreq+0x34>
 8007096:	2b04      	cmp	r3, #4
 8007098:	d003      	beq.n	80070a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800709a:	e0db      	b.n	8007254 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800709c:	4b73      	ldr	r3, [pc, #460]	; (800726c <HAL_RCC_GetSysClockFreq+0x204>)
 800709e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80070a0:	e0db      	b.n	800725a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070a2:	4b73      	ldr	r3, [pc, #460]	; (8007270 <HAL_RCC_GetSysClockFreq+0x208>)
 80070a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80070a6:	e0d8      	b.n	800725a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070a8:	4b6f      	ldr	r3, [pc, #444]	; (8007268 <HAL_RCC_GetSysClockFreq+0x200>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070b2:	4b6d      	ldr	r3, [pc, #436]	; (8007268 <HAL_RCC_GetSysClockFreq+0x200>)
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d063      	beq.n	8007186 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070be:	4b6a      	ldr	r3, [pc, #424]	; (8007268 <HAL_RCC_GetSysClockFreq+0x200>)
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	099b      	lsrs	r3, r3, #6
 80070c4:	2200      	movs	r2, #0
 80070c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80070c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80070ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d0:	633b      	str	r3, [r7, #48]	; 0x30
 80070d2:	2300      	movs	r3, #0
 80070d4:	637b      	str	r3, [r7, #52]	; 0x34
 80070d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80070da:	4622      	mov	r2, r4
 80070dc:	462b      	mov	r3, r5
 80070de:	f04f 0000 	mov.w	r0, #0
 80070e2:	f04f 0100 	mov.w	r1, #0
 80070e6:	0159      	lsls	r1, r3, #5
 80070e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070ec:	0150      	lsls	r0, r2, #5
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	4621      	mov	r1, r4
 80070f4:	1a51      	subs	r1, r2, r1
 80070f6:	6139      	str	r1, [r7, #16]
 80070f8:	4629      	mov	r1, r5
 80070fa:	eb63 0301 	sbc.w	r3, r3, r1
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800710c:	4659      	mov	r1, fp
 800710e:	018b      	lsls	r3, r1, #6
 8007110:	4651      	mov	r1, sl
 8007112:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007116:	4651      	mov	r1, sl
 8007118:	018a      	lsls	r2, r1, #6
 800711a:	4651      	mov	r1, sl
 800711c:	ebb2 0801 	subs.w	r8, r2, r1
 8007120:	4659      	mov	r1, fp
 8007122:	eb63 0901 	sbc.w	r9, r3, r1
 8007126:	f04f 0200 	mov.w	r2, #0
 800712a:	f04f 0300 	mov.w	r3, #0
 800712e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800713a:	4690      	mov	r8, r2
 800713c:	4699      	mov	r9, r3
 800713e:	4623      	mov	r3, r4
 8007140:	eb18 0303 	adds.w	r3, r8, r3
 8007144:	60bb      	str	r3, [r7, #8]
 8007146:	462b      	mov	r3, r5
 8007148:	eb49 0303 	adc.w	r3, r9, r3
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	f04f 0200 	mov.w	r2, #0
 8007152:	f04f 0300 	mov.w	r3, #0
 8007156:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800715a:	4629      	mov	r1, r5
 800715c:	024b      	lsls	r3, r1, #9
 800715e:	4621      	mov	r1, r4
 8007160:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007164:	4621      	mov	r1, r4
 8007166:	024a      	lsls	r2, r1, #9
 8007168:	4610      	mov	r0, r2
 800716a:	4619      	mov	r1, r3
 800716c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800716e:	2200      	movs	r2, #0
 8007170:	62bb      	str	r3, [r7, #40]	; 0x28
 8007172:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007174:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007178:	f7f9 fc4c 	bl	8000a14 <__aeabi_uldivmod>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	4613      	mov	r3, r2
 8007182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007184:	e058      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007186:	4b38      	ldr	r3, [pc, #224]	; (8007268 <HAL_RCC_GetSysClockFreq+0x200>)
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	099b      	lsrs	r3, r3, #6
 800718c:	2200      	movs	r2, #0
 800718e:	4618      	mov	r0, r3
 8007190:	4611      	mov	r1, r2
 8007192:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007196:	623b      	str	r3, [r7, #32]
 8007198:	2300      	movs	r3, #0
 800719a:	627b      	str	r3, [r7, #36]	; 0x24
 800719c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80071a0:	4642      	mov	r2, r8
 80071a2:	464b      	mov	r3, r9
 80071a4:	f04f 0000 	mov.w	r0, #0
 80071a8:	f04f 0100 	mov.w	r1, #0
 80071ac:	0159      	lsls	r1, r3, #5
 80071ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071b2:	0150      	lsls	r0, r2, #5
 80071b4:	4602      	mov	r2, r0
 80071b6:	460b      	mov	r3, r1
 80071b8:	4641      	mov	r1, r8
 80071ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80071be:	4649      	mov	r1, r9
 80071c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80071c4:	f04f 0200 	mov.w	r2, #0
 80071c8:	f04f 0300 	mov.w	r3, #0
 80071cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80071d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80071d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80071d8:	ebb2 040a 	subs.w	r4, r2, sl
 80071dc:	eb63 050b 	sbc.w	r5, r3, fp
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	00eb      	lsls	r3, r5, #3
 80071ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071ee:	00e2      	lsls	r2, r4, #3
 80071f0:	4614      	mov	r4, r2
 80071f2:	461d      	mov	r5, r3
 80071f4:	4643      	mov	r3, r8
 80071f6:	18e3      	adds	r3, r4, r3
 80071f8:	603b      	str	r3, [r7, #0]
 80071fa:	464b      	mov	r3, r9
 80071fc:	eb45 0303 	adc.w	r3, r5, r3
 8007200:	607b      	str	r3, [r7, #4]
 8007202:	f04f 0200 	mov.w	r2, #0
 8007206:	f04f 0300 	mov.w	r3, #0
 800720a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800720e:	4629      	mov	r1, r5
 8007210:	028b      	lsls	r3, r1, #10
 8007212:	4621      	mov	r1, r4
 8007214:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007218:	4621      	mov	r1, r4
 800721a:	028a      	lsls	r2, r1, #10
 800721c:	4610      	mov	r0, r2
 800721e:	4619      	mov	r1, r3
 8007220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007222:	2200      	movs	r2, #0
 8007224:	61bb      	str	r3, [r7, #24]
 8007226:	61fa      	str	r2, [r7, #28]
 8007228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800722c:	f7f9 fbf2 	bl	8000a14 <__aeabi_uldivmod>
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	4613      	mov	r3, r2
 8007236:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007238:	4b0b      	ldr	r3, [pc, #44]	; (8007268 <HAL_RCC_GetSysClockFreq+0x200>)
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	0c1b      	lsrs	r3, r3, #16
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	3301      	adds	r3, #1
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007248:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800724a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800724c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007250:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007252:	e002      	b.n	800725a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007254:	4b05      	ldr	r3, [pc, #20]	; (800726c <HAL_RCC_GetSysClockFreq+0x204>)
 8007256:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800725a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800725c:	4618      	mov	r0, r3
 800725e:	3750      	adds	r7, #80	; 0x50
 8007260:	46bd      	mov	sp, r7
 8007262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007266:	bf00      	nop
 8007268:	40023800 	.word	0x40023800
 800726c:	00f42400 	.word	0x00f42400
 8007270:	007a1200 	.word	0x007a1200

08007274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007274:	b480      	push	{r7}
 8007276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007278:	4b03      	ldr	r3, [pc, #12]	; (8007288 <HAL_RCC_GetHCLKFreq+0x14>)
 800727a:	681b      	ldr	r3, [r3, #0]
}
 800727c:	4618      	mov	r0, r3
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	20000024 	.word	0x20000024

0800728c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007290:	f7ff fff0 	bl	8007274 <HAL_RCC_GetHCLKFreq>
 8007294:	4602      	mov	r2, r0
 8007296:	4b05      	ldr	r3, [pc, #20]	; (80072ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	0a9b      	lsrs	r3, r3, #10
 800729c:	f003 0307 	and.w	r3, r3, #7
 80072a0:	4903      	ldr	r1, [pc, #12]	; (80072b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072a2:	5ccb      	ldrb	r3, [r1, r3]
 80072a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	40023800 	.word	0x40023800
 80072b0:	0800ba88 	.word	0x0800ba88

080072b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d105      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d038      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80072dc:	4b68      	ldr	r3, [pc, #416]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80072de:	2200      	movs	r2, #0
 80072e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072e2:	f7fb fa5b 	bl	800279c <HAL_GetTick>
 80072e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072e8:	e008      	b.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072ea:	f7fb fa57 	bl	800279c <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d901      	bls.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e0bd      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072fc:	4b61      	ldr	r3, [pc, #388]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1f0      	bne.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	019b      	lsls	r3, r3, #6
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	071b      	lsls	r3, r3, #28
 800731a:	495a      	ldr	r1, [pc, #360]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800731c:	4313      	orrs	r3, r2
 800731e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007322:	4b57      	ldr	r3, [pc, #348]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007324:	2201      	movs	r2, #1
 8007326:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007328:	f7fb fa38 	bl	800279c <HAL_GetTick>
 800732c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800732e:	e008      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007330:	f7fb fa34 	bl	800279c <HAL_GetTick>
 8007334:	4602      	mov	r2, r0
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	2b02      	cmp	r3, #2
 800733c:	d901      	bls.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e09a      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007342:	4b50      	ldr	r3, [pc, #320]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0f0      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 8083 	beq.w	8007462 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	4b48      	ldr	r3, [pc, #288]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	4a47      	ldr	r2, [pc, #284]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800736a:	6413      	str	r3, [r2, #64]	; 0x40
 800736c:	4b45      	ldr	r3, [pc, #276]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800736e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007378:	4b43      	ldr	r3, [pc, #268]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a42      	ldr	r2, [pc, #264]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800737e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007382:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007384:	f7fb fa0a 	bl	800279c <HAL_GetTick>
 8007388:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800738a:	e008      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800738c:	f7fb fa06 	bl	800279c <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b02      	cmp	r3, #2
 8007398:	d901      	bls.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e06c      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800739e:	4b3a      	ldr	r3, [pc, #232]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0f0      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073aa:	4b36      	ldr	r3, [pc, #216]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073b2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d02f      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d028      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073c8:	4b2e      	ldr	r3, [pc, #184]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073d0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073d2:	4b2e      	ldr	r3, [pc, #184]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80073d4:	2201      	movs	r2, #1
 80073d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073d8:	4b2c      	ldr	r3, [pc, #176]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80073de:	4a29      	ldr	r2, [pc, #164]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80073e4:	4b27      	ldr	r3, [pc, #156]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d114      	bne.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80073f0:	f7fb f9d4 	bl	800279c <HAL_GetTick>
 80073f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073f6:	e00a      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073f8:	f7fb f9d0 	bl	800279c <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	f241 3288 	movw	r2, #5000	; 0x1388
 8007406:	4293      	cmp	r3, r2
 8007408:	d901      	bls.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e034      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800740e:	4b1d      	ldr	r3, [pc, #116]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0ee      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007426:	d10d      	bne.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007428:	4b16      	ldr	r3, [pc, #88]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800743c:	4911      	ldr	r1, [pc, #68]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800743e:	4313      	orrs	r3, r2
 8007440:	608b      	str	r3, [r1, #8]
 8007442:	e005      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007444:	4b0f      	ldr	r3, [pc, #60]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	4a0e      	ldr	r2, [pc, #56]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800744a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800744e:	6093      	str	r3, [r2, #8]
 8007450:	4b0c      	ldr	r3, [pc, #48]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800745c:	4909      	ldr	r1, [pc, #36]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800745e:	4313      	orrs	r3, r2
 8007460:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0308 	and.w	r3, r3, #8
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	7d1a      	ldrb	r2, [r3, #20]
 8007472:	4b07      	ldr	r3, [pc, #28]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007474:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	42470068 	.word	0x42470068
 8007484:	40023800 	.word	0x40023800
 8007488:	40007000 	.word	0x40007000
 800748c:	42470e40 	.word	0x42470e40
 8007490:	424711e0 	.word	0x424711e0

08007494 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80074a0:	2300      	movs	r3, #0
 80074a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d141      	bne.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80074b2:	4b25      	ldr	r3, [pc, #148]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d006      	beq.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074c8:	d131      	bne.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80074ca:	4b20      	ldr	r3, [pc, #128]	; (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80074cc:	617b      	str	r3, [r7, #20]
          break;
 80074ce:	e031      	b.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80074d0:	4b1d      	ldr	r3, [pc, #116]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074dc:	d109      	bne.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80074de:	4b1a      	ldr	r3, [pc, #104]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80074e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074e8:	4a19      	ldr	r2, [pc, #100]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80074ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ee:	613b      	str	r3, [r7, #16]
 80074f0:	e008      	b.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80074f2:	4b15      	ldr	r3, [pc, #84]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80074f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074fc:	4a15      	ldr	r2, [pc, #84]	; (8007554 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80074fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007502:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007504:	4b10      	ldr	r3, [pc, #64]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800750a:	099b      	lsrs	r3, r3, #6
 800750c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	fb02 f303 	mul.w	r3, r2, r3
 8007516:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007518:	4b0b      	ldr	r3, [pc, #44]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800751a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800751e:	0f1b      	lsrs	r3, r3, #28
 8007520:	f003 0307 	and.w	r3, r3, #7
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	fbb2 f3f3 	udiv	r3, r2, r3
 800752a:	617b      	str	r3, [r7, #20]
          break;
 800752c:	e002      	b.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800752e:	2300      	movs	r3, #0
 8007530:	617b      	str	r3, [r7, #20]
          break;
 8007532:	bf00      	nop
        }
      }
      break;
 8007534:	e000      	b.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 8007536:	bf00      	nop
    }
  }
  return frequency;
 8007538:	697b      	ldr	r3, [r7, #20]
}
 800753a:	4618      	mov	r0, r3
 800753c:	371c      	adds	r7, #28
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	40023800 	.word	0x40023800
 800754c:	00bb8000 	.word	0x00bb8000
 8007550:	007a1200 	.word	0x007a1200
 8007554:	00f42400 	.word	0x00f42400

08007558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e041      	b.n	80075ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d106      	bne.n	8007584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7fa ff4a 	bl	8002418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3304      	adds	r3, #4
 8007594:	4619      	mov	r1, r3
 8007596:	4610      	mov	r0, r2
 8007598:	f000 faf8 	bl	8007b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2b01      	cmp	r3, #1
 800760a:	d001      	beq.n	8007610 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e03c      	b.n	800768a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a1e      	ldr	r2, [pc, #120]	; (8007698 <HAL_TIM_Base_Start+0xa0>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d018      	beq.n	8007654 <HAL_TIM_Base_Start+0x5c>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800762a:	d013      	beq.n	8007654 <HAL_TIM_Base_Start+0x5c>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a1a      	ldr	r2, [pc, #104]	; (800769c <HAL_TIM_Base_Start+0xa4>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d00e      	beq.n	8007654 <HAL_TIM_Base_Start+0x5c>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a19      	ldr	r2, [pc, #100]	; (80076a0 <HAL_TIM_Base_Start+0xa8>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d009      	beq.n	8007654 <HAL_TIM_Base_Start+0x5c>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a17      	ldr	r2, [pc, #92]	; (80076a4 <HAL_TIM_Base_Start+0xac>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d004      	beq.n	8007654 <HAL_TIM_Base_Start+0x5c>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a16      	ldr	r2, [pc, #88]	; (80076a8 <HAL_TIM_Base_Start+0xb0>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d111      	bne.n	8007678 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f003 0307 	and.w	r3, r3, #7
 800765e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2b06      	cmp	r3, #6
 8007664:	d010      	beq.n	8007688 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f042 0201 	orr.w	r2, r2, #1
 8007674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007676:	e007      	b.n	8007688 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0201 	orr.w	r2, r2, #1
 8007686:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	40010000 	.word	0x40010000
 800769c:	40000400 	.word	0x40000400
 80076a0:	40000800 	.word	0x40000800
 80076a4:	40000c00 	.word	0x40000c00
 80076a8:	40014000 	.word	0x40014000

080076ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d001      	beq.n	80076c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e044      	b.n	800774e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 0201 	orr.w	r2, r2, #1
 80076da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a1e      	ldr	r2, [pc, #120]	; (800775c <HAL_TIM_Base_Start_IT+0xb0>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d018      	beq.n	8007718 <HAL_TIM_Base_Start_IT+0x6c>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ee:	d013      	beq.n	8007718 <HAL_TIM_Base_Start_IT+0x6c>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a1a      	ldr	r2, [pc, #104]	; (8007760 <HAL_TIM_Base_Start_IT+0xb4>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d00e      	beq.n	8007718 <HAL_TIM_Base_Start_IT+0x6c>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a19      	ldr	r2, [pc, #100]	; (8007764 <HAL_TIM_Base_Start_IT+0xb8>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d009      	beq.n	8007718 <HAL_TIM_Base_Start_IT+0x6c>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a17      	ldr	r2, [pc, #92]	; (8007768 <HAL_TIM_Base_Start_IT+0xbc>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d004      	beq.n	8007718 <HAL_TIM_Base_Start_IT+0x6c>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a16      	ldr	r2, [pc, #88]	; (800776c <HAL_TIM_Base_Start_IT+0xc0>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d111      	bne.n	800773c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 0307 	and.w	r3, r3, #7
 8007722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b06      	cmp	r3, #6
 8007728:	d010      	beq.n	800774c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f042 0201 	orr.w	r2, r2, #1
 8007738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800773a:	e007      	b.n	800774c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f042 0201 	orr.w	r2, r2, #1
 800774a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	40010000 	.word	0x40010000
 8007760:	40000400 	.word	0x40000400
 8007764:	40000800 	.word	0x40000800
 8007768:	40000c00 	.word	0x40000c00
 800776c:	40014000 	.word	0x40014000

08007770 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f022 0201 	bic.w	r2, r2, #1
 8007786:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6a1a      	ldr	r2, [r3, #32]
 800778e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007792:	4013      	ands	r3, r2
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10f      	bne.n	80077b8 <HAL_TIM_Base_Stop_IT+0x48>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6a1a      	ldr	r2, [r3, #32]
 800779e:	f240 4344 	movw	r3, #1092	; 0x444
 80077a2:	4013      	ands	r3, r2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d107      	bne.n	80077b8 <HAL_TIM_Base_Stop_IT+0x48>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0201 	bic.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b084      	sub	sp, #16
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f003 0302 	and.w	r3, r3, #2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d020      	beq.n	8007832 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d01b      	beq.n	8007832 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f06f 0202 	mvn.w	r2, #2
 8007802:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	f003 0303 	and.w	r3, r3, #3
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f999 	bl	8007b50 <HAL_TIM_IC_CaptureCallback>
 800781e:	e005      	b.n	800782c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f98b 	bl	8007b3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f99c 	bl	8007b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b00      	cmp	r3, #0
 800783a:	d020      	beq.n	800787e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f003 0304 	and.w	r3, r3, #4
 8007842:	2b00      	cmp	r3, #0
 8007844:	d01b      	beq.n	800787e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f06f 0204 	mvn.w	r2, #4
 800784e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f973 	bl	8007b50 <HAL_TIM_IC_CaptureCallback>
 800786a:	e005      	b.n	8007878 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f965 	bl	8007b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f976 	bl	8007b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f003 0308 	and.w	r3, r3, #8
 8007884:	2b00      	cmp	r3, #0
 8007886:	d020      	beq.n	80078ca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f003 0308 	and.w	r3, r3, #8
 800788e:	2b00      	cmp	r3, #0
 8007890:	d01b      	beq.n	80078ca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f06f 0208 	mvn.w	r2, #8
 800789a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2204      	movs	r2, #4
 80078a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	f003 0303 	and.w	r3, r3, #3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f94d 	bl	8007b50 <HAL_TIM_IC_CaptureCallback>
 80078b6:	e005      	b.n	80078c4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f93f 	bl	8007b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f950 	bl	8007b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f003 0310 	and.w	r3, r3, #16
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d020      	beq.n	8007916 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f003 0310 	and.w	r3, r3, #16
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d01b      	beq.n	8007916 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f06f 0210 	mvn.w	r2, #16
 80078e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2208      	movs	r2, #8
 80078ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d003      	beq.n	8007904 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f927 	bl	8007b50 <HAL_TIM_IC_CaptureCallback>
 8007902:	e005      	b.n	8007910 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f919 	bl	8007b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f92a 	bl	8007b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00c      	beq.n	800793a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d007      	beq.n	800793a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f06f 0201 	mvn.w	r2, #1
 8007932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7fa fb03 	bl	8001f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00c      	beq.n	800795e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800794a:	2b00      	cmp	r3, #0
 800794c:	d007      	beq.n	800795e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fab5 	bl	8007ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00c      	beq.n	8007982 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	d007      	beq.n	8007982 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800797a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f8fb 	bl	8007b78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	f003 0320 	and.w	r3, r3, #32
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00c      	beq.n	80079a6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f003 0320 	and.w	r3, r3, #32
 8007992:	2b00      	cmp	r3, #0
 8007994:	d007      	beq.n	80079a6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f06f 0220 	mvn.w	r2, #32
 800799e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fa87 	bl	8007eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079a6:	bf00      	nop
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d101      	bne.n	80079ca <HAL_TIM_ConfigClockSource+0x1c>
 80079c6:	2302      	movs	r3, #2
 80079c8:	e0b4      	b.n	8007b34 <HAL_TIM_ConfigClockSource+0x186>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2202      	movs	r2, #2
 80079d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079f0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a02:	d03e      	beq.n	8007a82 <HAL_TIM_ConfigClockSource+0xd4>
 8007a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a08:	f200 8087 	bhi.w	8007b1a <HAL_TIM_ConfigClockSource+0x16c>
 8007a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a10:	f000 8086 	beq.w	8007b20 <HAL_TIM_ConfigClockSource+0x172>
 8007a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a18:	d87f      	bhi.n	8007b1a <HAL_TIM_ConfigClockSource+0x16c>
 8007a1a:	2b70      	cmp	r3, #112	; 0x70
 8007a1c:	d01a      	beq.n	8007a54 <HAL_TIM_ConfigClockSource+0xa6>
 8007a1e:	2b70      	cmp	r3, #112	; 0x70
 8007a20:	d87b      	bhi.n	8007b1a <HAL_TIM_ConfigClockSource+0x16c>
 8007a22:	2b60      	cmp	r3, #96	; 0x60
 8007a24:	d050      	beq.n	8007ac8 <HAL_TIM_ConfigClockSource+0x11a>
 8007a26:	2b60      	cmp	r3, #96	; 0x60
 8007a28:	d877      	bhi.n	8007b1a <HAL_TIM_ConfigClockSource+0x16c>
 8007a2a:	2b50      	cmp	r3, #80	; 0x50
 8007a2c:	d03c      	beq.n	8007aa8 <HAL_TIM_ConfigClockSource+0xfa>
 8007a2e:	2b50      	cmp	r3, #80	; 0x50
 8007a30:	d873      	bhi.n	8007b1a <HAL_TIM_ConfigClockSource+0x16c>
 8007a32:	2b40      	cmp	r3, #64	; 0x40
 8007a34:	d058      	beq.n	8007ae8 <HAL_TIM_ConfigClockSource+0x13a>
 8007a36:	2b40      	cmp	r3, #64	; 0x40
 8007a38:	d86f      	bhi.n	8007b1a <HAL_TIM_ConfigClockSource+0x16c>
 8007a3a:	2b30      	cmp	r3, #48	; 0x30
 8007a3c:	d064      	beq.n	8007b08 <HAL_TIM_ConfigClockSource+0x15a>
 8007a3e:	2b30      	cmp	r3, #48	; 0x30
 8007a40:	d86b      	bhi.n	8007b1a <HAL_TIM_ConfigClockSource+0x16c>
 8007a42:	2b20      	cmp	r3, #32
 8007a44:	d060      	beq.n	8007b08 <HAL_TIM_ConfigClockSource+0x15a>
 8007a46:	2b20      	cmp	r3, #32
 8007a48:	d867      	bhi.n	8007b1a <HAL_TIM_ConfigClockSource+0x16c>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d05c      	beq.n	8007b08 <HAL_TIM_ConfigClockSource+0x15a>
 8007a4e:	2b10      	cmp	r3, #16
 8007a50:	d05a      	beq.n	8007b08 <HAL_TIM_ConfigClockSource+0x15a>
 8007a52:	e062      	b.n	8007b1a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a64:	f000 f998 	bl	8007d98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	609a      	str	r2, [r3, #8]
      break;
 8007a80:	e04f      	b.n	8007b22 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a92:	f000 f981 	bl	8007d98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007aa4:	609a      	str	r2, [r3, #8]
      break;
 8007aa6:	e03c      	b.n	8007b22 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f000 f8f5 	bl	8007ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2150      	movs	r1, #80	; 0x50
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f000 f94e 	bl	8007d62 <TIM_ITRx_SetConfig>
      break;
 8007ac6:	e02c      	b.n	8007b22 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	f000 f914 	bl	8007d02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2160      	movs	r1, #96	; 0x60
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 f93e 	bl	8007d62 <TIM_ITRx_SetConfig>
      break;
 8007ae6:	e01c      	b.n	8007b22 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007af4:	461a      	mov	r2, r3
 8007af6:	f000 f8d5 	bl	8007ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2140      	movs	r1, #64	; 0x40
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 f92e 	bl	8007d62 <TIM_ITRx_SetConfig>
      break;
 8007b06:	e00c      	b.n	8007b22 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4619      	mov	r1, r3
 8007b12:	4610      	mov	r0, r2
 8007b14:	f000 f925 	bl	8007d62 <TIM_ITRx_SetConfig>
      break;
 8007b18:	e003      	b.n	8007b22 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b1e:	e000      	b.n	8007b22 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a3a      	ldr	r2, [pc, #232]	; (8007c88 <TIM_Base_SetConfig+0xfc>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00f      	beq.n	8007bc4 <TIM_Base_SetConfig+0x38>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007baa:	d00b      	beq.n	8007bc4 <TIM_Base_SetConfig+0x38>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a37      	ldr	r2, [pc, #220]	; (8007c8c <TIM_Base_SetConfig+0x100>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d007      	beq.n	8007bc4 <TIM_Base_SetConfig+0x38>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a36      	ldr	r2, [pc, #216]	; (8007c90 <TIM_Base_SetConfig+0x104>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d003      	beq.n	8007bc4 <TIM_Base_SetConfig+0x38>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a35      	ldr	r2, [pc, #212]	; (8007c94 <TIM_Base_SetConfig+0x108>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d108      	bne.n	8007bd6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a2b      	ldr	r2, [pc, #172]	; (8007c88 <TIM_Base_SetConfig+0xfc>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d01b      	beq.n	8007c16 <TIM_Base_SetConfig+0x8a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007be4:	d017      	beq.n	8007c16 <TIM_Base_SetConfig+0x8a>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a28      	ldr	r2, [pc, #160]	; (8007c8c <TIM_Base_SetConfig+0x100>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d013      	beq.n	8007c16 <TIM_Base_SetConfig+0x8a>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a27      	ldr	r2, [pc, #156]	; (8007c90 <TIM_Base_SetConfig+0x104>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d00f      	beq.n	8007c16 <TIM_Base_SetConfig+0x8a>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a26      	ldr	r2, [pc, #152]	; (8007c94 <TIM_Base_SetConfig+0x108>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d00b      	beq.n	8007c16 <TIM_Base_SetConfig+0x8a>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a25      	ldr	r2, [pc, #148]	; (8007c98 <TIM_Base_SetConfig+0x10c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d007      	beq.n	8007c16 <TIM_Base_SetConfig+0x8a>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a24      	ldr	r2, [pc, #144]	; (8007c9c <TIM_Base_SetConfig+0x110>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d003      	beq.n	8007c16 <TIM_Base_SetConfig+0x8a>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a23      	ldr	r2, [pc, #140]	; (8007ca0 <TIM_Base_SetConfig+0x114>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d108      	bne.n	8007c28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a0e      	ldr	r2, [pc, #56]	; (8007c88 <TIM_Base_SetConfig+0xfc>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d103      	bne.n	8007c5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	691a      	ldr	r2, [r3, #16]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d105      	bne.n	8007c7a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	f023 0201 	bic.w	r2, r3, #1
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	611a      	str	r2, [r3, #16]
  }
}
 8007c7a:	bf00      	nop
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	40010000 	.word	0x40010000
 8007c8c:	40000400 	.word	0x40000400
 8007c90:	40000800 	.word	0x40000800
 8007c94:	40000c00 	.word	0x40000c00
 8007c98:	40014000 	.word	0x40014000
 8007c9c:	40014400 	.word	0x40014400
 8007ca0:	40014800 	.word	0x40014800

08007ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	f023 0201 	bic.w	r2, r3, #1
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	011b      	lsls	r3, r3, #4
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f023 030a 	bic.w	r3, r3, #10
 8007ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	621a      	str	r2, [r3, #32]
}
 8007cf6:	bf00      	nop
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b087      	sub	sp, #28
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6a1b      	ldr	r3, [r3, #32]
 8007d18:	f023 0210 	bic.w	r2, r3, #16
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	031b      	lsls	r3, r3, #12
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	011b      	lsls	r3, r3, #4
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	621a      	str	r2, [r3, #32]
}
 8007d56:	bf00      	nop
 8007d58:	371c      	adds	r7, #28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b085      	sub	sp, #20
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	f043 0307 	orr.w	r3, r3, #7
 8007d84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	609a      	str	r2, [r3, #8]
}
 8007d8c:	bf00      	nop
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b087      	sub	sp, #28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007db2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	021a      	lsls	r2, r3, #8
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	431a      	orrs	r2, r3
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	609a      	str	r2, [r3, #8]
}
 8007dcc:	bf00      	nop
 8007dce:	371c      	adds	r7, #28
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d101      	bne.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dec:	2302      	movs	r3, #2
 8007dee:	e050      	b.n	8007e92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a1c      	ldr	r2, [pc, #112]	; (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d018      	beq.n	8007e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e3c:	d013      	beq.n	8007e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a18      	ldr	r2, [pc, #96]	; (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d00e      	beq.n	8007e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a16      	ldr	r2, [pc, #88]	; (8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d009      	beq.n	8007e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a15      	ldr	r2, [pc, #84]	; (8007eac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d004      	beq.n	8007e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a13      	ldr	r2, [pc, #76]	; (8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d10c      	bne.n	8007e80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	40010000 	.word	0x40010000
 8007ea4:	40000400 	.word	0x40000400
 8007ea8:	40000800 	.word	0x40000800
 8007eac:	40000c00 	.word	0x40000c00
 8007eb0:	40014000 	.word	0x40014000

08007eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007edc:	b084      	sub	sp, #16
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	f107 001c 	add.w	r0, r7, #28
 8007eea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007eee:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d123      	bne.n	8007f3e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d105      	bne.n	8007f32 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f9dc 	bl	80082f0 <USB_CoreReset>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73fb      	strb	r3, [r7, #15]
 8007f3c:	e01b      	b.n	8007f76 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f9d0 	bl	80082f0 <USB_CoreReset>
 8007f50:	4603      	mov	r3, r0
 8007f52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007f54:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d106      	bne.n	8007f6a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	639a      	str	r2, [r3, #56]	; 0x38
 8007f68:	e005      	b.n	8007f76 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007f76:	7fbb      	ldrb	r3, [r7, #30]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d10b      	bne.n	8007f94 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	f043 0206 	orr.w	r2, r3, #6
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f043 0220 	orr.w	r2, r3, #32
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fa0:	b004      	add	sp, #16
 8007fa2:	4770      	bx	lr

08007fa4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f043 0201 	orr.w	r2, r3, #1
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b083      	sub	sp, #12
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f023 0201 	bic.w	r2, r3, #1
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d115      	bne.n	8008036 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008016:	200a      	movs	r0, #10
 8008018:	f7fa fbcc 	bl	80027b4 <HAL_Delay>
      ms += 10U;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	330a      	adds	r3, #10
 8008020:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f956 	bl	80082d4 <USB_GetMode>
 8008028:	4603      	mov	r3, r0
 800802a:	2b01      	cmp	r3, #1
 800802c:	d01e      	beq.n	800806c <USB_SetCurrentMode+0x84>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2bc7      	cmp	r3, #199	; 0xc7
 8008032:	d9f0      	bls.n	8008016 <USB_SetCurrentMode+0x2e>
 8008034:	e01a      	b.n	800806c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008036:	78fb      	ldrb	r3, [r7, #3]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d115      	bne.n	8008068 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008048:	200a      	movs	r0, #10
 800804a:	f7fa fbb3 	bl	80027b4 <HAL_Delay>
      ms += 10U;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	330a      	adds	r3, #10
 8008052:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f93d 	bl	80082d4 <USB_GetMode>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d005      	beq.n	800806c <USB_SetCurrentMode+0x84>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2bc7      	cmp	r3, #199	; 0xc7
 8008064:	d9f0      	bls.n	8008048 <USB_SetCurrentMode+0x60>
 8008066:	e001      	b.n	800806c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e005      	b.n	8008078 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2bc8      	cmp	r3, #200	; 0xc8
 8008070:	d101      	bne.n	8008076 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e000      	b.n	8008078 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3301      	adds	r3, #1
 8008092:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800809a:	d901      	bls.n	80080a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e01b      	b.n	80080d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	daf2      	bge.n	800808e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80080a8:	2300      	movs	r3, #0
 80080aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	019b      	lsls	r3, r3, #6
 80080b0:	f043 0220 	orr.w	r2, r3, #32
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	3301      	adds	r3, #1
 80080bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80080c4:	d901      	bls.n	80080ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e006      	b.n	80080d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	f003 0320 	and.w	r3, r3, #32
 80080d2:	2b20      	cmp	r3, #32
 80080d4:	d0f0      	beq.n	80080b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3714      	adds	r7, #20
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	3301      	adds	r3, #1
 80080f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80080fc:	d901      	bls.n	8008102 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e018      	b.n	8008134 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	2b00      	cmp	r3, #0
 8008108:	daf2      	bge.n	80080f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2210      	movs	r2, #16
 8008112:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	3301      	adds	r3, #1
 8008118:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008120:	d901      	bls.n	8008126 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e006      	b.n	8008134 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f003 0310 	and.w	r3, r3, #16
 800812e:	2b10      	cmp	r3, #16
 8008130:	d0f0      	beq.n	8008114 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008140:	b480      	push	{r7}
 8008142:	b089      	sub	sp, #36	; 0x24
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	4611      	mov	r1, r2
 800814c:	461a      	mov	r2, r3
 800814e:	460b      	mov	r3, r1
 8008150:	71fb      	strb	r3, [r7, #7]
 8008152:	4613      	mov	r3, r2
 8008154:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800815e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008162:	2b00      	cmp	r3, #0
 8008164:	d123      	bne.n	80081ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008166:	88bb      	ldrh	r3, [r7, #4]
 8008168:	3303      	adds	r3, #3
 800816a:	089b      	lsrs	r3, r3, #2
 800816c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800816e:	2300      	movs	r3, #0
 8008170:	61bb      	str	r3, [r7, #24]
 8008172:	e018      	b.n	80081a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008174:	79fb      	ldrb	r3, [r7, #7]
 8008176:	031a      	lsls	r2, r3, #12
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	4413      	add	r3, r2
 800817c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008180:	461a      	mov	r2, r3
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	3301      	adds	r3, #1
 800818c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	3301      	adds	r3, #1
 8008192:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	3301      	adds	r3, #1
 8008198:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	3301      	adds	r3, #1
 800819e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	3301      	adds	r3, #1
 80081a4:	61bb      	str	r3, [r7, #24]
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d3e2      	bcc.n	8008174 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3724      	adds	r7, #36	; 0x24
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80081bc:	b480      	push	{r7}
 80081be:	b08b      	sub	sp, #44	; 0x2c
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	4613      	mov	r3, r2
 80081c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80081d2:	88fb      	ldrh	r3, [r7, #6]
 80081d4:	089b      	lsrs	r3, r3, #2
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80081da:	88fb      	ldrh	r3, [r7, #6]
 80081dc:	f003 0303 	and.w	r3, r3, #3
 80081e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80081e2:	2300      	movs	r3, #0
 80081e4:	623b      	str	r3, [r7, #32]
 80081e6:	e014      	b.n	8008212 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	3301      	adds	r3, #1
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	3301      	adds	r3, #1
 80081fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008202:	3301      	adds	r3, #1
 8008204:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008208:	3301      	adds	r3, #1
 800820a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	3301      	adds	r3, #1
 8008210:	623b      	str	r3, [r7, #32]
 8008212:	6a3a      	ldr	r2, [r7, #32]
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	429a      	cmp	r2, r3
 8008218:	d3e6      	bcc.n	80081e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800821a:	8bfb      	ldrh	r3, [r7, #30]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d01e      	beq.n	800825e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008220:	2300      	movs	r3, #0
 8008222:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800822a:	461a      	mov	r2, r3
 800822c:	f107 0310 	add.w	r3, r7, #16
 8008230:	6812      	ldr	r2, [r2, #0]
 8008232:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	b2db      	uxtb	r3, r3
 800823a:	00db      	lsls	r3, r3, #3
 800823c:	fa22 f303 	lsr.w	r3, r2, r3
 8008240:	b2da      	uxtb	r2, r3
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	701a      	strb	r2, [r3, #0]
      i++;
 8008246:	6a3b      	ldr	r3, [r7, #32]
 8008248:	3301      	adds	r3, #1
 800824a:	623b      	str	r3, [r7, #32]
      pDest++;
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	3301      	adds	r3, #1
 8008250:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008252:	8bfb      	ldrh	r3, [r7, #30]
 8008254:	3b01      	subs	r3, #1
 8008256:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008258:	8bfb      	ldrh	r3, [r7, #30]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1ea      	bne.n	8008234 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008260:	4618      	mov	r0, r3
 8008262:	372c      	adds	r7, #44	; 0x2c
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	695b      	ldr	r3, [r3, #20]
 8008278:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	4013      	ands	r3, r2
 8008282:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008284:	68fb      	ldr	r3, [r7, #12]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008292:	b480      	push	{r7}
 8008294:	b085      	sub	sp, #20
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	460b      	mov	r3, r1
 800829c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80082a2:	78fb      	ldrb	r3, [r7, #3]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80082b2:	78fb      	ldrb	r3, [r7, #3]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	4013      	ands	r3, r2
 80082c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082c6:	68bb      	ldr	r3, [r7, #8]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	f003 0301 	and.w	r3, r3, #1
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	3301      	adds	r3, #1
 8008300:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008308:	d901      	bls.n	800830e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e01b      	b.n	8008346 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	2b00      	cmp	r3, #0
 8008314:	daf2      	bge.n	80082fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008316:	2300      	movs	r3, #0
 8008318:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f043 0201 	orr.w	r2, r3, #1
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	3301      	adds	r3, #1
 800832a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008332:	d901      	bls.n	8008338 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e006      	b.n	8008346 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	2b01      	cmp	r3, #1
 8008342:	d0f0      	beq.n	8008326 <USB_CoreReset+0x36>

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
	...

08008354 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008354:	b084      	sub	sp, #16
 8008356:	b580      	push	{r7, lr}
 8008358:	b086      	sub	sp, #24
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008374:	461a      	mov	r2, r3
 8008376:	2300      	movs	r3, #0
 8008378:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008396:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d119      	bne.n	80083de <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80083aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d10a      	bne.n	80083c8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083c0:	f043 0304 	orr.w	r3, r3, #4
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	e014      	b.n	80083f2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083d6:	f023 0304 	bic.w	r3, r3, #4
 80083da:	6013      	str	r3, [r2, #0]
 80083dc:	e009      	b.n	80083f2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083ec:	f023 0304 	bic.w	r3, r3, #4
 80083f0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80083f2:	2110      	movs	r1, #16
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7ff fe43 	bl	8008080 <USB_FlushTxFifo>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d001      	beq.n	8008404 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f7ff fe6d 	bl	80080e4 <USB_FlushRxFifo>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008414:	2300      	movs	r3, #0
 8008416:	613b      	str	r3, [r7, #16]
 8008418:	e015      	b.n	8008446 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4413      	add	r3, r2
 8008422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008426:	461a      	mov	r2, r3
 8008428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800842c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	4413      	add	r3, r2
 8008436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800843a:	461a      	mov	r2, r3
 800843c:	2300      	movs	r3, #0
 800843e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	3301      	adds	r3, #1
 8008444:	613b      	str	r3, [r7, #16]
 8008446:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800844a:	461a      	mov	r2, r3
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	4293      	cmp	r3, r2
 8008450:	d3e3      	bcc.n	800841a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800845e:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2280      	movs	r2, #128	; 0x80
 8008464:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a0e      	ldr	r2, [pc, #56]	; (80084a4 <USB_HostInit+0x150>)
 800846a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a0e      	ldr	r2, [pc, #56]	; (80084a8 <USB_HostInit+0x154>)
 8008470:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008474:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008478:	2b00      	cmp	r3, #0
 800847a:	d105      	bne.n	8008488 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	f043 0210 	orr.w	r2, r3, #16
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	699a      	ldr	r2, [r3, #24]
 800848c:	4b07      	ldr	r3, [pc, #28]	; (80084ac <USB_HostInit+0x158>)
 800848e:	4313      	orrs	r3, r2
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008494:	7dfb      	ldrb	r3, [r7, #23]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3718      	adds	r7, #24
 800849a:	46bd      	mov	sp, r7
 800849c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084a0:	b004      	add	sp, #16
 80084a2:	4770      	bx	lr
 80084a4:	00600080 	.word	0x00600080
 80084a8:	004000e0 	.word	0x004000e0
 80084ac:	a3200008 	.word	0xa3200008

080084b0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084ce:	f023 0303 	bic.w	r3, r3, #3
 80084d2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	78fb      	ldrb	r3, [r7, #3]
 80084de:	f003 0303 	and.w	r3, r3, #3
 80084e2:	68f9      	ldr	r1, [r7, #12]
 80084e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80084e8:	4313      	orrs	r3, r2
 80084ea:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80084ec:	78fb      	ldrb	r3, [r7, #3]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d107      	bne.n	8008502 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084f8:	461a      	mov	r2, r3
 80084fa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80084fe:	6053      	str	r3, [r2, #4]
 8008500:	e00c      	b.n	800851c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008502:	78fb      	ldrb	r3, [r7, #3]
 8008504:	2b02      	cmp	r3, #2
 8008506:	d107      	bne.n	8008518 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800850e:	461a      	mov	r2, r3
 8008510:	f241 7370 	movw	r3, #6000	; 0x1770
 8008514:	6053      	str	r3, [r2, #4]
 8008516:	e001      	b.n	800851c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e000      	b.n	800851e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008536:	2300      	movs	r3, #0
 8008538:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800854a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008558:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800855a:	2064      	movs	r0, #100	; 0x64
 800855c:	f7fa f92a 	bl	80027b4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800856c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800856e:	200a      	movs	r0, #10
 8008570:	f7fa f920 	bl	80027b4 <HAL_Delay>

  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800857e:	b480      	push	{r7}
 8008580:	b085      	sub	sp, #20
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	460b      	mov	r3, r1
 8008588:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800858e:	2300      	movs	r3, #0
 8008590:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80085a2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d109      	bne.n	80085c2 <USB_DriveVbus+0x44>
 80085ae:	78fb      	ldrb	r3, [r7, #3]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d106      	bne.n	80085c2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80085bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80085c0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085cc:	d109      	bne.n	80085e2 <USB_DriveVbus+0x64>
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d106      	bne.n	80085e2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80085dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085e0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	0c5b      	lsrs	r3, r3, #17
 800860e:	f003 0303 	and.w	r3, r3, #3
}
 8008612:	4618      	mov	r0, r3
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800861e:	b480      	push	{r7}
 8008620:	b085      	sub	sp, #20
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	b29b      	uxth	r3, r3
}
 8008634:	4618      	mov	r0, r3
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b088      	sub	sp, #32
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	4608      	mov	r0, r1
 800864a:	4611      	mov	r1, r2
 800864c:	461a      	mov	r2, r3
 800864e:	4603      	mov	r3, r0
 8008650:	70fb      	strb	r3, [r7, #3]
 8008652:	460b      	mov	r3, r1
 8008654:	70bb      	strb	r3, [r7, #2]
 8008656:	4613      	mov	r3, r2
 8008658:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008662:	78fb      	ldrb	r3, [r7, #3]
 8008664:	015a      	lsls	r2, r3, #5
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	4413      	add	r3, r2
 800866a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800866e:	461a      	mov	r2, r3
 8008670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008674:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008676:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800867a:	2b03      	cmp	r3, #3
 800867c:	d867      	bhi.n	800874e <USB_HC_Init+0x10e>
 800867e:	a201      	add	r2, pc, #4	; (adr r2, 8008684 <USB_HC_Init+0x44>)
 8008680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008684:	08008695 	.word	0x08008695
 8008688:	08008711 	.word	0x08008711
 800868c:	08008695 	.word	0x08008695
 8008690:	080086d3 	.word	0x080086d3
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	4413      	add	r3, r2
 800869c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086a0:	461a      	mov	r2, r3
 80086a2:	f240 439d 	movw	r3, #1181	; 0x49d
 80086a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80086a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	da51      	bge.n	8008754 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80086b0:	78fb      	ldrb	r3, [r7, #3]
 80086b2:	015a      	lsls	r2, r3, #5
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	4413      	add	r3, r2
 80086b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	78fa      	ldrb	r2, [r7, #3]
 80086c0:	0151      	lsls	r1, r2, #5
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	440a      	add	r2, r1
 80086c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086ce:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80086d0:	e040      	b.n	8008754 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80086d2:	78fb      	ldrb	r3, [r7, #3]
 80086d4:	015a      	lsls	r2, r3, #5
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	4413      	add	r3, r2
 80086da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086de:	461a      	mov	r2, r3
 80086e0:	f240 639d 	movw	r3, #1693	; 0x69d
 80086e4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80086e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	da34      	bge.n	8008758 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	015a      	lsls	r2, r3, #5
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	4413      	add	r3, r2
 80086f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	78fa      	ldrb	r2, [r7, #3]
 80086fe:	0151      	lsls	r1, r2, #5
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	440a      	add	r2, r1
 8008704:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800870c:	60d3      	str	r3, [r2, #12]
      }

      break;
 800870e:	e023      	b.n	8008758 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	4413      	add	r3, r2
 8008718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800871c:	461a      	mov	r2, r3
 800871e:	f240 2325 	movw	r3, #549	; 0x225
 8008722:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008724:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008728:	2b00      	cmp	r3, #0
 800872a:	da17      	bge.n	800875c <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800872c:	78fb      	ldrb	r3, [r7, #3]
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	4413      	add	r3, r2
 8008734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	78fa      	ldrb	r2, [r7, #3]
 800873c:	0151      	lsls	r1, r2, #5
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	440a      	add	r2, r1
 8008742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008746:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800874a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800874c:	e006      	b.n	800875c <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	77fb      	strb	r3, [r7, #31]
      break;
 8008752:	e004      	b.n	800875e <USB_HC_Init+0x11e>
      break;
 8008754:	bf00      	nop
 8008756:	e002      	b.n	800875e <USB_HC_Init+0x11e>
      break;
 8008758:	bf00      	nop
 800875a:	e000      	b.n	800875e <USB_HC_Init+0x11e>
      break;
 800875c:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800875e:	78fb      	ldrb	r3, [r7, #3]
 8008760:	015a      	lsls	r2, r3, #5
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	4413      	add	r3, r2
 8008766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800876a:	461a      	mov	r2, r3
 800876c:	2300      	movs	r3, #0
 800876e:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008770:	78fb      	ldrb	r3, [r7, #3]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	4413      	add	r3, r2
 8008778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	78fa      	ldrb	r2, [r7, #3]
 8008780:	0151      	lsls	r1, r2, #5
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	440a      	add	r2, r1
 8008786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800878a:	f043 0302 	orr.w	r3, r3, #2
 800878e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008796:	699a      	ldr	r2, [r3, #24]
 8008798:	78fb      	ldrb	r3, [r7, #3]
 800879a:	f003 030f 	and.w	r3, r3, #15
 800879e:	2101      	movs	r1, #1
 80087a0:	fa01 f303 	lsl.w	r3, r1, r3
 80087a4:	6939      	ldr	r1, [r7, #16]
 80087a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80087aa:	4313      	orrs	r3, r2
 80087ac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80087ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	da03      	bge.n	80087ca <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80087c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087c6:	61bb      	str	r3, [r7, #24]
 80087c8:	e001      	b.n	80087ce <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7ff ff0e 	bl	80085f0 <USB_GetHostSpeed>
 80087d4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80087d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d106      	bne.n	80087ec <USB_HC_Init+0x1ac>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d003      	beq.n	80087ec <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80087e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80087e8:	617b      	str	r3, [r7, #20]
 80087ea:	e001      	b.n	80087f0 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80087f0:	787b      	ldrb	r3, [r7, #1]
 80087f2:	059b      	lsls	r3, r3, #22
 80087f4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80087f8:	78bb      	ldrb	r3, [r7, #2]
 80087fa:	02db      	lsls	r3, r3, #11
 80087fc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008800:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008802:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008806:	049b      	lsls	r3, r3, #18
 8008808:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800880c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800880e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008810:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008814:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	431a      	orrs	r2, r3
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800881e:	78fa      	ldrb	r2, [r7, #3]
 8008820:	0151      	lsls	r1, r2, #5
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	440a      	add	r2, r1
 8008826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800882a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800882e:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008830:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008834:	2b03      	cmp	r3, #3
 8008836:	d003      	beq.n	8008840 <USB_HC_Init+0x200>
 8008838:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800883c:	2b01      	cmp	r3, #1
 800883e:	d10f      	bne.n	8008860 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008840:	78fb      	ldrb	r3, [r7, #3]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	4413      	add	r3, r2
 8008848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	78fa      	ldrb	r2, [r7, #3]
 8008850:	0151      	lsls	r1, r2, #5
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	440a      	add	r2, r1
 8008856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800885a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800885e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008860:	7ffb      	ldrb	r3, [r7, #31]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3720      	adds	r7, #32
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop

0800886c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b08c      	sub	sp, #48	; 0x30
 8008870:	af02      	add	r7, sp, #8
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	4613      	mov	r3, r2
 8008878:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	785b      	ldrb	r3, [r3, #1]
 8008882:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008884:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008888:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	799b      	ldrb	r3, [r3, #6]
 800888e:	2b01      	cmp	r3, #1
 8008890:	d158      	bne.n	8008944 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008892:	2301      	movs	r3, #1
 8008894:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	78db      	ldrb	r3, [r3, #3]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d007      	beq.n	80088ae <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800889e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	8a92      	ldrh	r2, [r2, #20]
 80088a4:	fb03 f202 	mul.w	r2, r3, r2
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	61da      	str	r2, [r3, #28]
 80088ac:	e079      	b.n	80089a2 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	7c9b      	ldrb	r3, [r3, #18]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d130      	bne.n	8008918 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	2bbc      	cmp	r3, #188	; 0xbc
 80088bc:	d918      	bls.n	80088f0 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	8a9b      	ldrh	r3, [r3, #20]
 80088c2:	461a      	mov	r2, r3
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	69da      	ldr	r2, [r3, #28]
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d003      	beq.n	80088e0 <USB_HC_StartXfer+0x74>
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d103      	bne.n	80088e8 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	2202      	movs	r2, #2
 80088e4:	60da      	str	r2, [r3, #12]
 80088e6:	e05c      	b.n	80089a2 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2201      	movs	r2, #1
 80088ec:	60da      	str	r2, [r3, #12]
 80088ee:	e058      	b.n	80089a2 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	6a1a      	ldr	r2, [r3, #32]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d007      	beq.n	8008910 <USB_HC_StartXfer+0xa4>
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	2b02      	cmp	r3, #2
 8008906:	d003      	beq.n	8008910 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	2204      	movs	r2, #4
 800890c:	60da      	str	r2, [r3, #12]
 800890e:	e048      	b.n	80089a2 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2203      	movs	r2, #3
 8008914:	60da      	str	r2, [r3, #12]
 8008916:	e044      	b.n	80089a2 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008918:	79fb      	ldrb	r3, [r7, #7]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d10d      	bne.n	800893a <USB_HC_StartXfer+0xce>
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	8a92      	ldrh	r2, [r2, #20]
 8008926:	4293      	cmp	r3, r2
 8008928:	d907      	bls.n	800893a <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800892a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	8a92      	ldrh	r2, [r2, #20]
 8008930:	fb03 f202 	mul.w	r2, r3, r2
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	61da      	str	r2, [r3, #28]
 8008938:	e033      	b.n	80089a2 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	6a1a      	ldr	r2, [r3, #32]
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	61da      	str	r2, [r3, #28]
 8008942:	e02e      	b.n	80089a2 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	6a1b      	ldr	r3, [r3, #32]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d018      	beq.n	800897e <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	6a1b      	ldr	r3, [r3, #32]
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	8a92      	ldrh	r2, [r2, #20]
 8008954:	4413      	add	r3, r2
 8008956:	3b01      	subs	r3, #1
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	8a92      	ldrh	r2, [r2, #20]
 800895c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008960:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8008962:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008964:	8b7b      	ldrh	r3, [r7, #26]
 8008966:	429a      	cmp	r2, r3
 8008968:	d90b      	bls.n	8008982 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 800896a:	8b7b      	ldrh	r3, [r7, #26]
 800896c:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800896e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	8a92      	ldrh	r2, [r2, #20]
 8008974:	fb03 f202 	mul.w	r2, r3, r2
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	61da      	str	r2, [r3, #28]
 800897c:	e001      	b.n	8008982 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 800897e:	2301      	movs	r3, #1
 8008980:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	78db      	ldrb	r3, [r3, #3]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d007      	beq.n	800899a <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800898a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	8a92      	ldrh	r2, [r2, #20]
 8008990:	fb03 f202 	mul.w	r2, r3, r2
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	61da      	str	r2, [r3, #28]
 8008998:	e003      	b.n	80089a2 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	6a1a      	ldr	r2, [r3, #32]
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80089aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80089ac:	04d9      	lsls	r1, r3, #19
 80089ae:	4ba4      	ldr	r3, [pc, #656]	; (8008c40 <USB_HC_StartXfer+0x3d4>)
 80089b0:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80089b2:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	7d9b      	ldrb	r3, [r3, #22]
 80089b8:	075b      	lsls	r3, r3, #29
 80089ba:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80089be:	69f9      	ldr	r1, [r7, #28]
 80089c0:	0148      	lsls	r0, r1, #5
 80089c2:	6a39      	ldr	r1, [r7, #32]
 80089c4:	4401      	add	r1, r0
 80089c6:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80089ca:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80089cc:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80089ce:	79fb      	ldrb	r3, [r7, #7]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d009      	beq.n	80089e8 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	6999      	ldr	r1, [r3, #24]
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e4:	460a      	mov	r2, r1
 80089e6:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80089e8:	6a3b      	ldr	r3, [r7, #32]
 80089ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	f003 0301 	and.w	r3, r3, #1
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	bf0c      	ite	eq
 80089f8:	2301      	moveq	r3, #1
 80089fa:	2300      	movne	r3, #0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	69fa      	ldr	r2, [r7, #28]
 8008a10:	0151      	lsls	r1, r2, #5
 8008a12:	6a3a      	ldr	r2, [r7, #32]
 8008a14:	440a      	add	r2, r1
 8008a16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a1e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	015a      	lsls	r2, r3, #5
 8008a24:	6a3b      	ldr	r3, [r7, #32]
 8008a26:	4413      	add	r3, r2
 8008a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	7e7b      	ldrb	r3, [r7, #25]
 8008a30:	075b      	lsls	r3, r3, #29
 8008a32:	69f9      	ldr	r1, [r7, #28]
 8008a34:	0148      	lsls	r0, r1, #5
 8008a36:	6a39      	ldr	r1, [r7, #32]
 8008a38:	4401      	add	r1, r0
 8008a3a:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	799b      	ldrb	r3, [r3, #6]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	f040 80c4 	bne.w	8008bd4 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	7c5b      	ldrb	r3, [r3, #17]
 8008a50:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008a56:	4313      	orrs	r3, r2
 8008a58:	69fa      	ldr	r2, [r7, #28]
 8008a5a:	0151      	lsls	r1, r2, #5
 8008a5c:	6a3a      	ldr	r2, [r7, #32]
 8008a5e:	440a      	add	r2, r1
 8008a60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008a64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008a68:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	69fa      	ldr	r2, [r7, #28]
 8008a7a:	0151      	lsls	r1, r2, #5
 8008a7c:	6a3a      	ldr	r2, [r7, #32]
 8008a7e:	440a      	add	r2, r1
 8008a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a84:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008a88:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	79db      	ldrb	r3, [r3, #7]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d123      	bne.n	8008ada <USB_HC_StartXfer+0x26e>
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	78db      	ldrb	r3, [r3, #3]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d11f      	bne.n	8008ada <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	015a      	lsls	r2, r3, #5
 8008a9e:	6a3b      	ldr	r3, [r7, #32]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	69fa      	ldr	r2, [r7, #28]
 8008aaa:	0151      	lsls	r1, r2, #5
 8008aac:	6a3a      	ldr	r2, [r7, #32]
 8008aae:	440a      	add	r2, r1
 8008ab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ab8:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	015a      	lsls	r2, r3, #5
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	69fa      	ldr	r2, [r7, #28]
 8008aca:	0151      	lsls	r1, r2, #5
 8008acc:	6a3a      	ldr	r2, [r7, #32]
 8008ace:	440a      	add	r2, r1
 8008ad0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ad8:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	7c9b      	ldrb	r3, [r3, #18]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d003      	beq.n	8008aea <USB_HC_StartXfer+0x27e>
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	7c9b      	ldrb	r3, [r3, #18]
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d117      	bne.n	8008b1a <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d113      	bne.n	8008b1a <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	78db      	ldrb	r3, [r3, #3]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d10f      	bne.n	8008b1a <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	015a      	lsls	r2, r3, #5
 8008afe:	6a3b      	ldr	r3, [r7, #32]
 8008b00:	4413      	add	r3, r2
 8008b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	69fa      	ldr	r2, [r7, #28]
 8008b0a:	0151      	lsls	r1, r2, #5
 8008b0c:	6a3a      	ldr	r2, [r7, #32]
 8008b0e:	440a      	add	r2, r1
 8008b10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b18:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	7c9b      	ldrb	r3, [r3, #18]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d163      	bne.n	8008bea <USB_HC_StartXfer+0x37e>
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	78db      	ldrb	r3, [r3, #3]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d15f      	bne.n	8008bea <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	d859      	bhi.n	8008be8 <USB_HC_StartXfer+0x37c>
 8008b34:	a201      	add	r2, pc, #4	; (adr r2, 8008b3c <USB_HC_StartXfer+0x2d0>)
 8008b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3a:	bf00      	nop
 8008b3c:	08008b4d 	.word	0x08008b4d
 8008b40:	08008b6f 	.word	0x08008b6f
 8008b44:	08008b91 	.word	0x08008b91
 8008b48:	08008bb3 	.word	0x08008bb3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	69fa      	ldr	r2, [r7, #28]
 8008b5c:	0151      	lsls	r1, r2, #5
 8008b5e:	6a3a      	ldr	r2, [r7, #32]
 8008b60:	440a      	add	r2, r1
 8008b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b6a:	6053      	str	r3, [r2, #4]
          break;
 8008b6c:	e03d      	b.n	8008bea <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	69fa      	ldr	r2, [r7, #28]
 8008b7e:	0151      	lsls	r1, r2, #5
 8008b80:	6a3a      	ldr	r2, [r7, #32]
 8008b82:	440a      	add	r2, r1
 8008b84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b88:	f043 030e 	orr.w	r3, r3, #14
 8008b8c:	6053      	str	r3, [r2, #4]
          break;
 8008b8e:	e02c      	b.n	8008bea <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	015a      	lsls	r2, r3, #5
 8008b94:	6a3b      	ldr	r3, [r7, #32]
 8008b96:	4413      	add	r3, r2
 8008b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	69fa      	ldr	r2, [r7, #28]
 8008ba0:	0151      	lsls	r1, r2, #5
 8008ba2:	6a3a      	ldr	r2, [r7, #32]
 8008ba4:	440a      	add	r2, r1
 8008ba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bae:	6053      	str	r3, [r2, #4]
          break;
 8008bb0:	e01b      	b.n	8008bea <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	015a      	lsls	r2, r3, #5
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	4413      	add	r3, r2
 8008bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	69fa      	ldr	r2, [r7, #28]
 8008bc2:	0151      	lsls	r1, r2, #5
 8008bc4:	6a3a      	ldr	r2, [r7, #32]
 8008bc6:	440a      	add	r2, r1
 8008bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bd0:	6053      	str	r3, [r2, #4]
          break;
 8008bd2:	e00a      	b.n	8008bea <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	015a      	lsls	r2, r3, #5
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	4413      	add	r3, r2
 8008bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008be0:	461a      	mov	r2, r3
 8008be2:	2300      	movs	r3, #0
 8008be4:	6053      	str	r3, [r2, #4]
 8008be6:	e000      	b.n	8008bea <USB_HC_StartXfer+0x37e>
          break;
 8008be8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	015a      	lsls	r2, r3, #5
 8008bee:	6a3b      	ldr	r3, [r7, #32]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c00:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	78db      	ldrb	r3, [r3, #3]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d004      	beq.n	8008c14 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c10:	613b      	str	r3, [r7, #16]
 8008c12:	e003      	b.n	8008c1c <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c1a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c22:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	6a3b      	ldr	r3, [r7, #32]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c30:	461a      	mov	r2, r3
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008c36:	79fb      	ldrb	r3, [r7, #7]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d003      	beq.n	8008c44 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	e055      	b.n	8008cec <USB_HC_StartXfer+0x480>
 8008c40:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	78db      	ldrb	r3, [r3, #3]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d14e      	bne.n	8008cea <USB_HC_StartXfer+0x47e>
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	6a1b      	ldr	r3, [r3, #32]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d04a      	beq.n	8008cea <USB_HC_StartXfer+0x47e>
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	79db      	ldrb	r3, [r3, #7]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d146      	bne.n	8008cea <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	7c9b      	ldrb	r3, [r3, #18]
 8008c60:	2b03      	cmp	r3, #3
 8008c62:	d831      	bhi.n	8008cc8 <USB_HC_StartXfer+0x45c>
 8008c64:	a201      	add	r2, pc, #4	; (adr r2, 8008c6c <USB_HC_StartXfer+0x400>)
 8008c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6a:	bf00      	nop
 8008c6c:	08008c7d 	.word	0x08008c7d
 8008c70:	08008ca1 	.word	0x08008ca1
 8008c74:	08008c7d 	.word	0x08008c7d
 8008c78:	08008ca1 	.word	0x08008ca1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	3303      	adds	r3, #3
 8008c82:	089b      	lsrs	r3, r3, #2
 8008c84:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008c86:	8afa      	ldrh	r2, [r7, #22]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d91c      	bls.n	8008ccc <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	f043 0220 	orr.w	r2, r3, #32
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	619a      	str	r2, [r3, #24]
        }
        break;
 8008c9e:	e015      	b.n	8008ccc <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	6a1b      	ldr	r3, [r3, #32]
 8008ca4:	3303      	adds	r3, #3
 8008ca6:	089b      	lsrs	r3, r3, #2
 8008ca8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008caa:	8afa      	ldrh	r2, [r7, #22]
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d90a      	bls.n	8008cd0 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	619a      	str	r2, [r3, #24]
        }
        break;
 8008cc6:	e003      	b.n	8008cd0 <USB_HC_StartXfer+0x464>

      default:
        break;
 8008cc8:	bf00      	nop
 8008cca:	e002      	b.n	8008cd2 <USB_HC_StartXfer+0x466>
        break;
 8008ccc:	bf00      	nop
 8008cce:	e000      	b.n	8008cd2 <USB_HC_StartXfer+0x466>
        break;
 8008cd0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	6999      	ldr	r1, [r3, #24]
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	785a      	ldrb	r2, [r3, #1]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	9000      	str	r0, [sp, #0]
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f7ff fa2b 	bl	8008140 <USB_WritePacket>
  }

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3728      	adds	r7, #40	; 0x28
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	b29b      	uxth	r3, r3
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b089      	sub	sp, #36	; 0x24
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	460b      	mov	r3, r1
 8008d20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008d26:	78fb      	ldrb	r3, [r7, #3]
 8008d28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	0c9b      	lsrs	r3, r3, #18
 8008d3e:	f003 0303 	and.w	r3, r3, #3
 8008d42:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	015a      	lsls	r2, r3, #5
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	0fdb      	lsrs	r3, r3, #31
 8008d54:	f003 0301 	and.w	r3, r3, #1
 8008d58:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	0fdb      	lsrs	r3, r3, #31
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	f003 0320 	and.w	r3, r3, #32
 8008d78:	2b20      	cmp	r3, #32
 8008d7a:	d10d      	bne.n	8008d98 <USB_HC_Halt+0x82>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10a      	bne.n	8008d98 <USB_HC_Halt+0x82>
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d005      	beq.n	8008d94 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d002      	beq.n	8008d94 <USB_HC_Halt+0x7e>
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2b03      	cmp	r3, #3
 8008d92:	d101      	bne.n	8008d98 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	e0d8      	b.n	8008f4a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <USB_HC_Halt+0x8e>
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d173      	bne.n	8008e8c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	015a      	lsls	r2, r3, #5
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	4413      	add	r3, r2
 8008dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	69ba      	ldr	r2, [r7, #24]
 8008db4:	0151      	lsls	r1, r2, #5
 8008db6:	69fa      	ldr	r2, [r7, #28]
 8008db8:	440a      	add	r2, r1
 8008dba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dc2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f003 0320 	and.w	r3, r3, #32
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d14a      	bne.n	8008e66 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d133      	bne.n	8008e44 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	69ba      	ldr	r2, [r7, #24]
 8008dec:	0151      	lsls	r1, r2, #5
 8008dee:	69fa      	ldr	r2, [r7, #28]
 8008df0:	440a      	add	r2, r1
 8008df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008df6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008dfa:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	015a      	lsls	r2, r3, #5
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	4413      	add	r3, r2
 8008e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	69ba      	ldr	r2, [r7, #24]
 8008e0c:	0151      	lsls	r1, r2, #5
 8008e0e:	69fa      	ldr	r2, [r7, #28]
 8008e10:	440a      	add	r2, r1
 8008e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e1a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e28:	d82e      	bhi.n	8008e88 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	015a      	lsls	r2, r3, #5
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	4413      	add	r3, r2
 8008e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e40:	d0ec      	beq.n	8008e1c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e42:	e081      	b.n	8008f48 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	0151      	lsls	r1, r2, #5
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e62:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e64:	e070      	b.n	8008f48 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	0151      	lsls	r1, r2, #5
 8008e78:	69fa      	ldr	r2, [r7, #28]
 8008e7a:	440a      	add	r2, r1
 8008e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e84:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e86:	e05f      	b.n	8008f48 <USB_HC_Halt+0x232>
            break;
 8008e88:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e8a:	e05d      	b.n	8008f48 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	015a      	lsls	r2, r3, #5
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	4413      	add	r3, r2
 8008e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	69ba      	ldr	r2, [r7, #24]
 8008e9c:	0151      	lsls	r1, r2, #5
 8008e9e:	69fa      	ldr	r2, [r7, #28]
 8008ea0:	440a      	add	r2, r1
 8008ea2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ea6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008eaa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d133      	bne.n	8008f24 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	0151      	lsls	r1, r2, #5
 8008ece:	69fa      	ldr	r2, [r7, #28]
 8008ed0:	440a      	add	r2, r1
 8008ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ed6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008eda:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	69ba      	ldr	r2, [r7, #24]
 8008eec:	0151      	lsls	r1, r2, #5
 8008eee:	69fa      	ldr	r2, [r7, #28]
 8008ef0:	440a      	add	r2, r1
 8008ef2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ef6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008efa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	3301      	adds	r3, #1
 8008f00:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f08:	d81d      	bhi.n	8008f46 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	015a      	lsls	r2, r3, #5
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	4413      	add	r3, r2
 8008f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f20:	d0ec      	beq.n	8008efc <USB_HC_Halt+0x1e6>
 8008f22:	e011      	b.n	8008f48 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	0151      	lsls	r1, r2, #5
 8008f36:	69fa      	ldr	r2, [r7, #28]
 8008f38:	440a      	add	r2, r1
 8008f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	e000      	b.n	8008f48 <USB_HC_Halt+0x232>
          break;
 8008f46:	bf00      	nop
    }
  }

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3724      	adds	r7, #36	; 0x24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b088      	sub	sp, #32
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008f66:	2300      	movs	r3, #0
 8008f68:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff f82b 	bl	8007fc6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f70:	2110      	movs	r1, #16
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7ff f884 	bl	8008080 <USB_FlushTxFifo>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7ff f8ae 	bl	80080e4 <USB_FlushRxFifo>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008f92:	2300      	movs	r3, #0
 8008f94:	61bb      	str	r3, [r7, #24]
 8008f96:	e01f      	b.n	8008fd8 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	015a      	lsls	r2, r3, #5
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fae:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fb6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fbe:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	015a      	lsls	r2, r3, #5
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fcc:	461a      	mov	r2, r3
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	61bb      	str	r3, [r7, #24]
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	2b0f      	cmp	r3, #15
 8008fdc:	d9dc      	bls.n	8008f98 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008fde:	2300      	movs	r3, #0
 8008fe0:	61bb      	str	r3, [r7, #24]
 8008fe2:	e034      	b.n	800904e <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ffa:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009002:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800900a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	015a      	lsls	r2, r3, #5
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	4413      	add	r3, r2
 8009014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009018:	461a      	mov	r2, r3
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3301      	adds	r3, #1
 8009022:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800902a:	d80c      	bhi.n	8009046 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	4413      	add	r3, r2
 8009034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800903e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009042:	d0ec      	beq.n	800901e <USB_StopHost+0xc8>
 8009044:	e000      	b.n	8009048 <USB_StopHost+0xf2>
        break;
 8009046:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	3301      	adds	r3, #1
 800904c:	61bb      	str	r3, [r7, #24]
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	2b0f      	cmp	r3, #15
 8009052:	d9c7      	bls.n	8008fe4 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800905a:	461a      	mov	r2, r3
 800905c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009060:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009068:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7fe ff9a 	bl	8007fa4 <USB_EnableGlobalInt>

  return ret;
 8009070:	7ffb      	ldrb	r3, [r7, #31]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3720      	adds	r7, #32
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800907a:	b590      	push	{r4, r7, lr}
 800907c:	b089      	sub	sp, #36	; 0x24
 800907e:	af04      	add	r7, sp, #16
 8009080:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009082:	2301      	movs	r3, #1
 8009084:	2202      	movs	r2, #2
 8009086:	2102      	movs	r1, #2
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fc86 	bl	800999a <USBH_FindInterface>
 800908e:	4603      	mov	r3, r0
 8009090:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009092:	7bfb      	ldrb	r3, [r7, #15]
 8009094:	2bff      	cmp	r3, #255	; 0xff
 8009096:	d002      	beq.n	800909e <USBH_CDC_InterfaceInit+0x24>
 8009098:	7bfb      	ldrb	r3, [r7, #15]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d901      	bls.n	80090a2 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800909e:	2302      	movs	r3, #2
 80090a0:	e13d      	b.n	800931e <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
 80090a4:	4619      	mov	r1, r3
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fc5b 	bl	8009962 <USBH_SelectInterface>
 80090ac:	4603      	mov	r3, r0
 80090ae:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80090b0:	7bbb      	ldrb	r3, [r7, #14]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d001      	beq.n	80090ba <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80090b6:	2302      	movs	r3, #2
 80090b8:	e131      	b.n	800931e <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80090c0:	2050      	movs	r0, #80	; 0x50
 80090c2:	f002 fb75 	bl	800b7b0 <malloc>
 80090c6:	4603      	mov	r3, r0
 80090c8:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d101      	bne.n	80090de <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80090da:	2302      	movs	r3, #2
 80090dc:	e11f      	b.n	800931e <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80090de:	2250      	movs	r2, #80	; 0x50
 80090e0:	2100      	movs	r1, #0
 80090e2:	68b8      	ldr	r0, [r7, #8]
 80090e4:	f002 fc20 	bl	800b928 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	211a      	movs	r1, #26
 80090ee:	fb01 f303 	mul.w	r3, r1, r3
 80090f2:	4413      	add	r3, r2
 80090f4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	b25b      	sxtb	r3, r3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	da15      	bge.n	800912c <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009100:	7bfb      	ldrb	r3, [r7, #15]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	211a      	movs	r1, #26
 8009106:	fb01 f303 	mul.w	r3, r1, r3
 800910a:	4413      	add	r3, r2
 800910c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009110:	781a      	ldrb	r2, [r3, #0]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009116:	7bfb      	ldrb	r3, [r7, #15]
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	211a      	movs	r1, #26
 800911c:	fb01 f303 	mul.w	r3, r1, r3
 8009120:	4413      	add	r3, r2
 8009122:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009126:	881a      	ldrh	r2, [r3, #0]
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	785b      	ldrb	r3, [r3, #1]
 8009130:	4619      	mov	r1, r3
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f001 ffcf 	bl	800b0d6 <USBH_AllocPipe>
 8009138:	4603      	mov	r3, r0
 800913a:	461a      	mov	r2, r3
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	7819      	ldrb	r1, [r3, #0]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	7858      	ldrb	r0, [r3, #1]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	8952      	ldrh	r2, [r2, #10]
 8009158:	9202      	str	r2, [sp, #8]
 800915a:	2203      	movs	r2, #3
 800915c:	9201      	str	r2, [sp, #4]
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	4623      	mov	r3, r4
 8009162:	4602      	mov	r2, r0
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f001 ff87 	bl	800b078 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	2200      	movs	r2, #0
 8009170:	4619      	mov	r1, r3
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f002 fa96 	bl	800b6a4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009178:	2300      	movs	r3, #0
 800917a:	2200      	movs	r2, #0
 800917c:	210a      	movs	r1, #10
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fc0b 	bl	800999a <USBH_FindInterface>
 8009184:	4603      	mov	r3, r0
 8009186:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009188:	7bfb      	ldrb	r3, [r7, #15]
 800918a:	2bff      	cmp	r3, #255	; 0xff
 800918c:	d002      	beq.n	8009194 <USBH_CDC_InterfaceInit+0x11a>
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	2b01      	cmp	r3, #1
 8009192:	d901      	bls.n	8009198 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009194:	2302      	movs	r3, #2
 8009196:	e0c2      	b.n	800931e <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009198:	7bfb      	ldrb	r3, [r7, #15]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	211a      	movs	r1, #26
 800919e:	fb01 f303 	mul.w	r3, r1, r3
 80091a2:	4413      	add	r3, r2
 80091a4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	b25b      	sxtb	r3, r3
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	da16      	bge.n	80091de <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	211a      	movs	r1, #26
 80091b6:	fb01 f303 	mul.w	r3, r1, r3
 80091ba:	4413      	add	r3, r2
 80091bc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80091c0:	781a      	ldrb	r2, [r3, #0]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	211a      	movs	r1, #26
 80091cc:	fb01 f303 	mul.w	r3, r1, r3
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80091d6:	881a      	ldrh	r2, [r3, #0]
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	835a      	strh	r2, [r3, #26]
 80091dc:	e015      	b.n	800920a <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80091de:	7bfb      	ldrb	r3, [r7, #15]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	211a      	movs	r1, #26
 80091e4:	fb01 f303 	mul.w	r3, r1, r3
 80091e8:	4413      	add	r3, r2
 80091ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80091ee:	781a      	ldrb	r2, [r3, #0]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	211a      	movs	r1, #26
 80091fa:	fb01 f303 	mul.w	r3, r1, r3
 80091fe:	4413      	add	r3, r2
 8009200:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009204:	881a      	ldrh	r2, [r3, #0]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800920a:	7bfb      	ldrb	r3, [r7, #15]
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	211a      	movs	r1, #26
 8009210:	fb01 f303 	mul.w	r3, r1, r3
 8009214:	4413      	add	r3, r2
 8009216:	f203 3356 	addw	r3, r3, #854	; 0x356
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	b25b      	sxtb	r3, r3
 800921e:	2b00      	cmp	r3, #0
 8009220:	da16      	bge.n	8009250 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	211a      	movs	r1, #26
 8009228:	fb01 f303 	mul.w	r3, r1, r3
 800922c:	4413      	add	r3, r2
 800922e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009232:	781a      	ldrb	r2, [r3, #0]
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	211a      	movs	r1, #26
 800923e:	fb01 f303 	mul.w	r3, r1, r3
 8009242:	4413      	add	r3, r2
 8009244:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009248:	881a      	ldrh	r2, [r3, #0]
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	835a      	strh	r2, [r3, #26]
 800924e:	e015      	b.n	800927c <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	211a      	movs	r1, #26
 8009256:	fb01 f303 	mul.w	r3, r1, r3
 800925a:	4413      	add	r3, r2
 800925c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009260:	781a      	ldrb	r2, [r3, #0]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009266:	7bfb      	ldrb	r3, [r7, #15]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	211a      	movs	r1, #26
 800926c:	fb01 f303 	mul.w	r3, r1, r3
 8009270:	4413      	add	r3, r2
 8009272:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009276:	881a      	ldrh	r2, [r3, #0]
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	7b9b      	ldrb	r3, [r3, #14]
 8009280:	4619      	mov	r1, r3
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f001 ff27 	bl	800b0d6 <USBH_AllocPipe>
 8009288:	4603      	mov	r3, r0
 800928a:	461a      	mov	r2, r3
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	7bdb      	ldrb	r3, [r3, #15]
 8009294:	4619      	mov	r1, r3
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f001 ff1d 	bl	800b0d6 <USBH_AllocPipe>
 800929c:	4603      	mov	r3, r0
 800929e:	461a      	mov	r2, r3
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	7b59      	ldrb	r1, [r3, #13]
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	7b98      	ldrb	r0, [r3, #14]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	8b12      	ldrh	r2, [r2, #24]
 80092bc:	9202      	str	r2, [sp, #8]
 80092be:	2202      	movs	r2, #2
 80092c0:	9201      	str	r2, [sp, #4]
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	4623      	mov	r3, r4
 80092c6:	4602      	mov	r2, r0
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 fed5 	bl	800b078 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	7b19      	ldrb	r1, [r3, #12]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	7bd8      	ldrb	r0, [r3, #15]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	8b52      	ldrh	r2, [r2, #26]
 80092e6:	9202      	str	r2, [sp, #8]
 80092e8:	2202      	movs	r2, #2
 80092ea:	9201      	str	r2, [sp, #4]
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	4623      	mov	r3, r4
 80092f0:	4602      	mov	r2, r0
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f001 fec0 	bl	800b078 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	7b5b      	ldrb	r3, [r3, #13]
 8009304:	2200      	movs	r2, #0
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f002 f9cb 	bl	800b6a4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	7b1b      	ldrb	r3, [r3, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f002 f9c4 	bl	800b6a4 <USBH_LL_SetToggle>

  return USBH_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3714      	adds	r7, #20
 8009322:	46bd      	mov	sp, r7
 8009324:	bd90      	pop	{r4, r7, pc}

08009326 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b084      	sub	sp, #16
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009334:	69db      	ldr	r3, [r3, #28]
 8009336:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00e      	beq.n	800935e <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f001 feb5 	bl	800b0b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 fee0 	bl	800b118 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	7b1b      	ldrb	r3, [r3, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00e      	beq.n	8009384 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	7b1b      	ldrb	r3, [r3, #12]
 800936a:	4619      	mov	r1, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f001 fea2 	bl	800b0b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	7b1b      	ldrb	r3, [r3, #12]
 8009376:	4619      	mov	r1, r3
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f001 fecd 	bl	800b118 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	7b5b      	ldrb	r3, [r3, #13]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00e      	beq.n	80093aa <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	7b5b      	ldrb	r3, [r3, #13]
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f001 fe8f 	bl	800b0b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	7b5b      	ldrb	r3, [r3, #13]
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f001 feba 	bl	800b118 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093b0:	69db      	ldr	r3, [r3, #28]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00b      	beq.n	80093ce <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	4618      	mov	r0, r3
 80093c0:	f002 f9fe 	bl	800b7c0 <free>
    phost->pActiveClass->pData = 0U;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093ca:	2200      	movs	r2, #0
 80093cc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093e6:	69db      	ldr	r3, [r3, #28]
 80093e8:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	3340      	adds	r3, #64	; 0x40
 80093ee:	4619      	mov	r1, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f8b2 	bl	800955a <GetLineCoding>
 80093f6:	4603      	mov	r3, r0
 80093f8:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80093fa:	7afb      	ldrb	r3, [r7, #11]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d105      	bne.n	800940c <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009406:	2102      	movs	r1, #2
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800940c:	7afb      	ldrb	r3, [r7, #11]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
	...

08009418 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009420:	2301      	movs	r3, #1
 8009422:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009438:	2b04      	cmp	r3, #4
 800943a:	d877      	bhi.n	800952c <USBH_CDC_Process+0x114>
 800943c:	a201      	add	r2, pc, #4	; (adr r2, 8009444 <USBH_CDC_Process+0x2c>)
 800943e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009442:	bf00      	nop
 8009444:	08009459 	.word	0x08009459
 8009448:	0800945f 	.word	0x0800945f
 800944c:	0800948f 	.word	0x0800948f
 8009450:	08009503 	.word	0x08009503
 8009454:	08009511 	.word	0x08009511
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	73fb      	strb	r3, [r7, #15]
      break;
 800945c:	e06d      	b.n	800953a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f897 	bl	8009598 <SetLineCoding>
 800946a:	4603      	mov	r3, r0
 800946c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800946e:	7bbb      	ldrb	r3, [r7, #14]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d104      	bne.n	800947e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2202      	movs	r2, #2
 8009478:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800947c:	e058      	b.n	8009530 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800947e:	7bbb      	ldrb	r3, [r7, #14]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d055      	beq.n	8009530 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2204      	movs	r2, #4
 8009488:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800948c:	e050      	b.n	8009530 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	3340      	adds	r3, #64	; 0x40
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f860 	bl	800955a <GetLineCoding>
 800949a:	4603      	mov	r3, r0
 800949c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800949e:	7bbb      	ldrb	r3, [r7, #14]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d126      	bne.n	80094f2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094b6:	791b      	ldrb	r3, [r3, #4]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d13b      	bne.n	8009534 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094c6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d133      	bne.n	8009534 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094d6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80094d8:	429a      	cmp	r2, r3
 80094da:	d12b      	bne.n	8009534 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094e4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d124      	bne.n	8009534 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f958 	bl	80097a0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80094f0:	e020      	b.n	8009534 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80094f2:	7bbb      	ldrb	r3, [r7, #14]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d01d      	beq.n	8009534 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	2204      	movs	r2, #4
 80094fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009500:	e018      	b.n	8009534 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f867 	bl	80095d6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f8da 	bl	80096c2 <CDC_ProcessReception>
      break;
 800950e:	e014      	b.n	800953a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009510:	2100      	movs	r1, #0
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f001 f822 	bl	800a55c <USBH_ClrFeature>
 8009518:	4603      	mov	r3, r0
 800951a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800951c:	7bbb      	ldrb	r3, [r7, #14]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d10a      	bne.n	8009538 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800952a:	e005      	b.n	8009538 <USBH_CDC_Process+0x120>

    default:
      break;
 800952c:	bf00      	nop
 800952e:	e004      	b.n	800953a <USBH_CDC_Process+0x122>
      break;
 8009530:	bf00      	nop
 8009532:	e002      	b.n	800953a <USBH_CDC_Process+0x122>
      break;
 8009534:	bf00      	nop
 8009536:	e000      	b.n	800953a <USBH_CDC_Process+0x122>
      break;
 8009538:	bf00      	nop

  }

  return status;
 800953a:	7bfb      	ldrb	r3, [r7, #15]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b082      	sub	sp, #8
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	22a1      	movs	r2, #161	; 0xa1
 8009568:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2221      	movs	r2, #33	; 0x21
 800956e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2207      	movs	r2, #7
 8009580:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2207      	movs	r2, #7
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f001 fb23 	bl	800abd4 <USBH_CtlReq>
 800958e:	4603      	mov	r3, r0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2221      	movs	r2, #33	; 0x21
 80095a6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2220      	movs	r2, #32
 80095ac:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2207      	movs	r2, #7
 80095be:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	2207      	movs	r2, #7
 80095c4:	4619      	mov	r1, r3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f001 fb04 	bl	800abd4 <USBH_CtlReq>
 80095cc:	4603      	mov	r3, r0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b086      	sub	sp, #24
 80095da:	af02      	add	r7, sp, #8
 80095dc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095e4:	69db      	ldr	r3, [r3, #28]
 80095e6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80095e8:	2300      	movs	r3, #0
 80095ea:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d002      	beq.n	80095fc <CDC_ProcessTransmission+0x26>
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d023      	beq.n	8009642 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80095fa:	e05e      	b.n	80096ba <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	8b12      	ldrh	r2, [r2, #24]
 8009604:	4293      	cmp	r3, r2
 8009606:	d90b      	bls.n	8009620 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	69d9      	ldr	r1, [r3, #28]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	8b1a      	ldrh	r2, [r3, #24]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	7b5b      	ldrb	r3, [r3, #13]
 8009614:	2001      	movs	r0, #1
 8009616:	9000      	str	r0, [sp, #0]
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f001 fcea 	bl	800aff2 <USBH_BulkSendData>
 800961e:	e00b      	b.n	8009638 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8009628:	b29a      	uxth	r2, r3
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	7b5b      	ldrb	r3, [r3, #13]
 800962e:	2001      	movs	r0, #1
 8009630:	9000      	str	r0, [sp, #0]
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f001 fcdd 	bl	800aff2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2202      	movs	r2, #2
 800963c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009640:	e03b      	b.n	80096ba <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	7b5b      	ldrb	r3, [r3, #13]
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f002 f801 	bl	800b650 <USBH_LL_GetURBState>
 800964e:	4603      	mov	r3, r0
 8009650:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009652:	7afb      	ldrb	r3, [r7, #11]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d128      	bne.n	80096aa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	8b12      	ldrh	r2, [r2, #24]
 8009660:	4293      	cmp	r3, r2
 8009662:	d90e      	bls.n	8009682 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	8b12      	ldrh	r2, [r2, #24]
 800966c:	1a9a      	subs	r2, r3, r2
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	8b12      	ldrh	r2, [r2, #24]
 800967a:	441a      	add	r2, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	61da      	str	r2, [r3, #28]
 8009680:	e002      	b.n	8009688 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968c:	2b00      	cmp	r3, #0
 800968e:	d004      	beq.n	800969a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009698:	e00e      	b.n	80096b8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f868 	bl	8009778 <USBH_CDC_TransmitCallback>
      break;
 80096a8:	e006      	b.n	80096b8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80096aa:	7afb      	ldrb	r3, [r7, #11]
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d103      	bne.n	80096b8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80096b8:	bf00      	nop
  }
}
 80096ba:	bf00      	nop
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b086      	sub	sp, #24
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096d0:	69db      	ldr	r3, [r3, #28]
 80096d2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80096d4:	2300      	movs	r3, #0
 80096d6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80096de:	2b03      	cmp	r3, #3
 80096e0:	d002      	beq.n	80096e8 <CDC_ProcessReception+0x26>
 80096e2:	2b04      	cmp	r3, #4
 80096e4:	d00e      	beq.n	8009704 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80096e6:	e043      	b.n	8009770 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	6a19      	ldr	r1, [r3, #32]
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	8b5a      	ldrh	r2, [r3, #26]
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	7b1b      	ldrb	r3, [r3, #12]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f001 fca1 	bl	800b03c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2204      	movs	r2, #4
 80096fe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009702:	e035      	b.n	8009770 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	7b1b      	ldrb	r3, [r3, #12]
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f001 ffa0 	bl	800b650 <USBH_LL_GetURBState>
 8009710:	4603      	mov	r3, r0
 8009712:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009714:	7cfb      	ldrb	r3, [r7, #19]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d129      	bne.n	800976e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	7b1b      	ldrb	r3, [r3, #12]
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f001 ff03 	bl	800b52c <USBH_LL_GetLastXferSize>
 8009726:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	429a      	cmp	r2, r3
 8009730:	d016      	beq.n	8009760 <CDC_ProcessReception+0x9e>
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	8b5b      	ldrh	r3, [r3, #26]
 8009736:	461a      	mov	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	4293      	cmp	r3, r2
 800973c:	d910      	bls.n	8009760 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	1ad2      	subs	r2, r2, r3
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	6a1a      	ldr	r2, [r3, #32]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	441a      	add	r2, r3
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2203      	movs	r2, #3
 800975a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800975e:	e006      	b.n	800976e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f80f 	bl	800978c <USBH_CDC_ReceiveCallback>
      break;
 800976e:	bf00      	nop
  }
}
 8009770:	bf00      	nop
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009794:	bf00      	nop
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80097a8:	bf00      	nop
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	4613      	mov	r3, r2
 80097c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80097c8:	2302      	movs	r3, #2
 80097ca:	e029      	b.n	8009820 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	79fa      	ldrb	r2, [r7, #7]
 80097d0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2200      	movs	r2, #0
 80097e0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f000 f81f 	bl	8009828 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d003      	beq.n	8009818 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f001 fdd3 	bl	800b3c4 <USBH_LL_Init>

  return USBH_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009830:	2300      	movs	r3, #0
 8009832:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009834:	2300      	movs	r3, #0
 8009836:	60fb      	str	r3, [r7, #12]
 8009838:	e009      	b.n	800984e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	33e0      	adds	r3, #224	; 0xe0
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	2200      	movs	r2, #0
 8009846:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	3301      	adds	r3, #1
 800984c:	60fb      	str	r3, [r7, #12]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2b0f      	cmp	r3, #15
 8009852:	d9f2      	bls.n	800983a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009854:	2300      	movs	r3, #0
 8009856:	60fb      	str	r3, [r7, #12]
 8009858:	e009      	b.n	800986e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4413      	add	r3, r2
 8009860:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009864:	2200      	movs	r2, #0
 8009866:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	3301      	adds	r3, #1
 800986c:	60fb      	str	r3, [r7, #12]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009874:	d3f1      	bcc.n	800985a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2201      	movs	r2, #1
 8009886:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2240      	movs	r2, #64	; 0x40
 800989a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	331c      	adds	r3, #28
 80098c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098ca:	2100      	movs	r1, #0
 80098cc:	4618      	mov	r0, r3
 80098ce:	f002 f82b 	bl	800b928 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80098d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098dc:	2100      	movs	r1, #0
 80098de:	4618      	mov	r0, r3
 80098e0:	f002 f822 	bl	800b928 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f203 3326 	addw	r3, r3, #806	; 0x326
 80098ea:	2212      	movs	r2, #18
 80098ec:	2100      	movs	r1, #0
 80098ee:	4618      	mov	r0, r3
 80098f0:	f002 f81a 	bl	800b928 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80098fa:	223e      	movs	r2, #62	; 0x3e
 80098fc:	2100      	movs	r1, #0
 80098fe:	4618      	mov	r0, r3
 8009900:	f002 f812 	bl	800b928 <memset>

  return USBH_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800990e:	b480      	push	{r7}
 8009910:	b085      	sub	sp, #20
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d016      	beq.n	8009950 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10e      	bne.n	800994a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009932:	1c59      	adds	r1, r3, #1
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	33de      	adds	r3, #222	; 0xde
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	73fb      	strb	r3, [r7, #15]
 8009948:	e004      	b.n	8009954 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800994a:	2302      	movs	r3, #2
 800994c:	73fb      	strb	r3, [r7, #15]
 800994e:	e001      	b.n	8009954 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009950:	2302      	movs	r3, #2
 8009952:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009954:	7bfb      	ldrb	r3, [r7, #15]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3714      	adds	r7, #20
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009962:	b480      	push	{r7}
 8009964:	b085      	sub	sp, #20
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	460b      	mov	r3, r1
 800996c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009978:	78fa      	ldrb	r2, [r7, #3]
 800997a:	429a      	cmp	r2, r3
 800997c:	d204      	bcs.n	8009988 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	78fa      	ldrb	r2, [r7, #3]
 8009982:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009986:	e001      	b.n	800998c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009988:	2302      	movs	r3, #2
 800998a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800998c:	7bfb      	ldrb	r3, [r7, #15]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr

0800999a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800999a:	b480      	push	{r7}
 800999c:	b087      	sub	sp, #28
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	4608      	mov	r0, r1
 80099a4:	4611      	mov	r1, r2
 80099a6:	461a      	mov	r2, r3
 80099a8:	4603      	mov	r3, r0
 80099aa:	70fb      	strb	r3, [r7, #3]
 80099ac:	460b      	mov	r3, r1
 80099ae:	70bb      	strb	r3, [r7, #2]
 80099b0:	4613      	mov	r3, r2
 80099b2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80099b4:	2300      	movs	r3, #0
 80099b6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80099b8:	2300      	movs	r3, #0
 80099ba:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80099c2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80099c4:	e025      	b.n	8009a12 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80099c6:	7dfb      	ldrb	r3, [r7, #23]
 80099c8:	221a      	movs	r2, #26
 80099ca:	fb02 f303 	mul.w	r3, r2, r3
 80099ce:	3308      	adds	r3, #8
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	4413      	add	r3, r2
 80099d4:	3302      	adds	r3, #2
 80099d6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	795b      	ldrb	r3, [r3, #5]
 80099dc:	78fa      	ldrb	r2, [r7, #3]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d002      	beq.n	80099e8 <USBH_FindInterface+0x4e>
 80099e2:	78fb      	ldrb	r3, [r7, #3]
 80099e4:	2bff      	cmp	r3, #255	; 0xff
 80099e6:	d111      	bne.n	8009a0c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80099ec:	78ba      	ldrb	r2, [r7, #2]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d002      	beq.n	80099f8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80099f2:	78bb      	ldrb	r3, [r7, #2]
 80099f4:	2bff      	cmp	r3, #255	; 0xff
 80099f6:	d109      	bne.n	8009a0c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80099fc:	787a      	ldrb	r2, [r7, #1]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d002      	beq.n	8009a08 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009a02:	787b      	ldrb	r3, [r7, #1]
 8009a04:	2bff      	cmp	r3, #255	; 0xff
 8009a06:	d101      	bne.n	8009a0c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009a08:	7dfb      	ldrb	r3, [r7, #23]
 8009a0a:	e006      	b.n	8009a1a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009a0c:	7dfb      	ldrb	r3, [r7, #23]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d9d6      	bls.n	80099c6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009a18:	23ff      	movs	r3, #255	; 0xff
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	371c      	adds	r7, #28
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr

08009a26 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b082      	sub	sp, #8
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f001 fd04 	bl	800b43c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009a34:	2101      	movs	r1, #1
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f001 fe1d 	bl	800b676 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
	...

08009a48 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b088      	sub	sp, #32
 8009a4c:	af04      	add	r7, sp, #16
 8009a4e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009a50:	2302      	movs	r3, #2
 8009a52:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009a54:	2300      	movs	r3, #0
 8009a56:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d102      	bne.n	8009a6a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2203      	movs	r2, #3
 8009a68:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	2b0b      	cmp	r3, #11
 8009a72:	f200 81be 	bhi.w	8009df2 <USBH_Process+0x3aa>
 8009a76:	a201      	add	r2, pc, #4	; (adr r2, 8009a7c <USBH_Process+0x34>)
 8009a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7c:	08009aad 	.word	0x08009aad
 8009a80:	08009adf 	.word	0x08009adf
 8009a84:	08009b47 	.word	0x08009b47
 8009a88:	08009d8d 	.word	0x08009d8d
 8009a8c:	08009df3 	.word	0x08009df3
 8009a90:	08009beb 	.word	0x08009beb
 8009a94:	08009d33 	.word	0x08009d33
 8009a98:	08009c21 	.word	0x08009c21
 8009a9c:	08009c41 	.word	0x08009c41
 8009aa0:	08009c61 	.word	0x08009c61
 8009aa4:	08009ca5 	.word	0x08009ca5
 8009aa8:	08009d75 	.word	0x08009d75
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f000 819e 	beq.w	8009df6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009ac0:	20c8      	movs	r0, #200	; 0xc8
 8009ac2:	f001 fe22 	bl	800b70a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f001 fd15 	bl	800b4f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009adc:	e18b      	b.n	8009df6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d107      	bne.n	8009af8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2202      	movs	r2, #2
 8009af4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009af6:	e18d      	b.n	8009e14 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b02:	d914      	bls.n	8009b2e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	b2da      	uxtb	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009b1a:	2b03      	cmp	r3, #3
 8009b1c:	d903      	bls.n	8009b26 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	220d      	movs	r2, #13
 8009b22:	701a      	strb	r2, [r3, #0]
      break;
 8009b24:	e176      	b.n	8009e14 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	701a      	strb	r2, [r3, #0]
      break;
 8009b2c:	e172      	b.n	8009e14 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009b34:	f103 020a 	add.w	r2, r3, #10
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009b3e:	200a      	movs	r0, #10
 8009b40:	f001 fde3 	bl	800b70a <USBH_Delay>
      break;
 8009b44:	e166      	b.n	8009e14 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d005      	beq.n	8009b5c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b56:	2104      	movs	r1, #4
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009b5c:	2064      	movs	r0, #100	; 0x64
 8009b5e:	f001 fdd4 	bl	800b70a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f001 fca0 	bl	800b4a8 <USBH_LL_GetSpeed>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2205      	movs	r2, #5
 8009b76:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009b78:	2100      	movs	r1, #0
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f001 faab 	bl	800b0d6 <USBH_AllocPipe>
 8009b80:	4603      	mov	r3, r0
 8009b82:	461a      	mov	r2, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009b88:	2180      	movs	r1, #128	; 0x80
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f001 faa3 	bl	800b0d6 <USBH_AllocPipe>
 8009b90:	4603      	mov	r3, r0
 8009b92:	461a      	mov	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	7919      	ldrb	r1, [r3, #4]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009bac:	b292      	uxth	r2, r2
 8009bae:	9202      	str	r2, [sp, #8]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	9201      	str	r2, [sp, #4]
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2280      	movs	r2, #128	; 0x80
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f001 fa5c 	bl	800b078 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	7959      	ldrb	r1, [r3, #5]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009bd4:	b292      	uxth	r2, r2
 8009bd6:	9202      	str	r2, [sp, #8]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	9201      	str	r2, [sp, #4]
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	4603      	mov	r3, r0
 8009be0:	2200      	movs	r2, #0
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f001 fa48 	bl	800b078 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009be8:	e114      	b.n	8009e14 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f918 	bl	8009e20 <USBH_HandleEnum>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009bf4:	7bbb      	ldrb	r3, [r7, #14]
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f040 80fe 	bne.w	8009dfa <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d103      	bne.n	8009c18 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2208      	movs	r2, #8
 8009c14:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009c16:	e0f0      	b.n	8009dfa <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2207      	movs	r2, #7
 8009c1c:	701a      	strb	r2, [r3, #0]
      break;
 8009c1e:	e0ec      	b.n	8009dfa <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 80e9 	beq.w	8009dfe <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c32:	2101      	movs	r1, #1
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2208      	movs	r2, #8
 8009c3c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009c3e:	e0de      	b.n	8009dfe <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	4619      	mov	r1, r3
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 fc3f 	bl	800a4ce <USBH_SetCfg>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f040 80d5 	bne.w	8009e02 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2209      	movs	r2, #9
 8009c5c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c5e:	e0d0      	b.n	8009e02 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009c66:	f003 0320 	and.w	r3, r3, #32
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d016      	beq.n	8009c9c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009c6e:	2101      	movs	r1, #1
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fc4f 	bl	800a514 <USBH_SetFeature>
 8009c76:	4603      	mov	r3, r0
 8009c78:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009c7a:	7bbb      	ldrb	r3, [r7, #14]
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d103      	bne.n	8009c8a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	220a      	movs	r2, #10
 8009c86:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c88:	e0bd      	b.n	8009e06 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009c8a:	7bbb      	ldrb	r3, [r7, #14]
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b03      	cmp	r3, #3
 8009c90:	f040 80b9 	bne.w	8009e06 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	220a      	movs	r2, #10
 8009c98:	701a      	strb	r2, [r3, #0]
      break;
 8009c9a:	e0b4      	b.n	8009e06 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	220a      	movs	r2, #10
 8009ca0:	701a      	strb	r2, [r3, #0]
      break;
 8009ca2:	e0b0      	b.n	8009e06 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f000 80ad 	beq.w	8009e0a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009cb8:	2300      	movs	r3, #0
 8009cba:	73fb      	strb	r3, [r7, #15]
 8009cbc:	e016      	b.n	8009cec <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009cbe:	7bfa      	ldrb	r2, [r7, #15]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	32de      	adds	r2, #222	; 0xde
 8009cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc8:	791a      	ldrb	r2, [r3, #4]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d108      	bne.n	8009ce6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009cd4:	7bfa      	ldrb	r2, [r7, #15]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	32de      	adds	r2, #222	; 0xde
 8009cda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009ce4:	e005      	b.n	8009cf2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009ce6:	7bfb      	ldrb	r3, [r7, #15]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	73fb      	strb	r3, [r7, #15]
 8009cec:	7bfb      	ldrb	r3, [r7, #15]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d0e5      	beq.n	8009cbe <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d016      	beq.n	8009d2a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	4798      	blx	r3
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d109      	bne.n	8009d22 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2206      	movs	r2, #6
 8009d12:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d1a:	2103      	movs	r1, #3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009d20:	e073      	b.n	8009e0a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	220d      	movs	r2, #13
 8009d26:	701a      	strb	r2, [r3, #0]
      break;
 8009d28:	e06f      	b.n	8009e0a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	220d      	movs	r2, #13
 8009d2e:	701a      	strb	r2, [r3, #0]
      break;
 8009d30:	e06b      	b.n	8009e0a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d017      	beq.n	8009d6c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	4798      	blx	r3
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d103      	bne.n	8009d5c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	220b      	movs	r2, #11
 8009d58:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009d5a:	e058      	b.n	8009e0e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8009d5c:	7bbb      	ldrb	r3, [r7, #14]
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	d154      	bne.n	8009e0e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	220d      	movs	r2, #13
 8009d68:	701a      	strb	r2, [r3, #0]
      break;
 8009d6a:	e050      	b.n	8009e0e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	220d      	movs	r2, #13
 8009d70:	701a      	strb	r2, [r3, #0]
      break;
 8009d72:	e04c      	b.n	8009e0e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d049      	beq.n	8009e12 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d84:	695b      	ldr	r3, [r3, #20]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	4798      	blx	r3
      }
      break;
 8009d8a:	e042      	b.n	8009e12 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f7ff fd47 	bl	8009828 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d009      	beq.n	8009db8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d005      	beq.n	8009dce <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009dc8:	2105      	movs	r1, #5
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d107      	bne.n	8009dea <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f7ff fe1f 	bl	8009a26 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009de8:	e014      	b.n	8009e14 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f001 fb26 	bl	800b43c <USBH_LL_Start>
      break;
 8009df0:	e010      	b.n	8009e14 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8009df2:	bf00      	nop
 8009df4:	e00e      	b.n	8009e14 <USBH_Process+0x3cc>
      break;
 8009df6:	bf00      	nop
 8009df8:	e00c      	b.n	8009e14 <USBH_Process+0x3cc>
      break;
 8009dfa:	bf00      	nop
 8009dfc:	e00a      	b.n	8009e14 <USBH_Process+0x3cc>
    break;
 8009dfe:	bf00      	nop
 8009e00:	e008      	b.n	8009e14 <USBH_Process+0x3cc>
      break;
 8009e02:	bf00      	nop
 8009e04:	e006      	b.n	8009e14 <USBH_Process+0x3cc>
      break;
 8009e06:	bf00      	nop
 8009e08:	e004      	b.n	8009e14 <USBH_Process+0x3cc>
      break;
 8009e0a:	bf00      	nop
 8009e0c:	e002      	b.n	8009e14 <USBH_Process+0x3cc>
      break;
 8009e0e:	bf00      	nop
 8009e10:	e000      	b.n	8009e14 <USBH_Process+0x3cc>
      break;
 8009e12:	bf00      	nop
  }
  return USBH_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop

08009e20 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b088      	sub	sp, #32
 8009e24:	af04      	add	r7, sp, #16
 8009e26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	785b      	ldrb	r3, [r3, #1]
 8009e34:	2b07      	cmp	r3, #7
 8009e36:	f200 81c1 	bhi.w	800a1bc <USBH_HandleEnum+0x39c>
 8009e3a:	a201      	add	r2, pc, #4	; (adr r2, 8009e40 <USBH_HandleEnum+0x20>)
 8009e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e40:	08009e61 	.word	0x08009e61
 8009e44:	08009f1f 	.word	0x08009f1f
 8009e48:	08009f89 	.word	0x08009f89
 8009e4c:	0800a017 	.word	0x0800a017
 8009e50:	0800a081 	.word	0x0800a081
 8009e54:	0800a0f1 	.word	0x0800a0f1
 8009e58:	0800a137 	.word	0x0800a137
 8009e5c:	0800a17d 	.word	0x0800a17d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009e60:	2108      	movs	r1, #8
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 fa50 	bl	800a308 <USBH_Get_DevDesc>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e6c:	7bbb      	ldrb	r3, [r7, #14]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d130      	bne.n	8009ed4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	7919      	ldrb	r1, [r3, #4]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009e96:	b292      	uxth	r2, r2
 8009e98:	9202      	str	r2, [sp, #8]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	9201      	str	r2, [sp, #4]
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2280      	movs	r2, #128	; 0x80
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f001 f8e7 	bl	800b078 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	7959      	ldrb	r1, [r3, #5]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009ebe:	b292      	uxth	r2, r2
 8009ec0:	9202      	str	r2, [sp, #8]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	9201      	str	r2, [sp, #4]
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2200      	movs	r2, #0
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f001 f8d3 	bl	800b078 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009ed2:	e175      	b.n	800a1c0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ed4:	7bbb      	ldrb	r3, [r7, #14]
 8009ed6:	2b03      	cmp	r3, #3
 8009ed8:	f040 8172 	bne.w	800a1c0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	b2da      	uxtb	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d903      	bls.n	8009efe <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	220d      	movs	r2, #13
 8009efa:	701a      	strb	r2, [r3, #0]
      break;
 8009efc:	e160      	b.n	800a1c0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	795b      	ldrb	r3, [r3, #5]
 8009f02:	4619      	mov	r1, r3
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f001 f907 	bl	800b118 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	791b      	ldrb	r3, [r3, #4]
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f001 f901 	bl	800b118 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	701a      	strb	r2, [r3, #0]
      break;
 8009f1c:	e150      	b.n	800a1c0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009f1e:	2112      	movs	r1, #18
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f9f1 	bl	800a308 <USBH_Get_DevDesc>
 8009f26:	4603      	mov	r3, r0
 8009f28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f2a:	7bbb      	ldrb	r3, [r7, #14]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d103      	bne.n	8009f38 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2202      	movs	r2, #2
 8009f34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009f36:	e145      	b.n	800a1c4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f38:	7bbb      	ldrb	r3, [r7, #14]
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	f040 8142 	bne.w	800a1c4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009f46:	3301      	adds	r3, #1
 8009f48:	b2da      	uxtb	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d903      	bls.n	8009f62 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	220d      	movs	r2, #13
 8009f5e:	701a      	strb	r2, [r3, #0]
      break;
 8009f60:	e130      	b.n	800a1c4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	795b      	ldrb	r3, [r3, #5]
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 f8d5 	bl	800b118 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	791b      	ldrb	r3, [r3, #4]
 8009f72:	4619      	mov	r1, r3
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f001 f8cf 	bl	800b118 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	701a      	strb	r2, [r3, #0]
      break;
 8009f86:	e11d      	b.n	800a1c4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009f88:	2101      	movs	r1, #1
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 fa7b 	bl	800a486 <USBH_SetAddress>
 8009f90:	4603      	mov	r3, r0
 8009f92:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d132      	bne.n	800a000 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009f9a:	2002      	movs	r0, #2
 8009f9c:	f001 fbb5 	bl	800b70a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2203      	movs	r2, #3
 8009fac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	7919      	ldrb	r1, [r3, #4]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009fc2:	b292      	uxth	r2, r2
 8009fc4:	9202      	str	r2, [sp, #8]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	9201      	str	r2, [sp, #4]
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2280      	movs	r2, #128	; 0x80
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f001 f851 	bl	800b078 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	7959      	ldrb	r1, [r3, #5]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009fea:	b292      	uxth	r2, r2
 8009fec:	9202      	str	r2, [sp, #8]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	9201      	str	r2, [sp, #4]
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f001 f83d 	bl	800b078 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009ffe:	e0e3      	b.n	800a1c8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a000:	7bbb      	ldrb	r3, [r7, #14]
 800a002:	2b03      	cmp	r3, #3
 800a004:	f040 80e0 	bne.w	800a1c8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	220d      	movs	r2, #13
 800a00c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	705a      	strb	r2, [r3, #1]
      break;
 800a014:	e0d8      	b.n	800a1c8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a016:	2109      	movs	r1, #9
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f9a1 	bl	800a360 <USBH_Get_CfgDesc>
 800a01e:	4603      	mov	r3, r0
 800a020:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a022:	7bbb      	ldrb	r3, [r7, #14]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d103      	bne.n	800a030 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2204      	movs	r2, #4
 800a02c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a02e:	e0cd      	b.n	800a1cc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a030:	7bbb      	ldrb	r3, [r7, #14]
 800a032:	2b03      	cmp	r3, #3
 800a034:	f040 80ca 	bne.w	800a1cc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a03e:	3301      	adds	r3, #1
 800a040:	b2da      	uxtb	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a04e:	2b03      	cmp	r3, #3
 800a050:	d903      	bls.n	800a05a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	220d      	movs	r2, #13
 800a056:	701a      	strb	r2, [r3, #0]
      break;
 800a058:	e0b8      	b.n	800a1cc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	795b      	ldrb	r3, [r3, #5]
 800a05e:	4619      	mov	r1, r3
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f001 f859 	bl	800b118 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	791b      	ldrb	r3, [r3, #4]
 800a06a:	4619      	mov	r1, r3
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f001 f853 	bl	800b118 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	701a      	strb	r2, [r3, #0]
      break;
 800a07e:	e0a5      	b.n	800a1cc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a086:	4619      	mov	r1, r3
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f969 	bl	800a360 <USBH_Get_CfgDesc>
 800a08e:	4603      	mov	r3, r0
 800a090:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a092:	7bbb      	ldrb	r3, [r7, #14]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d103      	bne.n	800a0a0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2205      	movs	r2, #5
 800a09c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a09e:	e097      	b.n	800a1d0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0a0:	7bbb      	ldrb	r3, [r7, #14]
 800a0a2:	2b03      	cmp	r3, #3
 800a0a4:	f040 8094 	bne.w	800a1d0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a0be:	2b03      	cmp	r3, #3
 800a0c0:	d903      	bls.n	800a0ca <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	220d      	movs	r2, #13
 800a0c6:	701a      	strb	r2, [r3, #0]
      break;
 800a0c8:	e082      	b.n	800a1d0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	795b      	ldrb	r3, [r3, #5]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f001 f821 	bl	800b118 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	791b      	ldrb	r3, [r3, #4]
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f001 f81b 	bl	800b118 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	701a      	strb	r2, [r3, #0]
      break;
 800a0ee:	e06f      	b.n	800a1d0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d019      	beq.n	800a12e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a106:	23ff      	movs	r3, #255	; 0xff
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f953 	bl	800a3b4 <USBH_Get_StringDesc>
 800a10e:	4603      	mov	r3, r0
 800a110:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a112:	7bbb      	ldrb	r3, [r7, #14]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d103      	bne.n	800a120 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2206      	movs	r2, #6
 800a11c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a11e:	e059      	b.n	800a1d4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a120:	7bbb      	ldrb	r3, [r7, #14]
 800a122:	2b03      	cmp	r3, #3
 800a124:	d156      	bne.n	800a1d4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2206      	movs	r2, #6
 800a12a:	705a      	strb	r2, [r3, #1]
      break;
 800a12c:	e052      	b.n	800a1d4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2206      	movs	r2, #6
 800a132:	705a      	strb	r2, [r3, #1]
      break;
 800a134:	e04e      	b.n	800a1d4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d019      	beq.n	800a174 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a14c:	23ff      	movs	r3, #255	; 0xff
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f930 	bl	800a3b4 <USBH_Get_StringDesc>
 800a154:	4603      	mov	r3, r0
 800a156:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a158:	7bbb      	ldrb	r3, [r7, #14]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d103      	bne.n	800a166 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2207      	movs	r2, #7
 800a162:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a164:	e038      	b.n	800a1d8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a166:	7bbb      	ldrb	r3, [r7, #14]
 800a168:	2b03      	cmp	r3, #3
 800a16a:	d135      	bne.n	800a1d8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2207      	movs	r2, #7
 800a170:	705a      	strb	r2, [r3, #1]
      break;
 800a172:	e031      	b.n	800a1d8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2207      	movs	r2, #7
 800a178:	705a      	strb	r2, [r3, #1]
      break;
 800a17a:	e02d      	b.n	800a1d8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a182:	2b00      	cmp	r3, #0
 800a184:	d017      	beq.n	800a1b6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a192:	23ff      	movs	r3, #255	; 0xff
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 f90d 	bl	800a3b4 <USBH_Get_StringDesc>
 800a19a:	4603      	mov	r3, r0
 800a19c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a19e:	7bbb      	ldrb	r3, [r7, #14]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d102      	bne.n	800a1aa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a1a8:	e018      	b.n	800a1dc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1aa:	7bbb      	ldrb	r3, [r7, #14]
 800a1ac:	2b03      	cmp	r3, #3
 800a1ae:	d115      	bne.n	800a1dc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1b4:	e012      	b.n	800a1dc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	73fb      	strb	r3, [r7, #15]
      break;
 800a1ba:	e00f      	b.n	800a1dc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a1bc:	bf00      	nop
 800a1be:	e00e      	b.n	800a1de <USBH_HandleEnum+0x3be>
      break;
 800a1c0:	bf00      	nop
 800a1c2:	e00c      	b.n	800a1de <USBH_HandleEnum+0x3be>
      break;
 800a1c4:	bf00      	nop
 800a1c6:	e00a      	b.n	800a1de <USBH_HandleEnum+0x3be>
      break;
 800a1c8:	bf00      	nop
 800a1ca:	e008      	b.n	800a1de <USBH_HandleEnum+0x3be>
      break;
 800a1cc:	bf00      	nop
 800a1ce:	e006      	b.n	800a1de <USBH_HandleEnum+0x3be>
      break;
 800a1d0:	bf00      	nop
 800a1d2:	e004      	b.n	800a1de <USBH_HandleEnum+0x3be>
      break;
 800a1d4:	bf00      	nop
 800a1d6:	e002      	b.n	800a1de <USBH_HandleEnum+0x3be>
      break;
 800a1d8:	bf00      	nop
 800a1da:	e000      	b.n	800a1de <USBH_HandleEnum+0x3be>
      break;
 800a1dc:	bf00      	nop
  }
  return Status;
 800a1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	683a      	ldr	r2, [r7, #0]
 800a1f6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a1fa:	bf00      	nop
 800a1fc:	370c      	adds	r7, #12
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr

0800a206 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b082      	sub	sp, #8
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a214:	1c5a      	adds	r2, r3, #1
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f804 	bl	800a22a <USBH_HandleSof>
}
 800a222:	bf00      	nop
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b082      	sub	sp, #8
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	b2db      	uxtb	r3, r3
 800a238:	2b0b      	cmp	r3, #11
 800a23a:	d10a      	bne.n	800a252 <USBH_HandleSof+0x28>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a242:	2b00      	cmp	r3, #0
 800a244:	d005      	beq.n	800a252 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	4798      	blx	r3
  }
}
 800a252:	bf00      	nop
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a26a:	bf00      	nop
}
 800a26c:	370c      	adds	r7, #12
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a276:	b480      	push	{r7}
 800a278:	b083      	sub	sp, #12
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a286:	bf00      	nop
}
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a292:	b480      	push	{r7}
 800a294:	b083      	sub	sp, #12
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f001 f8c6 	bl	800b472 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	791b      	ldrb	r3, [r3, #4]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 ff13 	bl	800b118 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	795b      	ldrb	r3, [r3, #5]
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 ff0d 	bl	800b118 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af02      	add	r7, sp, #8
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	460b      	mov	r3, r1
 800a312:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a314:	887b      	ldrh	r3, [r7, #2]
 800a316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a31a:	d901      	bls.n	800a320 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a31c:	2303      	movs	r3, #3
 800a31e:	e01b      	b.n	800a358 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a326:	887b      	ldrh	r3, [r7, #2]
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	4613      	mov	r3, r2
 800a32c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a330:	2100      	movs	r1, #0
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f872 	bl	800a41c <USBH_GetDescriptor>
 800a338:	4603      	mov	r3, r0
 800a33a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d109      	bne.n	800a356 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a348:	887a      	ldrh	r2, [r7, #2]
 800a34a:	4619      	mov	r1, r3
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 f929 	bl	800a5a4 <USBH_ParseDevDesc>
 800a352:	4603      	mov	r3, r0
 800a354:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a356:	7bfb      	ldrb	r3, [r7, #15]
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af02      	add	r7, sp, #8
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	331c      	adds	r3, #28
 800a370:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a372:	887b      	ldrh	r3, [r7, #2]
 800a374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a378:	d901      	bls.n	800a37e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a37a:	2303      	movs	r3, #3
 800a37c:	e016      	b.n	800a3ac <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a37e:	887b      	ldrh	r3, [r7, #2]
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a388:	2100      	movs	r1, #0
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f846 	bl	800a41c <USBH_GetDescriptor>
 800a390:	4603      	mov	r3, r0
 800a392:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a394:	7bfb      	ldrb	r3, [r7, #15]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d107      	bne.n	800a3aa <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a39a:	887b      	ldrh	r3, [r7, #2]
 800a39c:	461a      	mov	r2, r3
 800a39e:	68b9      	ldr	r1, [r7, #8]
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f9b3 	bl	800a70c <USBH_ParseCfgDesc>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3710      	adds	r7, #16
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b088      	sub	sp, #32
 800a3b8:	af02      	add	r7, sp, #8
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	607a      	str	r2, [r7, #4]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	72fb      	strb	r3, [r7, #11]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a3c8:	893b      	ldrh	r3, [r7, #8]
 800a3ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3ce:	d802      	bhi.n	800a3d6 <USBH_Get_StringDesc+0x22>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d101      	bne.n	800a3da <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	e01c      	b.n	800a414 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a3da:	7afb      	ldrb	r3, [r7, #11]
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a3e2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a3ea:	893b      	ldrh	r3, [r7, #8]
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 f812 	bl	800a41c <USBH_GetDescriptor>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a3fc:	7dfb      	ldrb	r3, [r7, #23]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d107      	bne.n	800a412 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a408:	893a      	ldrh	r2, [r7, #8]
 800a40a:	6879      	ldr	r1, [r7, #4]
 800a40c:	4618      	mov	r0, r3
 800a40e:	f000 fb93 	bl	800ab38 <USBH_ParseStringDesc>
  }

  return status;
 800a412:	7dfb      	ldrb	r3, [r7, #23]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3718      	adds	r7, #24
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	607b      	str	r3, [r7, #4]
 800a426:	460b      	mov	r3, r1
 800a428:	72fb      	strb	r3, [r7, #11]
 800a42a:	4613      	mov	r3, r2
 800a42c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	789b      	ldrb	r3, [r3, #2]
 800a432:	2b01      	cmp	r3, #1
 800a434:	d11c      	bne.n	800a470 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a436:	7afb      	ldrb	r3, [r7, #11]
 800a438:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2206      	movs	r2, #6
 800a446:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	893a      	ldrh	r2, [r7, #8]
 800a44c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a44e:	893b      	ldrh	r3, [r7, #8]
 800a450:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a458:	d104      	bne.n	800a464 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f240 4209 	movw	r2, #1033	; 0x409
 800a460:	829a      	strh	r2, [r3, #20]
 800a462:	e002      	b.n	800a46a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	8b3a      	ldrh	r2, [r7, #24]
 800a46e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a470:	8b3b      	ldrh	r3, [r7, #24]
 800a472:	461a      	mov	r2, r3
 800a474:	6879      	ldr	r1, [r7, #4]
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f000 fbac 	bl	800abd4 <USBH_CtlReq>
 800a47c:	4603      	mov	r3, r0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b082      	sub	sp, #8
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	460b      	mov	r3, r1
 800a490:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	789b      	ldrb	r3, [r3, #2]
 800a496:	2b01      	cmp	r3, #1
 800a498:	d10f      	bne.n	800a4ba <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2205      	movs	r2, #5
 800a4a4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a4a6:	78fb      	ldrb	r3, [r7, #3]
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	2100      	movs	r1, #0
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fb88 	bl	800abd4 <USBH_CtlReq>
 800a4c4:	4603      	mov	r3, r0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b082      	sub	sp, #8
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	789b      	ldrb	r3, [r3, #2]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d10e      	bne.n	800a500 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2209      	movs	r2, #9
 800a4ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	887a      	ldrh	r2, [r7, #2]
 800a4f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a500:	2200      	movs	r2, #0
 800a502:	2100      	movs	r1, #0
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fb65 	bl	800abd4 <USBH_CtlReq>
 800a50a:	4603      	mov	r3, r0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	460b      	mov	r3, r1
 800a51e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	789b      	ldrb	r3, [r3, #2]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d10f      	bne.n	800a548 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2203      	movs	r2, #3
 800a532:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a534:	78fb      	ldrb	r3, [r7, #3]
 800a536:	b29a      	uxth	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a548:	2200      	movs	r2, #0
 800a54a:	2100      	movs	r1, #0
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 fb41 	bl	800abd4 <USBH_CtlReq>
 800a552:	4603      	mov	r3, r0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3708      	adds	r7, #8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	460b      	mov	r3, r1
 800a566:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	789b      	ldrb	r3, [r3, #2]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d10f      	bne.n	800a590 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2202      	movs	r2, #2
 800a574:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2201      	movs	r2, #1
 800a57a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a582:	78fb      	ldrb	r3, [r7, #3]
 800a584:	b29a      	uxth	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a590:	2200      	movs	r2, #0
 800a592:	2100      	movs	r1, #0
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 fb1d 	bl	800abd4 <USBH_CtlReq>
 800a59a:	4603      	mov	r3, r0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3708      	adds	r7, #8
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b087      	sub	sp, #28
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f203 3326 	addw	r3, r3, #806	; 0x326
 800a5b8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d101      	bne.n	800a5c8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	e098      	b.n	800a6fa <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	781a      	ldrb	r2, [r3, #0]
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	785a      	ldrb	r2, [r3, #1]
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	3302      	adds	r3, #2
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	3303      	adds	r3, #3
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	021b      	lsls	r3, r3, #8
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	791a      	ldrb	r2, [r3, #4]
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	795a      	ldrb	r2, [r3, #5]
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	799a      	ldrb	r2, [r3, #6]
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	79da      	ldrb	r2, [r3, #7]
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d004      	beq.n	800a628 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a624:	2b01      	cmp	r3, #1
 800a626:	d11b      	bne.n	800a660 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	79db      	ldrb	r3, [r3, #7]
 800a62c:	2b20      	cmp	r3, #32
 800a62e:	dc0f      	bgt.n	800a650 <USBH_ParseDevDesc+0xac>
 800a630:	2b08      	cmp	r3, #8
 800a632:	db0f      	blt.n	800a654 <USBH_ParseDevDesc+0xb0>
 800a634:	3b08      	subs	r3, #8
 800a636:	4a34      	ldr	r2, [pc, #208]	; (800a708 <USBH_ParseDevDesc+0x164>)
 800a638:	fa22 f303 	lsr.w	r3, r2, r3
 800a63c:	f003 0301 	and.w	r3, r3, #1
 800a640:	2b00      	cmp	r3, #0
 800a642:	bf14      	ite	ne
 800a644:	2301      	movne	r3, #1
 800a646:	2300      	moveq	r3, #0
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d106      	bne.n	800a65c <USBH_ParseDevDesc+0xb8>
 800a64e:	e001      	b.n	800a654 <USBH_ParseDevDesc+0xb0>
 800a650:	2b40      	cmp	r3, #64	; 0x40
 800a652:	d003      	beq.n	800a65c <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	2208      	movs	r2, #8
 800a658:	71da      	strb	r2, [r3, #7]
        break;
 800a65a:	e000      	b.n	800a65e <USBH_ParseDevDesc+0xba>
        break;
 800a65c:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a65e:	e00e      	b.n	800a67e <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a666:	2b02      	cmp	r3, #2
 800a668:	d107      	bne.n	800a67a <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	79db      	ldrb	r3, [r3, #7]
 800a66e:	2b08      	cmp	r3, #8
 800a670:	d005      	beq.n	800a67e <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	2208      	movs	r2, #8
 800a676:	71da      	strb	r2, [r3, #7]
 800a678:	e001      	b.n	800a67e <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a67a:	2303      	movs	r3, #3
 800a67c:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a67e:	88fb      	ldrh	r3, [r7, #6]
 800a680:	2b08      	cmp	r3, #8
 800a682:	d939      	bls.n	800a6f8 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	3308      	adds	r3, #8
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	3309      	adds	r3, #9
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	b29b      	uxth	r3, r3
 800a694:	021b      	lsls	r3, r3, #8
 800a696:	b29b      	uxth	r3, r3
 800a698:	4313      	orrs	r3, r2
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	330a      	adds	r3, #10
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	330b      	adds	r3, #11
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	021b      	lsls	r3, r3, #8
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	330c      	adds	r3, #12
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	330d      	adds	r3, #13
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	021b      	lsls	r3, r3, #8
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	7b9a      	ldrb	r2, [r3, #14]
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	7bda      	ldrb	r2, [r3, #15]
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	7c1a      	ldrb	r2, [r3, #16]
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	7c5a      	ldrb	r2, [r3, #17]
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a6f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	371c      	adds	r7, #28
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr
 800a706:	bf00      	nop
 800a708:	01000101 	.word	0x01000101

0800a70c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b08c      	sub	sp, #48	; 0x30
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	4613      	mov	r3, r2
 800a718:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a720:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a728:	2300      	movs	r3, #0
 800a72a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a72e:	2300      	movs	r3, #0
 800a730:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d101      	bne.n	800a73e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a73a:	2302      	movs	r3, #2
 800a73c:	e0db      	b.n	800a8f6 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	781a      	ldrb	r2, [r3, #0]
 800a746:	6a3b      	ldr	r3, [r7, #32]
 800a748:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	785a      	ldrb	r2, [r3, #1]
 800a74e:	6a3b      	ldr	r3, [r7, #32]
 800a750:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	3302      	adds	r3, #2
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	b29a      	uxth	r2, r3
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	3303      	adds	r3, #3
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	b29b      	uxth	r3, r3
 800a762:	021b      	lsls	r3, r3, #8
 800a764:	b29b      	uxth	r3, r3
 800a766:	4313      	orrs	r3, r2
 800a768:	b29b      	uxth	r3, r3
 800a76a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a76e:	bf28      	it	cs
 800a770:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a774:	b29a      	uxth	r2, r3
 800a776:	6a3b      	ldr	r3, [r7, #32]
 800a778:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	791a      	ldrb	r2, [r3, #4]
 800a77e:	6a3b      	ldr	r3, [r7, #32]
 800a780:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	795a      	ldrb	r2, [r3, #5]
 800a786:	6a3b      	ldr	r3, [r7, #32]
 800a788:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	799a      	ldrb	r2, [r3, #6]
 800a78e:	6a3b      	ldr	r3, [r7, #32]
 800a790:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	79da      	ldrb	r2, [r3, #7]
 800a796:	6a3b      	ldr	r3, [r7, #32]
 800a798:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	7a1a      	ldrb	r2, [r3, #8]
 800a79e:	6a3b      	ldr	r3, [r7, #32]
 800a7a0:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a7a2:	6a3b      	ldr	r3, [r7, #32]
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	2b09      	cmp	r3, #9
 800a7a8:	d002      	beq.n	800a7b0 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a7aa:	6a3b      	ldr	r3, [r7, #32]
 800a7ac:	2209      	movs	r2, #9
 800a7ae:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a7b0:	88fb      	ldrh	r3, [r7, #6]
 800a7b2:	2b09      	cmp	r3, #9
 800a7b4:	f240 809d 	bls.w	800a8f2 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800a7b8:	2309      	movs	r3, #9
 800a7ba:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a7c0:	e081      	b.n	800a8c6 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a7c2:	f107 0316 	add.w	r3, r7, #22
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7ca:	f000 f9e8 	bl	800ab9e <USBH_GetNextDesc>
 800a7ce:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d2:	785b      	ldrb	r3, [r3, #1]
 800a7d4:	2b04      	cmp	r3, #4
 800a7d6:	d176      	bne.n	800a8c6 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	2b09      	cmp	r3, #9
 800a7de:	d002      	beq.n	800a7e6 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e2:	2209      	movs	r2, #9
 800a7e4:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a7e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7ea:	221a      	movs	r2, #26
 800a7ec:	fb02 f303 	mul.w	r3, r2, r3
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	6a3a      	ldr	r2, [r7, #32]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	3302      	adds	r3, #2
 800a7f8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a7fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7fc:	69f8      	ldr	r0, [r7, #28]
 800a7fe:	f000 f87e 	bl	800a8fe <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a802:	2300      	movs	r3, #0
 800a804:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a808:	2300      	movs	r3, #0
 800a80a:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a80c:	e043      	b.n	800a896 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a80e:	f107 0316 	add.w	r3, r7, #22
 800a812:	4619      	mov	r1, r3
 800a814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a816:	f000 f9c2 	bl	800ab9e <USBH_GetNextDesc>
 800a81a:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81e:	785b      	ldrb	r3, [r3, #1]
 800a820:	2b05      	cmp	r3, #5
 800a822:	d138      	bne.n	800a896 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	795b      	ldrb	r3, [r3, #5]
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d113      	bne.n	800a854 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a830:	2b02      	cmp	r3, #2
 800a832:	d003      	beq.n	800a83c <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	799b      	ldrb	r3, [r3, #6]
 800a838:	2b03      	cmp	r3, #3
 800a83a:	d10b      	bne.n	800a854 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	79db      	ldrb	r3, [r3, #7]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10b      	bne.n	800a85c <USBH_ParseCfgDesc+0x150>
 800a844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	2b09      	cmp	r3, #9
 800a84a:	d007      	beq.n	800a85c <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800a84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84e:	2209      	movs	r2, #9
 800a850:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a852:	e003      	b.n	800a85c <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a856:	2207      	movs	r2, #7
 800a858:	701a      	strb	r2, [r3, #0]
 800a85a:	e000      	b.n	800a85e <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a85c:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a85e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a862:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a866:	3201      	adds	r2, #1
 800a868:	00d2      	lsls	r2, r2, #3
 800a86a:	211a      	movs	r1, #26
 800a86c:	fb01 f303 	mul.w	r3, r1, r3
 800a870:	4413      	add	r3, r2
 800a872:	3308      	adds	r3, #8
 800a874:	6a3a      	ldr	r2, [r7, #32]
 800a876:	4413      	add	r3, r2
 800a878:	3304      	adds	r3, #4
 800a87a:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a87c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a87e:	69b9      	ldr	r1, [r7, #24]
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f000 f870 	bl	800a966 <USBH_ParseEPDesc>
 800a886:	4603      	mov	r3, r0
 800a888:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a88c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a890:	3301      	adds	r3, #1
 800a892:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	791b      	ldrb	r3, [r3, #4]
 800a89a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d204      	bcs.n	800a8ac <USBH_ParseCfgDesc+0x1a0>
 800a8a2:	6a3b      	ldr	r3, [r7, #32]
 800a8a4:	885a      	ldrh	r2, [r3, #2]
 800a8a6:	8afb      	ldrh	r3, [r7, #22]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d8b0      	bhi.n	800a80e <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	791b      	ldrb	r3, [r3, #4]
 800a8b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d201      	bcs.n	800a8bc <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	e01c      	b.n	800a8f6 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800a8bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a8c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d805      	bhi.n	800a8da <USBH_ParseCfgDesc+0x1ce>
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	885a      	ldrh	r2, [r3, #2]
 800a8d2:	8afb      	ldrh	r3, [r7, #22]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	f63f af74 	bhi.w	800a7c2 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a8da:	6a3b      	ldr	r3, [r7, #32]
 800a8dc:	791b      	ldrb	r3, [r3, #4]
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	bf28      	it	cs
 800a8e2:	2302      	movcs	r3, #2
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d201      	bcs.n	800a8f2 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	e001      	b.n	800a8f6 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800a8f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3730      	adds	r7, #48	; 0x30
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a8fe:	b480      	push	{r7}
 800a900:	b083      	sub	sp, #12
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	781a      	ldrb	r2, [r3, #0]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	785a      	ldrb	r2, [r3, #1]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	789a      	ldrb	r2, [r3, #2]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	78da      	ldrb	r2, [r3, #3]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	3304      	adds	r3, #4
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	2b02      	cmp	r3, #2
 800a930:	bf28      	it	cs
 800a932:	2302      	movcs	r3, #2
 800a934:	b2da      	uxtb	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	795a      	ldrb	r2, [r3, #5]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	799a      	ldrb	r2, [r3, #6]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	79da      	ldrb	r2, [r3, #7]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	7a1a      	ldrb	r2, [r3, #8]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	721a      	strb	r2, [r3, #8]
}
 800a95a:	bf00      	nop
 800a95c:	370c      	adds	r7, #12
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a966:	b480      	push	{r7}
 800a968:	b087      	sub	sp, #28
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	60f8      	str	r0, [r7, #12]
 800a96e:	60b9      	str	r1, [r7, #8]
 800a970:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	781a      	ldrb	r2, [r3, #0]
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	785a      	ldrb	r2, [r3, #1]
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	789a      	ldrb	r2, [r3, #2]
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	78da      	ldrb	r2, [r3, #3]
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	3304      	adds	r3, #4
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	3305      	adds	r3, #5
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	021b      	lsls	r3, r3, #8
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	b29a      	uxth	r2, r3
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	799a      	ldrb	r2, [r3, #6]
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	889b      	ldrh	r3, [r3, #4]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d009      	beq.n	800a9d6 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a9c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9ca:	d804      	bhi.n	800a9d6 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a9d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9d4:	d901      	bls.n	800a9da <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d136      	bne.n	800aa52 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	78db      	ldrb	r3, [r3, #3]
 800a9e8:	f003 0303 	and.w	r3, r3, #3
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d108      	bne.n	800aa02 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	889b      	ldrh	r3, [r3, #4]
 800a9f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9f8:	f240 8097 	bls.w	800ab2a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a9fc:	2303      	movs	r3, #3
 800a9fe:	75fb      	strb	r3, [r7, #23]
 800aa00:	e093      	b.n	800ab2a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	78db      	ldrb	r3, [r3, #3]
 800aa06:	f003 0303 	and.w	r3, r3, #3
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d107      	bne.n	800aa1e <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	889b      	ldrh	r3, [r3, #4]
 800aa12:	2b40      	cmp	r3, #64	; 0x40
 800aa14:	f240 8089 	bls.w	800ab2a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800aa18:	2303      	movs	r3, #3
 800aa1a:	75fb      	strb	r3, [r7, #23]
 800aa1c:	e085      	b.n	800ab2a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	78db      	ldrb	r3, [r3, #3]
 800aa22:	f003 0303 	and.w	r3, r3, #3
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d005      	beq.n	800aa36 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	78db      	ldrb	r3, [r3, #3]
 800aa2e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	d10a      	bne.n	800aa4c <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	799b      	ldrb	r3, [r3, #6]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d003      	beq.n	800aa46 <USBH_ParseEPDesc+0xe0>
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	799b      	ldrb	r3, [r3, #6]
 800aa42:	2b10      	cmp	r3, #16
 800aa44:	d970      	bls.n	800ab28 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa46:	2303      	movs	r3, #3
 800aa48:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aa4a:	e06d      	b.n	800ab28 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	75fb      	strb	r3, [r7, #23]
 800aa50:	e06b      	b.n	800ab2a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d13c      	bne.n	800aad6 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	78db      	ldrb	r3, [r3, #3]
 800aa60:	f003 0303 	and.w	r3, r3, #3
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d005      	beq.n	800aa74 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	78db      	ldrb	r3, [r3, #3]
 800aa6c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d106      	bne.n	800aa82 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	889b      	ldrh	r3, [r3, #4]
 800aa78:	2b40      	cmp	r3, #64	; 0x40
 800aa7a:	d956      	bls.n	800ab2a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800aa7c:	2303      	movs	r3, #3
 800aa7e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aa80:	e053      	b.n	800ab2a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	78db      	ldrb	r3, [r3, #3]
 800aa86:	f003 0303 	and.w	r3, r3, #3
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d10e      	bne.n	800aaac <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	799b      	ldrb	r3, [r3, #6]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d007      	beq.n	800aaa6 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800aa9a:	2b10      	cmp	r3, #16
 800aa9c:	d803      	bhi.n	800aaa6 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800aaa2:	2b40      	cmp	r3, #64	; 0x40
 800aaa4:	d941      	bls.n	800ab2a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	75fb      	strb	r3, [r7, #23]
 800aaaa:	e03e      	b.n	800ab2a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	78db      	ldrb	r3, [r3, #3]
 800aab0:	f003 0303 	and.w	r3, r3, #3
 800aab4:	2b03      	cmp	r3, #3
 800aab6:	d10b      	bne.n	800aad0 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	799b      	ldrb	r3, [r3, #6]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d004      	beq.n	800aaca <USBH_ParseEPDesc+0x164>
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	889b      	ldrh	r3, [r3, #4]
 800aac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aac8:	d32f      	bcc.n	800ab2a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800aaca:	2303      	movs	r3, #3
 800aacc:	75fb      	strb	r3, [r7, #23]
 800aace:	e02c      	b.n	800ab2a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aad0:	2303      	movs	r3, #3
 800aad2:	75fb      	strb	r3, [r7, #23]
 800aad4:	e029      	b.n	800ab2a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aadc:	2b02      	cmp	r3, #2
 800aade:	d120      	bne.n	800ab22 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	78db      	ldrb	r3, [r3, #3]
 800aae4:	f003 0303 	and.w	r3, r3, #3
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d106      	bne.n	800aafa <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	889b      	ldrh	r3, [r3, #4]
 800aaf0:	2b08      	cmp	r3, #8
 800aaf2:	d01a      	beq.n	800ab2a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800aaf4:	2303      	movs	r3, #3
 800aaf6:	75fb      	strb	r3, [r7, #23]
 800aaf8:	e017      	b.n	800ab2a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	78db      	ldrb	r3, [r3, #3]
 800aafe:	f003 0303 	and.w	r3, r3, #3
 800ab02:	2b03      	cmp	r3, #3
 800ab04:	d10a      	bne.n	800ab1c <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	799b      	ldrb	r3, [r3, #6]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d003      	beq.n	800ab16 <USBH_ParseEPDesc+0x1b0>
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	889b      	ldrh	r3, [r3, #4]
 800ab12:	2b08      	cmp	r3, #8
 800ab14:	d909      	bls.n	800ab2a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800ab16:	2303      	movs	r3, #3
 800ab18:	75fb      	strb	r3, [r7, #23]
 800ab1a:	e006      	b.n	800ab2a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	75fb      	strb	r3, [r7, #23]
 800ab20:	e003      	b.n	800ab2a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ab22:	2303      	movs	r3, #3
 800ab24:	75fb      	strb	r3, [r7, #23]
 800ab26:	e000      	b.n	800ab2a <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ab28:	bf00      	nop
  }

  return status;
 800ab2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	371c      	adds	r7, #28
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b087      	sub	sp, #28
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	4613      	mov	r3, r2
 800ab44:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	2b03      	cmp	r3, #3
 800ab4e:	d120      	bne.n	800ab92 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	1e9a      	subs	r2, r3, #2
 800ab56:	88fb      	ldrh	r3, [r7, #6]
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	bf28      	it	cs
 800ab5c:	4613      	movcs	r3, r2
 800ab5e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	3302      	adds	r3, #2
 800ab64:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ab66:	2300      	movs	r3, #0
 800ab68:	82fb      	strh	r3, [r7, #22]
 800ab6a:	e00b      	b.n	800ab84 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ab6c:	8afb      	ldrh	r3, [r7, #22]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	4413      	add	r3, r2
 800ab72:	781a      	ldrb	r2, [r3, #0]
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ab7e:	8afb      	ldrh	r3, [r7, #22]
 800ab80:	3302      	adds	r3, #2
 800ab82:	82fb      	strh	r3, [r7, #22]
 800ab84:	8afa      	ldrh	r2, [r7, #22]
 800ab86:	8abb      	ldrh	r3, [r7, #20]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d3ef      	bcc.n	800ab6c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	701a      	strb	r2, [r3, #0]
  }
}
 800ab92:	bf00      	nop
 800ab94:	371c      	adds	r7, #28
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ab9e:	b480      	push	{r7}
 800aba0:	b085      	sub	sp, #20
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	881a      	ldrh	r2, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	4413      	add	r3, r2
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4413      	add	r3, r2
 800abc4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800abc6:	68fb      	ldr	r3, [r7, #12]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3714      	adds	r7, #20
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b086      	sub	sp, #24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	4613      	mov	r3, r2
 800abe0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800abe2:	2301      	movs	r3, #1
 800abe4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	789b      	ldrb	r3, [r3, #2]
 800abea:	2b01      	cmp	r3, #1
 800abec:	d002      	beq.n	800abf4 <USBH_CtlReq+0x20>
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d00f      	beq.n	800ac12 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800abf2:	e027      	b.n	800ac44 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	68ba      	ldr	r2, [r7, #8]
 800abf8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	88fa      	ldrh	r2, [r7, #6]
 800abfe:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2201      	movs	r2, #1
 800ac04:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2202      	movs	r2, #2
 800ac0a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	75fb      	strb	r3, [r7, #23]
      break;
 800ac10:	e018      	b.n	800ac44 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	f000 f81c 	bl	800ac50 <USBH_HandleControl>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ac1c:	7dfb      	ldrb	r3, [r7, #23]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d002      	beq.n	800ac28 <USBH_CtlReq+0x54>
 800ac22:	7dfb      	ldrb	r3, [r7, #23]
 800ac24:	2b03      	cmp	r3, #3
 800ac26:	d106      	bne.n	800ac36 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	761a      	strb	r2, [r3, #24]
      break;
 800ac34:	e005      	b.n	800ac42 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ac36:	7dfb      	ldrb	r3, [r7, #23]
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d102      	bne.n	800ac42 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	709a      	strb	r2, [r3, #2]
      break;
 800ac42:	bf00      	nop
  }
  return status;
 800ac44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3718      	adds	r7, #24
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
	...

0800ac50 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b086      	sub	sp, #24
 800ac54:	af02      	add	r7, sp, #8
 800ac56:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	7e1b      	ldrb	r3, [r3, #24]
 800ac64:	3b01      	subs	r3, #1
 800ac66:	2b0a      	cmp	r3, #10
 800ac68:	f200 8156 	bhi.w	800af18 <USBH_HandleControl+0x2c8>
 800ac6c:	a201      	add	r2, pc, #4	; (adr r2, 800ac74 <USBH_HandleControl+0x24>)
 800ac6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac72:	bf00      	nop
 800ac74:	0800aca1 	.word	0x0800aca1
 800ac78:	0800acbb 	.word	0x0800acbb
 800ac7c:	0800ad25 	.word	0x0800ad25
 800ac80:	0800ad4b 	.word	0x0800ad4b
 800ac84:	0800ad83 	.word	0x0800ad83
 800ac88:	0800adad 	.word	0x0800adad
 800ac8c:	0800adff 	.word	0x0800adff
 800ac90:	0800ae21 	.word	0x0800ae21
 800ac94:	0800ae5d 	.word	0x0800ae5d
 800ac98:	0800ae83 	.word	0x0800ae83
 800ac9c:	0800aec1 	.word	0x0800aec1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f103 0110 	add.w	r1, r3, #16
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	795b      	ldrb	r3, [r3, #5]
 800acaa:	461a      	mov	r2, r3
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 f943 	bl	800af38 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2202      	movs	r2, #2
 800acb6:	761a      	strb	r2, [r3, #24]
      break;
 800acb8:	e139      	b.n	800af2e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	795b      	ldrb	r3, [r3, #5]
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fcc5 	bl	800b650 <USBH_LL_GetURBState>
 800acc6:	4603      	mov	r3, r0
 800acc8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800acca:	7bbb      	ldrb	r3, [r7, #14]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d11e      	bne.n	800ad0e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	7c1b      	ldrb	r3, [r3, #16]
 800acd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800acd8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	8adb      	ldrh	r3, [r3, #22]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00a      	beq.n	800acf8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ace2:	7b7b      	ldrb	r3, [r7, #13]
 800ace4:	2b80      	cmp	r3, #128	; 0x80
 800ace6:	d103      	bne.n	800acf0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2203      	movs	r2, #3
 800acec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800acee:	e115      	b.n	800af1c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2205      	movs	r2, #5
 800acf4:	761a      	strb	r2, [r3, #24]
      break;
 800acf6:	e111      	b.n	800af1c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800acf8:	7b7b      	ldrb	r3, [r7, #13]
 800acfa:	2b80      	cmp	r3, #128	; 0x80
 800acfc:	d103      	bne.n	800ad06 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2209      	movs	r2, #9
 800ad02:	761a      	strb	r2, [r3, #24]
      break;
 800ad04:	e10a      	b.n	800af1c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2207      	movs	r2, #7
 800ad0a:	761a      	strb	r2, [r3, #24]
      break;
 800ad0c:	e106      	b.n	800af1c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ad0e:	7bbb      	ldrb	r3, [r7, #14]
 800ad10:	2b04      	cmp	r3, #4
 800ad12:	d003      	beq.n	800ad1c <USBH_HandleControl+0xcc>
 800ad14:	7bbb      	ldrb	r3, [r7, #14]
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	f040 8100 	bne.w	800af1c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	220b      	movs	r2, #11
 800ad20:	761a      	strb	r2, [r3, #24]
      break;
 800ad22:	e0fb      	b.n	800af1c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6899      	ldr	r1, [r3, #8]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	899a      	ldrh	r2, [r3, #12]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	791b      	ldrb	r3, [r3, #4]
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f93a 	bl	800afb6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2204      	movs	r2, #4
 800ad46:	761a      	strb	r2, [r3, #24]
      break;
 800ad48:	e0f1      	b.n	800af2e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	791b      	ldrb	r3, [r3, #4]
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 fc7d 	bl	800b650 <USBH_LL_GetURBState>
 800ad56:	4603      	mov	r3, r0
 800ad58:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ad5a:	7bbb      	ldrb	r3, [r7, #14]
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d102      	bne.n	800ad66 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2209      	movs	r2, #9
 800ad64:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ad66:	7bbb      	ldrb	r3, [r7, #14]
 800ad68:	2b05      	cmp	r3, #5
 800ad6a:	d102      	bne.n	800ad72 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ad6c:	2303      	movs	r3, #3
 800ad6e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ad70:	e0d6      	b.n	800af20 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ad72:	7bbb      	ldrb	r3, [r7, #14]
 800ad74:	2b04      	cmp	r3, #4
 800ad76:	f040 80d3 	bne.w	800af20 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	220b      	movs	r2, #11
 800ad7e:	761a      	strb	r2, [r3, #24]
      break;
 800ad80:	e0ce      	b.n	800af20 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6899      	ldr	r1, [r3, #8]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	899a      	ldrh	r2, [r3, #12]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	795b      	ldrb	r3, [r3, #5]
 800ad8e:	2001      	movs	r0, #1
 800ad90:	9000      	str	r0, [sp, #0]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 f8ea 	bl	800af6c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2206      	movs	r2, #6
 800ada8:	761a      	strb	r2, [r3, #24]
      break;
 800adaa:	e0c0      	b.n	800af2e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	795b      	ldrb	r3, [r3, #5]
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fc4c 	bl	800b650 <USBH_LL_GetURBState>
 800adb8:	4603      	mov	r3, r0
 800adba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800adbc:	7bbb      	ldrb	r3, [r7, #14]
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d103      	bne.n	800adca <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2207      	movs	r2, #7
 800adc6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800adc8:	e0ac      	b.n	800af24 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800adca:	7bbb      	ldrb	r3, [r7, #14]
 800adcc:	2b05      	cmp	r3, #5
 800adce:	d105      	bne.n	800addc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	220c      	movs	r2, #12
 800add4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800add6:	2303      	movs	r3, #3
 800add8:	73fb      	strb	r3, [r7, #15]
      break;
 800adda:	e0a3      	b.n	800af24 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800addc:	7bbb      	ldrb	r3, [r7, #14]
 800adde:	2b02      	cmp	r3, #2
 800ade0:	d103      	bne.n	800adea <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2205      	movs	r2, #5
 800ade6:	761a      	strb	r2, [r3, #24]
      break;
 800ade8:	e09c      	b.n	800af24 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800adea:	7bbb      	ldrb	r3, [r7, #14]
 800adec:	2b04      	cmp	r3, #4
 800adee:	f040 8099 	bne.w	800af24 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	220b      	movs	r2, #11
 800adf6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800adf8:	2302      	movs	r3, #2
 800adfa:	73fb      	strb	r3, [r7, #15]
      break;
 800adfc:	e092      	b.n	800af24 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	791b      	ldrb	r3, [r3, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	2100      	movs	r1, #0
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f8d5 	bl	800afb6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae12:	b29a      	uxth	r2, r3
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2208      	movs	r2, #8
 800ae1c:	761a      	strb	r2, [r3, #24]

      break;
 800ae1e:	e086      	b.n	800af2e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	791b      	ldrb	r3, [r3, #4]
 800ae24:	4619      	mov	r1, r3
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 fc12 	bl	800b650 <USBH_LL_GetURBState>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae30:	7bbb      	ldrb	r3, [r7, #14]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d105      	bne.n	800ae42 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	220d      	movs	r2, #13
 800ae3a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ae40:	e072      	b.n	800af28 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ae42:	7bbb      	ldrb	r3, [r7, #14]
 800ae44:	2b04      	cmp	r3, #4
 800ae46:	d103      	bne.n	800ae50 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	220b      	movs	r2, #11
 800ae4c:	761a      	strb	r2, [r3, #24]
      break;
 800ae4e:	e06b      	b.n	800af28 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ae50:	7bbb      	ldrb	r3, [r7, #14]
 800ae52:	2b05      	cmp	r3, #5
 800ae54:	d168      	bne.n	800af28 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ae56:	2303      	movs	r3, #3
 800ae58:	73fb      	strb	r3, [r7, #15]
      break;
 800ae5a:	e065      	b.n	800af28 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	795b      	ldrb	r3, [r3, #5]
 800ae60:	2201      	movs	r2, #1
 800ae62:	9200      	str	r2, [sp, #0]
 800ae64:	2200      	movs	r2, #0
 800ae66:	2100      	movs	r1, #0
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 f87f 	bl	800af6c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae74:	b29a      	uxth	r2, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	220a      	movs	r2, #10
 800ae7e:	761a      	strb	r2, [r3, #24]
      break;
 800ae80:	e055      	b.n	800af2e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	795b      	ldrb	r3, [r3, #5]
 800ae86:	4619      	mov	r1, r3
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 fbe1 	bl	800b650 <USBH_LL_GetURBState>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ae92:	7bbb      	ldrb	r3, [r7, #14]
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d105      	bne.n	800aea4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	220d      	movs	r2, #13
 800aea0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aea2:	e043      	b.n	800af2c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aea4:	7bbb      	ldrb	r3, [r7, #14]
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d103      	bne.n	800aeb2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2209      	movs	r2, #9
 800aeae:	761a      	strb	r2, [r3, #24]
      break;
 800aeb0:	e03c      	b.n	800af2c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800aeb2:	7bbb      	ldrb	r3, [r7, #14]
 800aeb4:	2b04      	cmp	r3, #4
 800aeb6:	d139      	bne.n	800af2c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	220b      	movs	r2, #11
 800aebc:	761a      	strb	r2, [r3, #24]
      break;
 800aebe:	e035      	b.n	800af2c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	7e5b      	ldrb	r3, [r3, #25]
 800aec4:	3301      	adds	r3, #1
 800aec6:	b2da      	uxtb	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	765a      	strb	r2, [r3, #25]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	7e5b      	ldrb	r3, [r3, #25]
 800aed0:	2b02      	cmp	r3, #2
 800aed2:	d806      	bhi.n	800aee2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2201      	movs	r2, #1
 800aede:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800aee0:	e025      	b.n	800af2e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aee8:	2106      	movs	r1, #6
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	795b      	ldrb	r3, [r3, #5]
 800aef8:	4619      	mov	r1, r3
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 f90c 	bl	800b118 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	791b      	ldrb	r3, [r3, #4]
 800af04:	4619      	mov	r1, r3
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 f906 	bl	800b118 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800af12:	2302      	movs	r3, #2
 800af14:	73fb      	strb	r3, [r7, #15]
      break;
 800af16:	e00a      	b.n	800af2e <USBH_HandleControl+0x2de>

    default:
      break;
 800af18:	bf00      	nop
 800af1a:	e008      	b.n	800af2e <USBH_HandleControl+0x2de>
      break;
 800af1c:	bf00      	nop
 800af1e:	e006      	b.n	800af2e <USBH_HandleControl+0x2de>
      break;
 800af20:	bf00      	nop
 800af22:	e004      	b.n	800af2e <USBH_HandleControl+0x2de>
      break;
 800af24:	bf00      	nop
 800af26:	e002      	b.n	800af2e <USBH_HandleControl+0x2de>
      break;
 800af28:	bf00      	nop
 800af2a:	e000      	b.n	800af2e <USBH_HandleControl+0x2de>
      break;
 800af2c:	bf00      	nop
  }

  return status;
 800af2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b088      	sub	sp, #32
 800af3c:	af04      	add	r7, sp, #16
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	4613      	mov	r3, r2
 800af44:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800af46:	79f9      	ldrb	r1, [r7, #7]
 800af48:	2300      	movs	r3, #0
 800af4a:	9303      	str	r3, [sp, #12]
 800af4c:	2308      	movs	r3, #8
 800af4e:	9302      	str	r3, [sp, #8]
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	9301      	str	r3, [sp, #4]
 800af54:	2300      	movs	r3, #0
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	2300      	movs	r3, #0
 800af5a:	2200      	movs	r2, #0
 800af5c:	68f8      	ldr	r0, [r7, #12]
 800af5e:	f000 fb46 	bl	800b5ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b088      	sub	sp, #32
 800af70:	af04      	add	r7, sp, #16
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	4611      	mov	r1, r2
 800af78:	461a      	mov	r2, r3
 800af7a:	460b      	mov	r3, r1
 800af7c:	80fb      	strh	r3, [r7, #6]
 800af7e:	4613      	mov	r3, r2
 800af80:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d001      	beq.n	800af90 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800af8c:	2300      	movs	r3, #0
 800af8e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800af90:	7979      	ldrb	r1, [r7, #5]
 800af92:	7e3b      	ldrb	r3, [r7, #24]
 800af94:	9303      	str	r3, [sp, #12]
 800af96:	88fb      	ldrh	r3, [r7, #6]
 800af98:	9302      	str	r3, [sp, #8]
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	9301      	str	r3, [sp, #4]
 800af9e:	2301      	movs	r3, #1
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	2300      	movs	r3, #0
 800afa4:	2200      	movs	r2, #0
 800afa6:	68f8      	ldr	r0, [r7, #12]
 800afa8:	f000 fb21 	bl	800b5ee <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b088      	sub	sp, #32
 800afba:	af04      	add	r7, sp, #16
 800afbc:	60f8      	str	r0, [r7, #12]
 800afbe:	60b9      	str	r1, [r7, #8]
 800afc0:	4611      	mov	r1, r2
 800afc2:	461a      	mov	r2, r3
 800afc4:	460b      	mov	r3, r1
 800afc6:	80fb      	strh	r3, [r7, #6]
 800afc8:	4613      	mov	r3, r2
 800afca:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800afcc:	7979      	ldrb	r1, [r7, #5]
 800afce:	2300      	movs	r3, #0
 800afd0:	9303      	str	r3, [sp, #12]
 800afd2:	88fb      	ldrh	r3, [r7, #6]
 800afd4:	9302      	str	r3, [sp, #8]
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	9301      	str	r3, [sp, #4]
 800afda:	2301      	movs	r3, #1
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	2300      	movs	r3, #0
 800afe0:	2201      	movs	r2, #1
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	f000 fb03 	bl	800b5ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800afe8:	2300      	movs	r3, #0

}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b088      	sub	sp, #32
 800aff6:	af04      	add	r7, sp, #16
 800aff8:	60f8      	str	r0, [r7, #12]
 800affa:	60b9      	str	r1, [r7, #8]
 800affc:	4611      	mov	r1, r2
 800affe:	461a      	mov	r2, r3
 800b000:	460b      	mov	r3, r1
 800b002:	80fb      	strh	r3, [r7, #6]
 800b004:	4613      	mov	r3, r2
 800b006:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b012:	2300      	movs	r3, #0
 800b014:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b016:	7979      	ldrb	r1, [r7, #5]
 800b018:	7e3b      	ldrb	r3, [r7, #24]
 800b01a:	9303      	str	r3, [sp, #12]
 800b01c:	88fb      	ldrh	r3, [r7, #6]
 800b01e:	9302      	str	r3, [sp, #8]
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	9301      	str	r3, [sp, #4]
 800b024:	2301      	movs	r3, #1
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	2302      	movs	r3, #2
 800b02a:	2200      	movs	r2, #0
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f000 fade 	bl	800b5ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b032:	2300      	movs	r3, #0
}
 800b034:	4618      	mov	r0, r3
 800b036:	3710      	adds	r7, #16
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b088      	sub	sp, #32
 800b040:	af04      	add	r7, sp, #16
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	4611      	mov	r1, r2
 800b048:	461a      	mov	r2, r3
 800b04a:	460b      	mov	r3, r1
 800b04c:	80fb      	strh	r3, [r7, #6]
 800b04e:	4613      	mov	r3, r2
 800b050:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b052:	7979      	ldrb	r1, [r7, #5]
 800b054:	2300      	movs	r3, #0
 800b056:	9303      	str	r3, [sp, #12]
 800b058:	88fb      	ldrh	r3, [r7, #6]
 800b05a:	9302      	str	r3, [sp, #8]
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	9301      	str	r3, [sp, #4]
 800b060:	2301      	movs	r3, #1
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	2302      	movs	r3, #2
 800b066:	2201      	movs	r2, #1
 800b068:	68f8      	ldr	r0, [r7, #12]
 800b06a:	f000 fac0 	bl	800b5ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b06e:	2300      	movs	r3, #0
}
 800b070:	4618      	mov	r0, r3
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b086      	sub	sp, #24
 800b07c:	af04      	add	r7, sp, #16
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	4608      	mov	r0, r1
 800b082:	4611      	mov	r1, r2
 800b084:	461a      	mov	r2, r3
 800b086:	4603      	mov	r3, r0
 800b088:	70fb      	strb	r3, [r7, #3]
 800b08a:	460b      	mov	r3, r1
 800b08c:	70bb      	strb	r3, [r7, #2]
 800b08e:	4613      	mov	r3, r2
 800b090:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b092:	7878      	ldrb	r0, [r7, #1]
 800b094:	78ba      	ldrb	r2, [r7, #2]
 800b096:	78f9      	ldrb	r1, [r7, #3]
 800b098:	8b3b      	ldrh	r3, [r7, #24]
 800b09a:	9302      	str	r3, [sp, #8]
 800b09c:	7d3b      	ldrb	r3, [r7, #20]
 800b09e:	9301      	str	r3, [sp, #4]
 800b0a0:	7c3b      	ldrb	r3, [r7, #16]
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 fa53 	bl	800b552 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b082      	sub	sp, #8
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	460b      	mov	r3, r1
 800b0c0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b0c2:	78fb      	ldrb	r3, [r7, #3]
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fa72 	bl	800b5b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b084      	sub	sp, #16
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	460b      	mov	r3, r1
 800b0e0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f000 f836 	bl	800b154 <USBH_GetFreePipe>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b0ec:	89fb      	ldrh	r3, [r7, #14]
 800b0ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d00a      	beq.n	800b10c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b0f6:	78fa      	ldrb	r2, [r7, #3]
 800b0f8:	89fb      	ldrh	r3, [r7, #14]
 800b0fa:	f003 030f 	and.w	r3, r3, #15
 800b0fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b102:	6879      	ldr	r1, [r7, #4]
 800b104:	33e0      	adds	r3, #224	; 0xe0
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	440b      	add	r3, r1
 800b10a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b10c:	89fb      	ldrh	r3, [r7, #14]
 800b10e:	b2db      	uxtb	r3, r3
}
 800b110:	4618      	mov	r0, r3
 800b112:	3710      	adds	r7, #16
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	460b      	mov	r3, r1
 800b122:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b124:	78fb      	ldrb	r3, [r7, #3]
 800b126:	2b0f      	cmp	r3, #15
 800b128:	d80d      	bhi.n	800b146 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b12a:	78fb      	ldrb	r3, [r7, #3]
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	33e0      	adds	r3, #224	; 0xe0
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	4413      	add	r3, r2
 800b134:	685a      	ldr	r2, [r3, #4]
 800b136:	78fb      	ldrb	r3, [r7, #3]
 800b138:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b13c:	6879      	ldr	r1, [r7, #4]
 800b13e:	33e0      	adds	r3, #224	; 0xe0
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	440b      	add	r3, r1
 800b144:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b15c:	2300      	movs	r3, #0
 800b15e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b160:	2300      	movs	r3, #0
 800b162:	73fb      	strb	r3, [r7, #15]
 800b164:	e00f      	b.n	800b186 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b166:	7bfb      	ldrb	r3, [r7, #15]
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	33e0      	adds	r3, #224	; 0xe0
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	4413      	add	r3, r2
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b176:	2b00      	cmp	r3, #0
 800b178:	d102      	bne.n	800b180 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b17a:	7bfb      	ldrb	r3, [r7, #15]
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	e007      	b.n	800b190 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b180:	7bfb      	ldrb	r3, [r7, #15]
 800b182:	3301      	adds	r3, #1
 800b184:	73fb      	strb	r3, [r7, #15]
 800b186:	7bfb      	ldrb	r3, [r7, #15]
 800b188:	2b0f      	cmp	r3, #15
 800b18a:	d9ec      	bls.n	800b166 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b18c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b190:	4618      	mov	r0, r3
 800b192:	3714      	adds	r7, #20
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	490e      	ldr	r1, [pc, #56]	; (800b1dc <MX_USB_HOST_Init+0x40>)
 800b1a4:	480e      	ldr	r0, [pc, #56]	; (800b1e0 <MX_USB_HOST_Init+0x44>)
 800b1a6:	f7fe fb05 	bl	80097b4 <USBH_Init>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d001      	beq.n	800b1b4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b1b0:	f7f6 ff96 	bl	80020e0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b1b4:	490b      	ldr	r1, [pc, #44]	; (800b1e4 <MX_USB_HOST_Init+0x48>)
 800b1b6:	480a      	ldr	r0, [pc, #40]	; (800b1e0 <MX_USB_HOST_Init+0x44>)
 800b1b8:	f7fe fba9 	bl	800990e <USBH_RegisterClass>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d001      	beq.n	800b1c6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b1c2:	f7f6 ff8d 	bl	80020e0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b1c6:	4806      	ldr	r0, [pc, #24]	; (800b1e0 <MX_USB_HOST_Init+0x44>)
 800b1c8:	f7fe fc2d 	bl	8009a26 <USBH_Start>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b1d2:	f7f6 ff85 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b1d6:	bf00      	nop
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	0800b1fd 	.word	0x0800b1fd
 800b1e0:	200003d0 	.word	0x200003d0
 800b1e4:	20000030 	.word	0x20000030

0800b1e8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b1ec:	4802      	ldr	r0, [pc, #8]	; (800b1f8 <MX_USB_HOST_Process+0x10>)
 800b1ee:	f7fe fc2b 	bl	8009a48 <USBH_Process>
}
 800b1f2:	bf00      	nop
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	200003d0 	.word	0x200003d0

0800b1fc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	460b      	mov	r3, r1
 800b206:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b208:	78fb      	ldrb	r3, [r7, #3]
 800b20a:	3b01      	subs	r3, #1
 800b20c:	2b04      	cmp	r3, #4
 800b20e:	d819      	bhi.n	800b244 <USBH_UserProcess+0x48>
 800b210:	a201      	add	r2, pc, #4	; (adr r2, 800b218 <USBH_UserProcess+0x1c>)
 800b212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b216:	bf00      	nop
 800b218:	0800b245 	.word	0x0800b245
 800b21c:	0800b235 	.word	0x0800b235
 800b220:	0800b245 	.word	0x0800b245
 800b224:	0800b23d 	.word	0x0800b23d
 800b228:	0800b22d 	.word	0x0800b22d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b22c:	4b09      	ldr	r3, [pc, #36]	; (800b254 <USBH_UserProcess+0x58>)
 800b22e:	2203      	movs	r2, #3
 800b230:	701a      	strb	r2, [r3, #0]
  break;
 800b232:	e008      	b.n	800b246 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b234:	4b07      	ldr	r3, [pc, #28]	; (800b254 <USBH_UserProcess+0x58>)
 800b236:	2202      	movs	r2, #2
 800b238:	701a      	strb	r2, [r3, #0]
  break;
 800b23a:	e004      	b.n	800b246 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b23c:	4b05      	ldr	r3, [pc, #20]	; (800b254 <USBH_UserProcess+0x58>)
 800b23e:	2201      	movs	r2, #1
 800b240:	701a      	strb	r2, [r3, #0]
  break;
 800b242:	e000      	b.n	800b246 <USBH_UserProcess+0x4a>

  default:
  break;
 800b244:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b246:	bf00      	nop
 800b248:	370c      	adds	r7, #12
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	200007a8 	.word	0x200007a8

0800b258 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b08a      	sub	sp, #40	; 0x28
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b260:	f107 0314 	add.w	r3, r7, #20
 800b264:	2200      	movs	r2, #0
 800b266:	601a      	str	r2, [r3, #0]
 800b268:	605a      	str	r2, [r3, #4]
 800b26a:	609a      	str	r2, [r3, #8]
 800b26c:	60da      	str	r2, [r3, #12]
 800b26e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b278:	d147      	bne.n	800b30a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b27a:	2300      	movs	r3, #0
 800b27c:	613b      	str	r3, [r7, #16]
 800b27e:	4b25      	ldr	r3, [pc, #148]	; (800b314 <HAL_HCD_MspInit+0xbc>)
 800b280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b282:	4a24      	ldr	r2, [pc, #144]	; (800b314 <HAL_HCD_MspInit+0xbc>)
 800b284:	f043 0301 	orr.w	r3, r3, #1
 800b288:	6313      	str	r3, [r2, #48]	; 0x30
 800b28a:	4b22      	ldr	r3, [pc, #136]	; (800b314 <HAL_HCD_MspInit+0xbc>)
 800b28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28e:	f003 0301 	and.w	r3, r3, #1
 800b292:	613b      	str	r3, [r7, #16]
 800b294:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b29a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b29c:	2300      	movs	r3, #0
 800b29e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b2a4:	f107 0314 	add.w	r3, r7, #20
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	481b      	ldr	r0, [pc, #108]	; (800b318 <HAL_HCD_MspInit+0xc0>)
 800b2ac:	f7f7 fbb8 	bl	8002a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b2b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b2b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2b6:	2302      	movs	r3, #2
 800b2b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2be:	2303      	movs	r3, #3
 800b2c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b2c2:	230a      	movs	r3, #10
 800b2c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2c6:	f107 0314 	add.w	r3, r7, #20
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	4812      	ldr	r0, [pc, #72]	; (800b318 <HAL_HCD_MspInit+0xc0>)
 800b2ce:	f7f7 fba7 	bl	8002a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b2d2:	4b10      	ldr	r3, [pc, #64]	; (800b314 <HAL_HCD_MspInit+0xbc>)
 800b2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d6:	4a0f      	ldr	r2, [pc, #60]	; (800b314 <HAL_HCD_MspInit+0xbc>)
 800b2d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2dc:	6353      	str	r3, [r2, #52]	; 0x34
 800b2de:	2300      	movs	r3, #0
 800b2e0:	60fb      	str	r3, [r7, #12]
 800b2e2:	4b0c      	ldr	r3, [pc, #48]	; (800b314 <HAL_HCD_MspInit+0xbc>)
 800b2e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2e6:	4a0b      	ldr	r2, [pc, #44]	; (800b314 <HAL_HCD_MspInit+0xbc>)
 800b2e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b2ec:	6453      	str	r3, [r2, #68]	; 0x44
 800b2ee:	4b09      	ldr	r3, [pc, #36]	; (800b314 <HAL_HCD_MspInit+0xbc>)
 800b2f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2f6:	60fb      	str	r3, [r7, #12]
 800b2f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	2043      	movs	r0, #67	; 0x43
 800b300:	f7f7 fb57 	bl	80029b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b304:	2043      	movs	r0, #67	; 0x43
 800b306:	f7f7 fb70 	bl	80029ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b30a:	bf00      	nop
 800b30c:	3728      	adds	r7, #40	; 0x28
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	40023800 	.word	0x40023800
 800b318:	40020000 	.word	0x40020000

0800b31c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fe ff6b 	bl	800a206 <USBH_LL_IncTimer>
}
 800b330:	bf00      	nop
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b346:	4618      	mov	r0, r3
 800b348:	f7fe ffa3 	bl	800a292 <USBH_LL_Connect>
}
 800b34c:	bf00      	nop
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b362:	4618      	mov	r0, r3
 800b364:	f7fe ffac 	bl	800a2c0 <USBH_LL_Disconnect>
}
 800b368:	bf00      	nop
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	460b      	mov	r3, r1
 800b37a:	70fb      	strb	r3, [r7, #3]
 800b37c:	4613      	mov	r3, r2
 800b37e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fe ff5d 	bl	800a25a <USBH_LL_PortEnabled>
}
 800b3a0:	bf00      	nop
 800b3a2:	3708      	adds	r7, #8
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7fe ff5d 	bl	800a276 <USBH_LL_PortDisabled>
}
 800b3bc:	bf00      	nop
 800b3be:	3708      	adds	r7, #8
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d12a      	bne.n	800b42c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b3d6:	4a18      	ldr	r2, [pc, #96]	; (800b438 <USBH_LL_Init+0x74>)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	4a15      	ldr	r2, [pc, #84]	; (800b438 <USBH_LL_Init+0x74>)
 800b3e2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b3e6:	4b14      	ldr	r3, [pc, #80]	; (800b438 <USBH_LL_Init+0x74>)
 800b3e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b3ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b3ee:	4b12      	ldr	r3, [pc, #72]	; (800b438 <USBH_LL_Init+0x74>)
 800b3f0:	2208      	movs	r2, #8
 800b3f2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b3f4:	4b10      	ldr	r3, [pc, #64]	; (800b438 <USBH_LL_Init+0x74>)
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b3fa:	4b0f      	ldr	r3, [pc, #60]	; (800b438 <USBH_LL_Init+0x74>)
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b400:	4b0d      	ldr	r3, [pc, #52]	; (800b438 <USBH_LL_Init+0x74>)
 800b402:	2202      	movs	r2, #2
 800b404:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b406:	4b0c      	ldr	r3, [pc, #48]	; (800b438 <USBH_LL_Init+0x74>)
 800b408:	2200      	movs	r2, #0
 800b40a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b40c:	480a      	ldr	r0, [pc, #40]	; (800b438 <USBH_LL_Init+0x74>)
 800b40e:	f7f7 fcef 	bl	8002df0 <HAL_HCD_Init>
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d001      	beq.n	800b41c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b418:	f7f6 fe62 	bl	80020e0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b41c:	4806      	ldr	r0, [pc, #24]	; (800b438 <USBH_LL_Init+0x74>)
 800b41e:	f7f8 f94f 	bl	80036c0 <HAL_HCD_GetCurrentFrame>
 800b422:	4603      	mov	r3, r0
 800b424:	4619      	mov	r1, r3
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f7fe fede 	bl	800a1e8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	200007ac 	.word	0x200007ac

0800b43c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b444:	2300      	movs	r3, #0
 800b446:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b448:	2300      	movs	r3, #0
 800b44a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b452:	4618      	mov	r0, r3
 800b454:	f7f8 f8bc 	bl	80035d0 <HAL_HCD_Start>
 800b458:	4603      	mov	r3, r0
 800b45a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b45c:	7bfb      	ldrb	r3, [r7, #15]
 800b45e:	4618      	mov	r0, r3
 800b460:	f000 f95e 	bl	800b720 <USBH_Get_USB_Status>
 800b464:	4603      	mov	r3, r0
 800b466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b468:	7bbb      	ldrb	r3, [r7, #14]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b472:	b580      	push	{r7, lr}
 800b474:	b084      	sub	sp, #16
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b47a:	2300      	movs	r3, #0
 800b47c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b47e:	2300      	movs	r3, #0
 800b480:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b488:	4618      	mov	r0, r3
 800b48a:	f7f8 f8c4 	bl	8003616 <HAL_HCD_Stop>
 800b48e:	4603      	mov	r3, r0
 800b490:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b492:	7bfb      	ldrb	r3, [r7, #15]
 800b494:	4618      	mov	r0, r3
 800b496:	f000 f943 	bl	800b720 <USBH_Get_USB_Status>
 800b49a:	4603      	mov	r3, r0
 800b49c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b49e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7f8 f90e 	bl	80036dc <HAL_HCD_GetCurrentSpeed>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b02      	cmp	r3, #2
 800b4c4:	d00c      	beq.n	800b4e0 <USBH_LL_GetSpeed+0x38>
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	d80d      	bhi.n	800b4e6 <USBH_LL_GetSpeed+0x3e>
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d002      	beq.n	800b4d4 <USBH_LL_GetSpeed+0x2c>
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d003      	beq.n	800b4da <USBH_LL_GetSpeed+0x32>
 800b4d2:	e008      	b.n	800b4e6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b4d8:	e008      	b.n	800b4ec <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	73fb      	strb	r3, [r7, #15]
    break;
 800b4de:	e005      	b.n	800b4ec <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b4e0:	2302      	movs	r3, #2
 800b4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b4e4:	e002      	b.n	800b4ec <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	73fb      	strb	r3, [r7, #15]
    break;
 800b4ea:	bf00      	nop
  }
  return  speed;
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b084      	sub	sp, #16
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4fe:	2300      	movs	r3, #0
 800b500:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b502:	2300      	movs	r3, #0
 800b504:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7f8 f89f 	bl	8003650 <HAL_HCD_ResetPort>
 800b512:	4603      	mov	r3, r0
 800b514:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b516:	7bfb      	ldrb	r3, [r7, #15]
 800b518:	4618      	mov	r0, r3
 800b51a:	f000 f901 	bl	800b720 <USBH_Get_USB_Status>
 800b51e:	4603      	mov	r3, r0
 800b520:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b522:	7bbb      	ldrb	r3, [r7, #14]
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	460b      	mov	r3, r1
 800b536:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b53e:	78fa      	ldrb	r2, [r7, #3]
 800b540:	4611      	mov	r1, r2
 800b542:	4618      	mov	r0, r3
 800b544:	f7f8 f8a7 	bl	8003696 <HAL_HCD_HC_GetXferCount>
 800b548:	4603      	mov	r3, r0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3708      	adds	r7, #8
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b552:	b590      	push	{r4, r7, lr}
 800b554:	b089      	sub	sp, #36	; 0x24
 800b556:	af04      	add	r7, sp, #16
 800b558:	6078      	str	r0, [r7, #4]
 800b55a:	4608      	mov	r0, r1
 800b55c:	4611      	mov	r1, r2
 800b55e:	461a      	mov	r2, r3
 800b560:	4603      	mov	r3, r0
 800b562:	70fb      	strb	r3, [r7, #3]
 800b564:	460b      	mov	r3, r1
 800b566:	70bb      	strb	r3, [r7, #2]
 800b568:	4613      	mov	r3, r2
 800b56a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b570:	2300      	movs	r3, #0
 800b572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b57a:	787c      	ldrb	r4, [r7, #1]
 800b57c:	78ba      	ldrb	r2, [r7, #2]
 800b57e:	78f9      	ldrb	r1, [r7, #3]
 800b580:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b582:	9302      	str	r3, [sp, #8]
 800b584:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b588:	9301      	str	r3, [sp, #4]
 800b58a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	4623      	mov	r3, r4
 800b592:	f7f7 fc94 	bl	8002ebe <HAL_HCD_HC_Init>
 800b596:	4603      	mov	r3, r0
 800b598:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b59a:	7bfb      	ldrb	r3, [r7, #15]
 800b59c:	4618      	mov	r0, r3
 800b59e:	f000 f8bf 	bl	800b720 <USBH_Get_USB_Status>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3714      	adds	r7, #20
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd90      	pop	{r4, r7, pc}

0800b5b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5ca:	78fa      	ldrb	r2, [r7, #3]
 800b5cc:	4611      	mov	r1, r2
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7f7 fd2d 	bl	800302e <HAL_HCD_HC_Halt>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5d8:	7bfb      	ldrb	r3, [r7, #15]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f000 f8a0 	bl	800b720 <USBH_Get_USB_Status>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b5ee:	b590      	push	{r4, r7, lr}
 800b5f0:	b089      	sub	sp, #36	; 0x24
 800b5f2:	af04      	add	r7, sp, #16
 800b5f4:	6078      	str	r0, [r7, #4]
 800b5f6:	4608      	mov	r0, r1
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	70fb      	strb	r3, [r7, #3]
 800b600:	460b      	mov	r3, r1
 800b602:	70bb      	strb	r3, [r7, #2]
 800b604:	4613      	mov	r3, r2
 800b606:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b608:	2300      	movs	r3, #0
 800b60a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b60c:	2300      	movs	r3, #0
 800b60e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b616:	787c      	ldrb	r4, [r7, #1]
 800b618:	78ba      	ldrb	r2, [r7, #2]
 800b61a:	78f9      	ldrb	r1, [r7, #3]
 800b61c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b620:	9303      	str	r3, [sp, #12]
 800b622:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b624:	9302      	str	r3, [sp, #8]
 800b626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b628:	9301      	str	r3, [sp, #4]
 800b62a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	4623      	mov	r3, r4
 800b632:	f7f7 fd1f 	bl	8003074 <HAL_HCD_HC_SubmitRequest>
 800b636:	4603      	mov	r3, r0
 800b638:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b63a:	7bfb      	ldrb	r3, [r7, #15]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f000 f86f 	bl	800b720 <USBH_Get_USB_Status>
 800b642:	4603      	mov	r3, r0
 800b644:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b646:	7bbb      	ldrb	r3, [r7, #14]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3714      	adds	r7, #20
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd90      	pop	{r4, r7, pc}

0800b650 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	460b      	mov	r3, r1
 800b65a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b662:	78fa      	ldrb	r2, [r7, #3]
 800b664:	4611      	mov	r1, r2
 800b666:	4618      	mov	r0, r3
 800b668:	f7f8 f800 	bl	800366c <HAL_HCD_HC_GetURBState>
 800b66c:	4603      	mov	r3, r0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b082      	sub	sp, #8
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	460b      	mov	r3, r1
 800b680:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d103      	bne.n	800b694 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b68c:	78fb      	ldrb	r3, [r7, #3]
 800b68e:	4618      	mov	r0, r3
 800b690:	f000 f872 	bl	800b778 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b694:	20c8      	movs	r0, #200	; 0xc8
 800b696:	f7f7 f88d 	bl	80027b4 <HAL_Delay>
  return USBH_OK;
 800b69a:	2300      	movs	r3, #0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3708      	adds	r7, #8
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b085      	sub	sp, #20
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	70fb      	strb	r3, [r7, #3]
 800b6b0:	4613      	mov	r3, r2
 800b6b2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b6ba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b6bc:	78fa      	ldrb	r2, [r7, #3]
 800b6be:	68f9      	ldr	r1, [r7, #12]
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	011b      	lsls	r3, r3, #4
 800b6c4:	1a9b      	subs	r3, r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	440b      	add	r3, r1
 800b6ca:	3317      	adds	r3, #23
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00a      	beq.n	800b6e8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b6d2:	78fa      	ldrb	r2, [r7, #3]
 800b6d4:	68f9      	ldr	r1, [r7, #12]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	011b      	lsls	r3, r3, #4
 800b6da:	1a9b      	subs	r3, r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	440b      	add	r3, r1
 800b6e0:	333c      	adds	r3, #60	; 0x3c
 800b6e2:	78ba      	ldrb	r2, [r7, #2]
 800b6e4:	701a      	strb	r2, [r3, #0]
 800b6e6:	e009      	b.n	800b6fc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b6e8:	78fa      	ldrb	r2, [r7, #3]
 800b6ea:	68f9      	ldr	r1, [r7, #12]
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	011b      	lsls	r3, r3, #4
 800b6f0:	1a9b      	subs	r3, r3, r2
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	440b      	add	r3, r1
 800b6f6:	333d      	adds	r3, #61	; 0x3d
 800b6f8:	78ba      	ldrb	r2, [r7, #2]
 800b6fa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3714      	adds	r7, #20
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b082      	sub	sp, #8
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7f7 f84e 	bl	80027b4 <HAL_Delay>
}
 800b718:	bf00      	nop
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	4603      	mov	r3, r0
 800b728:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b72a:	2300      	movs	r3, #0
 800b72c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b72e:	79fb      	ldrb	r3, [r7, #7]
 800b730:	2b03      	cmp	r3, #3
 800b732:	d817      	bhi.n	800b764 <USBH_Get_USB_Status+0x44>
 800b734:	a201      	add	r2, pc, #4	; (adr r2, 800b73c <USBH_Get_USB_Status+0x1c>)
 800b736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b73a:	bf00      	nop
 800b73c:	0800b74d 	.word	0x0800b74d
 800b740:	0800b753 	.word	0x0800b753
 800b744:	0800b759 	.word	0x0800b759
 800b748:	0800b75f 	.word	0x0800b75f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b74c:	2300      	movs	r3, #0
 800b74e:	73fb      	strb	r3, [r7, #15]
    break;
 800b750:	e00b      	b.n	800b76a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b752:	2302      	movs	r3, #2
 800b754:	73fb      	strb	r3, [r7, #15]
    break;
 800b756:	e008      	b.n	800b76a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b758:	2301      	movs	r3, #1
 800b75a:	73fb      	strb	r3, [r7, #15]
    break;
 800b75c:	e005      	b.n	800b76a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b75e:	2302      	movs	r3, #2
 800b760:	73fb      	strb	r3, [r7, #15]
    break;
 800b762:	e002      	b.n	800b76a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b764:	2302      	movs	r3, #2
 800b766:	73fb      	strb	r3, [r7, #15]
    break;
 800b768:	bf00      	nop
  }
  return usb_status;
 800b76a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3714      	adds	r7, #20
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	4603      	mov	r3, r0
 800b780:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b782:	79fb      	ldrb	r3, [r7, #7]
 800b784:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b786:	79fb      	ldrb	r3, [r7, #7]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d102      	bne.n	800b792 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b78c:	2300      	movs	r3, #0
 800b78e:	73fb      	strb	r3, [r7, #15]
 800b790:	e001      	b.n	800b796 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b792:	2301      	movs	r3, #1
 800b794:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b796:	7bfb      	ldrb	r3, [r7, #15]
 800b798:	461a      	mov	r2, r3
 800b79a:	2101      	movs	r1, #1
 800b79c:	4803      	ldr	r0, [pc, #12]	; (800b7ac <MX_DriverVbusFS+0x34>)
 800b79e:	f7f7 fadb 	bl	8002d58 <HAL_GPIO_WritePin>
}
 800b7a2:	bf00      	nop
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	40020800 	.word	0x40020800

0800b7b0 <malloc>:
 800b7b0:	4b02      	ldr	r3, [pc, #8]	; (800b7bc <malloc+0xc>)
 800b7b2:	4601      	mov	r1, r0
 800b7b4:	6818      	ldr	r0, [r3, #0]
 800b7b6:	f000 b82b 	b.w	800b810 <_malloc_r>
 800b7ba:	bf00      	nop
 800b7bc:	2000009c 	.word	0x2000009c

0800b7c0 <free>:
 800b7c0:	4b02      	ldr	r3, [pc, #8]	; (800b7cc <free+0xc>)
 800b7c2:	4601      	mov	r1, r0
 800b7c4:	6818      	ldr	r0, [r3, #0]
 800b7c6:	f000 b8f3 	b.w	800b9b0 <_free_r>
 800b7ca:	bf00      	nop
 800b7cc:	2000009c 	.word	0x2000009c

0800b7d0 <sbrk_aligned>:
 800b7d0:	b570      	push	{r4, r5, r6, lr}
 800b7d2:	4e0e      	ldr	r6, [pc, #56]	; (800b80c <sbrk_aligned+0x3c>)
 800b7d4:	460c      	mov	r4, r1
 800b7d6:	6831      	ldr	r1, [r6, #0]
 800b7d8:	4605      	mov	r5, r0
 800b7da:	b911      	cbnz	r1, 800b7e2 <sbrk_aligned+0x12>
 800b7dc:	f000 f8ac 	bl	800b938 <_sbrk_r>
 800b7e0:	6030      	str	r0, [r6, #0]
 800b7e2:	4621      	mov	r1, r4
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	f000 f8a7 	bl	800b938 <_sbrk_r>
 800b7ea:	1c43      	adds	r3, r0, #1
 800b7ec:	d00a      	beq.n	800b804 <sbrk_aligned+0x34>
 800b7ee:	1cc4      	adds	r4, r0, #3
 800b7f0:	f024 0403 	bic.w	r4, r4, #3
 800b7f4:	42a0      	cmp	r0, r4
 800b7f6:	d007      	beq.n	800b808 <sbrk_aligned+0x38>
 800b7f8:	1a21      	subs	r1, r4, r0
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	f000 f89c 	bl	800b938 <_sbrk_r>
 800b800:	3001      	adds	r0, #1
 800b802:	d101      	bne.n	800b808 <sbrk_aligned+0x38>
 800b804:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b808:	4620      	mov	r0, r4
 800b80a:	bd70      	pop	{r4, r5, r6, pc}
 800b80c:	20000b90 	.word	0x20000b90

0800b810 <_malloc_r>:
 800b810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b814:	1ccd      	adds	r5, r1, #3
 800b816:	f025 0503 	bic.w	r5, r5, #3
 800b81a:	3508      	adds	r5, #8
 800b81c:	2d0c      	cmp	r5, #12
 800b81e:	bf38      	it	cc
 800b820:	250c      	movcc	r5, #12
 800b822:	2d00      	cmp	r5, #0
 800b824:	4607      	mov	r7, r0
 800b826:	db01      	blt.n	800b82c <_malloc_r+0x1c>
 800b828:	42a9      	cmp	r1, r5
 800b82a:	d905      	bls.n	800b838 <_malloc_r+0x28>
 800b82c:	230c      	movs	r3, #12
 800b82e:	603b      	str	r3, [r7, #0]
 800b830:	2600      	movs	r6, #0
 800b832:	4630      	mov	r0, r6
 800b834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b838:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b90c <_malloc_r+0xfc>
 800b83c:	f000 f868 	bl	800b910 <__malloc_lock>
 800b840:	f8d8 3000 	ldr.w	r3, [r8]
 800b844:	461c      	mov	r4, r3
 800b846:	bb5c      	cbnz	r4, 800b8a0 <_malloc_r+0x90>
 800b848:	4629      	mov	r1, r5
 800b84a:	4638      	mov	r0, r7
 800b84c:	f7ff ffc0 	bl	800b7d0 <sbrk_aligned>
 800b850:	1c43      	adds	r3, r0, #1
 800b852:	4604      	mov	r4, r0
 800b854:	d155      	bne.n	800b902 <_malloc_r+0xf2>
 800b856:	f8d8 4000 	ldr.w	r4, [r8]
 800b85a:	4626      	mov	r6, r4
 800b85c:	2e00      	cmp	r6, #0
 800b85e:	d145      	bne.n	800b8ec <_malloc_r+0xdc>
 800b860:	2c00      	cmp	r4, #0
 800b862:	d048      	beq.n	800b8f6 <_malloc_r+0xe6>
 800b864:	6823      	ldr	r3, [r4, #0]
 800b866:	4631      	mov	r1, r6
 800b868:	4638      	mov	r0, r7
 800b86a:	eb04 0903 	add.w	r9, r4, r3
 800b86e:	f000 f863 	bl	800b938 <_sbrk_r>
 800b872:	4581      	cmp	r9, r0
 800b874:	d13f      	bne.n	800b8f6 <_malloc_r+0xe6>
 800b876:	6821      	ldr	r1, [r4, #0]
 800b878:	1a6d      	subs	r5, r5, r1
 800b87a:	4629      	mov	r1, r5
 800b87c:	4638      	mov	r0, r7
 800b87e:	f7ff ffa7 	bl	800b7d0 <sbrk_aligned>
 800b882:	3001      	adds	r0, #1
 800b884:	d037      	beq.n	800b8f6 <_malloc_r+0xe6>
 800b886:	6823      	ldr	r3, [r4, #0]
 800b888:	442b      	add	r3, r5
 800b88a:	6023      	str	r3, [r4, #0]
 800b88c:	f8d8 3000 	ldr.w	r3, [r8]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d038      	beq.n	800b906 <_malloc_r+0xf6>
 800b894:	685a      	ldr	r2, [r3, #4]
 800b896:	42a2      	cmp	r2, r4
 800b898:	d12b      	bne.n	800b8f2 <_malloc_r+0xe2>
 800b89a:	2200      	movs	r2, #0
 800b89c:	605a      	str	r2, [r3, #4]
 800b89e:	e00f      	b.n	800b8c0 <_malloc_r+0xb0>
 800b8a0:	6822      	ldr	r2, [r4, #0]
 800b8a2:	1b52      	subs	r2, r2, r5
 800b8a4:	d41f      	bmi.n	800b8e6 <_malloc_r+0xd6>
 800b8a6:	2a0b      	cmp	r2, #11
 800b8a8:	d917      	bls.n	800b8da <_malloc_r+0xca>
 800b8aa:	1961      	adds	r1, r4, r5
 800b8ac:	42a3      	cmp	r3, r4
 800b8ae:	6025      	str	r5, [r4, #0]
 800b8b0:	bf18      	it	ne
 800b8b2:	6059      	strne	r1, [r3, #4]
 800b8b4:	6863      	ldr	r3, [r4, #4]
 800b8b6:	bf08      	it	eq
 800b8b8:	f8c8 1000 	streq.w	r1, [r8]
 800b8bc:	5162      	str	r2, [r4, r5]
 800b8be:	604b      	str	r3, [r1, #4]
 800b8c0:	4638      	mov	r0, r7
 800b8c2:	f104 060b 	add.w	r6, r4, #11
 800b8c6:	f000 f829 	bl	800b91c <__malloc_unlock>
 800b8ca:	f026 0607 	bic.w	r6, r6, #7
 800b8ce:	1d23      	adds	r3, r4, #4
 800b8d0:	1af2      	subs	r2, r6, r3
 800b8d2:	d0ae      	beq.n	800b832 <_malloc_r+0x22>
 800b8d4:	1b9b      	subs	r3, r3, r6
 800b8d6:	50a3      	str	r3, [r4, r2]
 800b8d8:	e7ab      	b.n	800b832 <_malloc_r+0x22>
 800b8da:	42a3      	cmp	r3, r4
 800b8dc:	6862      	ldr	r2, [r4, #4]
 800b8de:	d1dd      	bne.n	800b89c <_malloc_r+0x8c>
 800b8e0:	f8c8 2000 	str.w	r2, [r8]
 800b8e4:	e7ec      	b.n	800b8c0 <_malloc_r+0xb0>
 800b8e6:	4623      	mov	r3, r4
 800b8e8:	6864      	ldr	r4, [r4, #4]
 800b8ea:	e7ac      	b.n	800b846 <_malloc_r+0x36>
 800b8ec:	4634      	mov	r4, r6
 800b8ee:	6876      	ldr	r6, [r6, #4]
 800b8f0:	e7b4      	b.n	800b85c <_malloc_r+0x4c>
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	e7cc      	b.n	800b890 <_malloc_r+0x80>
 800b8f6:	230c      	movs	r3, #12
 800b8f8:	603b      	str	r3, [r7, #0]
 800b8fa:	4638      	mov	r0, r7
 800b8fc:	f000 f80e 	bl	800b91c <__malloc_unlock>
 800b900:	e797      	b.n	800b832 <_malloc_r+0x22>
 800b902:	6025      	str	r5, [r4, #0]
 800b904:	e7dc      	b.n	800b8c0 <_malloc_r+0xb0>
 800b906:	605b      	str	r3, [r3, #4]
 800b908:	deff      	udf	#255	; 0xff
 800b90a:	bf00      	nop
 800b90c:	20000b8c 	.word	0x20000b8c

0800b910 <__malloc_lock>:
 800b910:	4801      	ldr	r0, [pc, #4]	; (800b918 <__malloc_lock+0x8>)
 800b912:	f000 b84b 	b.w	800b9ac <__retarget_lock_acquire_recursive>
 800b916:	bf00      	nop
 800b918:	20000ccc 	.word	0x20000ccc

0800b91c <__malloc_unlock>:
 800b91c:	4801      	ldr	r0, [pc, #4]	; (800b924 <__malloc_unlock+0x8>)
 800b91e:	f000 b846 	b.w	800b9ae <__retarget_lock_release_recursive>
 800b922:	bf00      	nop
 800b924:	20000ccc 	.word	0x20000ccc

0800b928 <memset>:
 800b928:	4402      	add	r2, r0
 800b92a:	4603      	mov	r3, r0
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d100      	bne.n	800b932 <memset+0xa>
 800b930:	4770      	bx	lr
 800b932:	f803 1b01 	strb.w	r1, [r3], #1
 800b936:	e7f9      	b.n	800b92c <memset+0x4>

0800b938 <_sbrk_r>:
 800b938:	b538      	push	{r3, r4, r5, lr}
 800b93a:	4d06      	ldr	r5, [pc, #24]	; (800b954 <_sbrk_r+0x1c>)
 800b93c:	2300      	movs	r3, #0
 800b93e:	4604      	mov	r4, r0
 800b940:	4608      	mov	r0, r1
 800b942:	602b      	str	r3, [r5, #0]
 800b944:	f7f6 fe52 	bl	80025ec <_sbrk>
 800b948:	1c43      	adds	r3, r0, #1
 800b94a:	d102      	bne.n	800b952 <_sbrk_r+0x1a>
 800b94c:	682b      	ldr	r3, [r5, #0]
 800b94e:	b103      	cbz	r3, 800b952 <_sbrk_r+0x1a>
 800b950:	6023      	str	r3, [r4, #0]
 800b952:	bd38      	pop	{r3, r4, r5, pc}
 800b954:	20000cd0 	.word	0x20000cd0

0800b958 <__errno>:
 800b958:	4b01      	ldr	r3, [pc, #4]	; (800b960 <__errno+0x8>)
 800b95a:	6818      	ldr	r0, [r3, #0]
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	2000009c 	.word	0x2000009c

0800b964 <__libc_init_array>:
 800b964:	b570      	push	{r4, r5, r6, lr}
 800b966:	4d0d      	ldr	r5, [pc, #52]	; (800b99c <__libc_init_array+0x38>)
 800b968:	4c0d      	ldr	r4, [pc, #52]	; (800b9a0 <__libc_init_array+0x3c>)
 800b96a:	1b64      	subs	r4, r4, r5
 800b96c:	10a4      	asrs	r4, r4, #2
 800b96e:	2600      	movs	r6, #0
 800b970:	42a6      	cmp	r6, r4
 800b972:	d109      	bne.n	800b988 <__libc_init_array+0x24>
 800b974:	4d0b      	ldr	r5, [pc, #44]	; (800b9a4 <__libc_init_array+0x40>)
 800b976:	4c0c      	ldr	r4, [pc, #48]	; (800b9a8 <__libc_init_array+0x44>)
 800b978:	f000 f866 	bl	800ba48 <_init>
 800b97c:	1b64      	subs	r4, r4, r5
 800b97e:	10a4      	asrs	r4, r4, #2
 800b980:	2600      	movs	r6, #0
 800b982:	42a6      	cmp	r6, r4
 800b984:	d105      	bne.n	800b992 <__libc_init_array+0x2e>
 800b986:	bd70      	pop	{r4, r5, r6, pc}
 800b988:	f855 3b04 	ldr.w	r3, [r5], #4
 800b98c:	4798      	blx	r3
 800b98e:	3601      	adds	r6, #1
 800b990:	e7ee      	b.n	800b970 <__libc_init_array+0xc>
 800b992:	f855 3b04 	ldr.w	r3, [r5], #4
 800b996:	4798      	blx	r3
 800b998:	3601      	adds	r6, #1
 800b99a:	e7f2      	b.n	800b982 <__libc_init_array+0x1e>
 800b99c:	0800ba98 	.word	0x0800ba98
 800b9a0:	0800ba98 	.word	0x0800ba98
 800b9a4:	0800ba98 	.word	0x0800ba98
 800b9a8:	0800ba9c 	.word	0x0800ba9c

0800b9ac <__retarget_lock_acquire_recursive>:
 800b9ac:	4770      	bx	lr

0800b9ae <__retarget_lock_release_recursive>:
 800b9ae:	4770      	bx	lr

0800b9b0 <_free_r>:
 800b9b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9b2:	2900      	cmp	r1, #0
 800b9b4:	d044      	beq.n	800ba40 <_free_r+0x90>
 800b9b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ba:	9001      	str	r0, [sp, #4]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f1a1 0404 	sub.w	r4, r1, #4
 800b9c2:	bfb8      	it	lt
 800b9c4:	18e4      	addlt	r4, r4, r3
 800b9c6:	f7ff ffa3 	bl	800b910 <__malloc_lock>
 800b9ca:	4a1e      	ldr	r2, [pc, #120]	; (800ba44 <_free_r+0x94>)
 800b9cc:	9801      	ldr	r0, [sp, #4]
 800b9ce:	6813      	ldr	r3, [r2, #0]
 800b9d0:	b933      	cbnz	r3, 800b9e0 <_free_r+0x30>
 800b9d2:	6063      	str	r3, [r4, #4]
 800b9d4:	6014      	str	r4, [r2, #0]
 800b9d6:	b003      	add	sp, #12
 800b9d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9dc:	f7ff bf9e 	b.w	800b91c <__malloc_unlock>
 800b9e0:	42a3      	cmp	r3, r4
 800b9e2:	d908      	bls.n	800b9f6 <_free_r+0x46>
 800b9e4:	6825      	ldr	r5, [r4, #0]
 800b9e6:	1961      	adds	r1, r4, r5
 800b9e8:	428b      	cmp	r3, r1
 800b9ea:	bf01      	itttt	eq
 800b9ec:	6819      	ldreq	r1, [r3, #0]
 800b9ee:	685b      	ldreq	r3, [r3, #4]
 800b9f0:	1949      	addeq	r1, r1, r5
 800b9f2:	6021      	streq	r1, [r4, #0]
 800b9f4:	e7ed      	b.n	800b9d2 <_free_r+0x22>
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	b10b      	cbz	r3, 800ba00 <_free_r+0x50>
 800b9fc:	42a3      	cmp	r3, r4
 800b9fe:	d9fa      	bls.n	800b9f6 <_free_r+0x46>
 800ba00:	6811      	ldr	r1, [r2, #0]
 800ba02:	1855      	adds	r5, r2, r1
 800ba04:	42a5      	cmp	r5, r4
 800ba06:	d10b      	bne.n	800ba20 <_free_r+0x70>
 800ba08:	6824      	ldr	r4, [r4, #0]
 800ba0a:	4421      	add	r1, r4
 800ba0c:	1854      	adds	r4, r2, r1
 800ba0e:	42a3      	cmp	r3, r4
 800ba10:	6011      	str	r1, [r2, #0]
 800ba12:	d1e0      	bne.n	800b9d6 <_free_r+0x26>
 800ba14:	681c      	ldr	r4, [r3, #0]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	6053      	str	r3, [r2, #4]
 800ba1a:	440c      	add	r4, r1
 800ba1c:	6014      	str	r4, [r2, #0]
 800ba1e:	e7da      	b.n	800b9d6 <_free_r+0x26>
 800ba20:	d902      	bls.n	800ba28 <_free_r+0x78>
 800ba22:	230c      	movs	r3, #12
 800ba24:	6003      	str	r3, [r0, #0]
 800ba26:	e7d6      	b.n	800b9d6 <_free_r+0x26>
 800ba28:	6825      	ldr	r5, [r4, #0]
 800ba2a:	1961      	adds	r1, r4, r5
 800ba2c:	428b      	cmp	r3, r1
 800ba2e:	bf04      	itt	eq
 800ba30:	6819      	ldreq	r1, [r3, #0]
 800ba32:	685b      	ldreq	r3, [r3, #4]
 800ba34:	6063      	str	r3, [r4, #4]
 800ba36:	bf04      	itt	eq
 800ba38:	1949      	addeq	r1, r1, r5
 800ba3a:	6021      	streq	r1, [r4, #0]
 800ba3c:	6054      	str	r4, [r2, #4]
 800ba3e:	e7ca      	b.n	800b9d6 <_free_r+0x26>
 800ba40:	b003      	add	sp, #12
 800ba42:	bd30      	pop	{r4, r5, pc}
 800ba44:	20000b8c 	.word	0x20000b8c

0800ba48 <_init>:
 800ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4a:	bf00      	nop
 800ba4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4e:	bc08      	pop	{r3}
 800ba50:	469e      	mov	lr, r3
 800ba52:	4770      	bx	lr

0800ba54 <_fini>:
 800ba54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba56:	bf00      	nop
 800ba58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba5a:	bc08      	pop	{r3}
 800ba5c:	469e      	mov	lr, r3
 800ba5e:	4770      	bx	lr
